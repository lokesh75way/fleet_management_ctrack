{"version":3,"file":"static/js/3619.8fb268d3.chunk.js","mappings":"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","sources":["jsx/pages/Map.jsx","jsx/pages/GeofenceMap.jsx","services/api/GeoFenceService.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport {\n  MapContainer,\n  TileLayer,\n  GeoJSON,\n  Circle,\n  Polygon,\n  Polyline,\n  Marker,\n  Popup,\n  Tooltip,\n} from \"react-leaflet\";\nimport EditControlFC from \"../components/maps/EditControl\";\n\nconst Map = ({ geofenceHanlder, setValue, getValues, defaultValues ,errors}) => {\n  const [lineString, setLineString] = useState([]);\n  const [points, setPoints] = useState([]);\n  const [circles, setCircles] = useState([]);\n  const [polygon, setPolygon] = useState([]);\n  const [geojson, setGeojson] = React.useState({\n    type: \"FeatureCollection\",\n    features: [],\n  });\n\n  useEffect(() => {\n    if (defaultValues?.location) {\n      setLineString([])\n      setCircles([]);\n      setPoints([]);\n      setPolygon([]);\n      defaultValues?.location.map((loc) => {\n        if (loc.type === \"Circle\") {\n          setCircles((prev) => [...prev, loc]);\n        }\n        if (loc.type === \"Polygon\") {\n          setPolygon((prev) => [...prev,\n            {\n              type: loc.type,\n              coordinates: loc.coordinates,\n            },\n          ]);\n        }\n\n        if (loc.type === \"Point\") {\n          setPoints((prev) => [...prev, loc]);\n        }\n\n        if (loc.type === \"LineString\") {\n          setLineString((prev) => [...prev, loc]);\n        }\n      });\n    }\n   \n  }, [defaultValues]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"85vh\",\n        border: errors.location ? \"3px solid #ff5e5e\" : null,\n      }}\n    >\n      <div style={{ width: \"100%\" }}>\n        <MapContainer center={[25.2233, 55.2869]} zoom={14} zoomControl={false}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n          />\n          <Marker styles={{ background: \"red\" }} position={[25.2233, 55.2869]}>\n            <Popup>Dubai Trade Center</Popup>\n            <Tooltip>Dubai Trade Center</Tooltip>\n          </Marker>\n        \n          <EditControlFC\n            points={points}\n            lineString={lineString}\n            circles={circles}\n            polygon={polygon}\n            setValues={setValue}\n            geofenceHanlder={geofenceHanlder}\n            defaultValues={defaultValues}\n          />\n        </MapContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport Map from \"./Map\";\nimport CustomInput from \"../components/Input/CustomInput\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { geofenceMapSchema } from \"../../yup\";\nimport {\n  categoryOptions,\n  toleranceOptions,\n} from \"../components/TabComponent/VehicleTabs/Options\";\nimport { Button } from \"react-bootstrap\";\nimport Error from \"../components/Error/Error\";\nimport { notifyError, notifySuccess } from \"../../utils/toast\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  createGeofenceData,\n  getGeofenceById,\n  updateGeofence,\n} from \"../../services/api/GeoFenceService\";\n\nimport { useTranslation } from \"react-i18next\";\nimport CompanyDropdown from \"../components/CompanyDropdown\";\n\nconst GeofenceDetail = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [defaultData, setDefaultData] = useState();\n  const [tempValue, setTempValue] = useState();\n  const [groupId, setGroupId] = useState(null);\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [companyId, setCompanyId] = useState();\n  const [companyDisabled, setCompanyDisabled] = useState(false);\n  const userDetails = JSON.parse(localStorage.getItem(\"userDetails\"));\n\n\n  const customStyles = {\n    control: (base) => ({\n      ...base,\n      padding: \".25rem 0 \", // Adjust the height as needed\n    }),\n  };\n\n  const getGeofenceDataById = async () => {\n    if (id) {\n      const { data } = await getGeofenceById(id);\n      setDefaultData(data);\n      setValue(\"company\", data.company);\n      setValue(\"name\", data.name);\n      setValue(\"category\", data.category);\n      setValue(\"contactNumber\", data.contactNumber);\n      setValue(\"tolerance\", data.tolerance);\n      setValue(\"geofenceAccess\", data.geofenceAccess);\n      setSelectedOption(data.geofenceAccess);\n      setValue(\"description\", data.description);\n      setValue(\"address\", data.address);\n      \n      setValue('location',data.location)\n    }\n  };\n\n  useEffect(() => {\n    if (userDetails.user.role === \"COMPANY\") {\n      console.log(userDetails);\n      setValue(\"businessGroupId\", userDetails?.user.businessGroupId);\n      setGroupId(userDetails?.user.businessGroupId);\n\n      setValue(\"companyId\", userDetails?.user.companyId);\n      setCompanyId(userDetails?.user.companyId);\n      setCompanyDisabled(true);\n      console.log(\"companyId\", userDetails?.user.businessGroupId);\n    }\n    if (userDetails.user.role === \"BUSINESS_GROUP\") {\n      setValue(\"businessGroupId\", userDetails?.user.businessGroupId);\n      setGroupId(userDetails?.user.businessGroupId);\n    }\n\n    if (id) {\n      getGeofenceDataById();\n    }\n  }, [id]);\n\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    getValues,\n    control,\n    handleSubmit,\n  } = useForm({\n    resolver: yupResolver(geofenceMapSchema),\n    defaultValues : {\n      category : categoryOptions[0].value,\n      tolerance : toleranceOptions[0].value\n    }\n  });\n  const handleChange = (e) => {\n    setSelectedOption(e.target.value);\n    setValue(\"geofenceAccess\", e.target.value);\n  };\n\n\n  const onSubmit = async (data) => {\n    try {\n      if (id) {\n        const {success} = await updateGeofence(id, data);\n        if (success) {\n          notifySuccess(\"Geofence updated successfully!\");\n          navigate(\"/settings/geofence\");\n        }\n        return;\n      } else {\n        console.log(data);\n        const { success } = await createGeofenceData(data);\n        if (success) {\n          notifySuccess(\"New Geofence Created!\");\n          navigate(\"/settings/geofence\");\n        }\n        return;\n      }\n    } catch (error) {\n      console.log(error);\n      notifyError(\"Some error occured !!\");\n      return;\n    }\n  };\n\n  const Geofence = JSON.parse(localStorage.getItem(\"geofenceData\"));\n  const GeoData = Geofence.filter((item) => item.id == id);\n  const [filteredGeoData, setFilteredGeoData] = useState(GeoData);\n  const { t } = useTranslation();\n  return (\n    <div>\n      <div style={{ padding: \"10px\", backgroundColor: \"#FFFDFD\" }}>\n        <h2 style={{ fontSize: \"20px\" }}>{t(\"geofenceDetail\")}l</h2>\n      </div>\n\n      <div className=\"\" style={{ display: \"flex\", height: \"88vh\" }}>\n        <div\n          className=\"col-md-3\"\n          style={{\n            padding: \"15px\",\n            boxShadow: \"9px 0 4px rgba(0, 0, 0, 0.1)\",\n            backgroundColor: \"#fff\",\n            overflow: \"auto\",\n          }}\n        >\n          <FormProvider>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  {t(\"company\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"company\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <CompanyDropdown\n                      key={groupId}\n                      groupId={groupId}\n                      onChange={(newValue) => {\n                        setValue(\"company\", newValue.value);\n                        setValue(\"companyName\", newValue.value);\n                        setCompanyId(newValue.value);\n                      }}\n                      value={value}\n                      customStyles={customStyles}\n                      ref={ref}\n                      isDisabled={companyDisabled}\n                      name={name}\n                    />\n                  )}\n                />\n                <Error errorName={errors.company} />\n              </div>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  {t(\"name\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  label=\"Name\"\n                  register={register}\n                  name=\"name\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].name : \"\"\n                  }\n                />\n                <Error errorName={errors.name} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  {t(\"category\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"category\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"category\", newValue.value);\n                      }}\n                      options={categoryOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      value={{value ,label : value}}\n                    />\n                  )}\n                />\n                {!getValues(\"category\") && (\n                  <Error errorName={errors.category} />\n                )}\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  {t(\"geofenceAccess\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <div\n                  style={{ display: \"flex\", flexDirection: \"row\", gap: \"5rem\" }}\n                >\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"PUBLIC\"\n                      checked={selectedOption === \"PUBLIC\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">{t(\"public\")}</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"PRIVATE\"\n                      checked={selectedOption === \"PRIVATE\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">{t(\"private\")}</label>\n                  </div>\n                </div>\n                {!getValues(\"geofenceAccess\") && (\n                  <Error errorName={errors.geofenceAccess} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"contactNumber\" className=\"form-label\">\n                  {t(\"contactNumber\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"number\"\n                  register={register}\n                  label=\"Contact Number\"\n                  name=\"contactNumber\"\n                  min=\"0\"\n                  onInput={(e) => {\n                    const temp = Math.max(0, e.target.value);\n                    e.target.value = temp < 1 ? \"\" : temp;\n                  }}\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].contactNumber : \"\"\n                  }\n                />\n                <Error errorName={errors.contactNumber} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"address\" className=\"form-label\">\n                  {t(\"address\")}:\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"address\")}\n                  label=\"Address\"\n                  name=\"address\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].address : \"\"\n                  }\n                />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  {t(\"tolerance\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"tolerance\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"tolerance\", newValue.value);\n                      }}\n                      options={toleranceOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      value={{label : value , value : value}}\n                    />\n                    \n                  )}\n                />\n                {!getValues(\"tolerance\") && (\n                  <Error errorName={errors.tolerance} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">{t(\"description\")}:</label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"description\")}\n                  name=\"description\"\n                  label=\"Description\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].description : \"\"\n                  }\n                />\n              </div>\n              {!getValues(\"location\") && <Error errorName={errors.location} />}\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  margin: \"2rem 0\",\n                }}\n              >\n                <Button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n                  {\" \"}\n                  {t(\"submit\")}\n                </Button>\n              </div>\n            </form>\n          </FormProvider>\n        </div>\n\n        {/* Right side */}\n        <div className=\"col-md-9\" style={{ paddingLeft: \"15px\" }}>\n          <Map\n            setValue={setValue}\n            getValues={getValues}\n            defaultValues={defaultData}\n            errors={errors}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeofenceDetail;\n","import axios from \"axios\"\n\nexport const getGeofenceData =async  (pageNo = 1, limit = 10) => {\n    const data = await axios.get(`/geofences?page=${pageNo}&limit=${limit}`)\n    return data.data.data;\n}\n\nexport const deleteGeofenceData = async (id) => {\n   const {data} =  await axios.delete(`/geofences/${id}`)\n    return data;\n}\n\nexport const createGeofenceData = async (body) => {\n    const {data} = await axios.post('/geofences',body);\n    return data;\n}\n\nexport const getGeofenceById = async (id) => {\n    const {data} = await axios.get(`/geofences/${id}`);\n    return data;\n}\n\nexport const updateGeofence = async (id,body) => {\n    const {data} = await axios.patch(`/geofences/${id}`,body);\n    return data;\n}"],"names":["_ref","geofenceHanlder","setValue","getValues","defaultValues","errors","lineString","setLineString","useState","points","setPoints","circles","setCircles","polygon","setPolygon","geojson","setGeojson","React","type","features","useEffect","location","map","loc","prev","coordinates","_jsx","style","display","height","border","children","width","_jsxs","MapContainer","center","zoom","zoomControl","TileLayer","attribution","url","Marker","styles","background","position","Popup","Tooltip","EditControlFC","setValues","GeofenceDetail","selectedOption","setSelectedOption","defaultData","setDefaultData","tempValue","setTempValue","groupId","setGroupId","navigate","useNavigate","id","useParams","companyId","setCompanyId","companyDisabled","setCompanyDisabled","userDetails","JSON","parse","localStorage","getItem","customStyles","control","base","padding","user","role","console","log","businessGroupId","async","data","getGeofenceById","company","name","category","contactNumber","tolerance","geofenceAccess","description","address","getGeofenceDataById","register","formState","handleSubmit","useForm","resolver","yupResolver","geofenceMapSchema","categoryOptions","value","toleranceOptions","handleChange","e","target","onSubmit","success","updateGeofence","notifySuccess","createGeofenceData","error","notifyError","GeoData","filter","item","filteredGeoData","setFilteredGeoData","t","useTranslation","backgroundColor","fontSize","className","boxShadow","overflow","FormProvider","htmlFor","Controller","rules","required","render","field","onChange","ref","CompanyDropdown","newValue","isDisabled","Error","errorName","CustomInput","label","defaultValue","_ref2","Select","options","flexDirection","gap","checked","min","onInput","temp","Math","max","_ref3","justifyContent","margin","Button","onClick","paddingLeft","Map","getGeofenceData","pageNo","arguments","length","undefined","limit","axios","get","concat","deleteGeofenceData","delete","post","body","patch"],"sourceRoot":""}