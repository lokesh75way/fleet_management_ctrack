{"version":3,"file":"static/js/3925.5ceaaca0.chunk.js","mappings":"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","sources":["features/vehicle/api.js","jsx/components/Tracking/CompanyItem.jsx","jsx/components/Tracking/DriverTabComponent3.jsx","jsx/components/Tracking/DriverItem.jsx","jsx/components/maps/DriverTab.jsx","features/vehicle/pages/Tracking.jsx"],"sourcesContent":["import { axiosInstance as axios } from \"@/services/api\";\n\nexport const createVehicles = async (body) => {\n  return axios.post(\"/vehicles\", body);\n};\n\nexport const getAllVehicles = async (page, branchIds) => {\n  let url = `/vehicles?page=${page}&limit=10`;\n\n  if (branchIds) {\n    if (Array.isArray(branchIds)) {\n      // If branchIds is an array, append each branchId to the URL\n      branchIds.forEach((id) => {\n        url += `&branchIds=${id}`;\n      });\n    } else {\n      // If branchIds is a single value, append it directly to the URL\n      url += `&branchIds=${branchIds}`;\n    }\n  }\n\n  const { data } = await axios.get(url);\n  return { data: data.data.data, totalCount: data.data.totalCount };\n};\n\nexport const getUnassignedVehicle = async (page) => {\n  const { data } = await axios.get(\n    `/vehicles/unassigned?page=${page}&limit=${10}`\n  );\n  return { data: data.data.data, totalLength: data.data.totalCount };\n};\n\nexport const deleteVehicle = async (body) => {\n  return axios.delete(`/vehicles/${body}`);\n};\n\nexport const updateVehicles = async (body, id) => {\n  return axios.patch(`/vehicles/${id}`, body);\n};\n\nexport const getVehiclesByCompany = async (search = \"\") => {\n  const { data } = await axios.get(`/vehicles/list?search=${search}`);\n  return { data: data.data };\n};\n\nexport const getVehiclesTraking = async (id, status) => {\n  const { data } = await axios.get(`/vehicles/tracking?${id}&status=${status}`);\n  return {\n    data: data.data.data,\n    count: data.data.count,\n    centerCoordinate: data.data.centerCoordinate,\n  };\n};\n\nexport const getVehicleById = async (id) => {\n  const { data } = await axios.get(`/vehicles/${id}`);\n  return data?.data?.data;\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { Button } from \"react-bootstrap\";\nconst CompanyItem = (props) => {\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [nodes, setNodes] = useState([]);\n\n  useEffect(() => {\n    const data = props?.companyVehicle.map((data) => {\n      const childNode = data?.vehicles?.map((subItem) => {\n        return { label: subItem?.vehicleName, value: subItem?._id };\n      });\n\n      return {\n        value: data?._id,\n        label: data?.companyName,\n        children: childNode,\n      };\n    });\n    setNodes([...data]);\n  }, [props.companyVehicle]);\n\n  // useEffect(() => {\n  //   const data = Object.entries(props.vehicles).map((data) => {\n  //     const childNode = data[1].map((data) => {\n  //       return { label: data.vehicleName, value: data.id };\n  //     });\n\n  //     return { value: data[0], label: data[0], children: childNode };\n  //   });\n  //   setNodes([...data]);\n  // }, [props.vehicles]);\n\n  useEffect(() => {\n    let vehicleIds = [];\n    const data = nodes?.map((ele) =>\n      ele.children?.map((vehicle) => vehicleIds.push(vehicle.value))\n    );\n    handleCheck(vehicleIds);\n  }, [nodes]);\n\n  const handleCheck = (checked) => {\n    setChecked(checked);\n    props.setVehicleIds(checked);\n  };\n  const handleExpand = (expanded) => {\n    setExpanded(expanded);\n  };\n  const handleSubmit = () => {\n    // TODO Only set vehicleIds here\n    props.handleToggleCardPositionHandler();\n  };\n\n  return (\n    <>\n      <div className=\"checkboxTree\">\n        <CheckboxTree\n          nodes={nodes}\n          checked={checked}\n          expanded={expanded}\n          onCheck={handleCheck}\n          onExpand={handleExpand}\n          showNodeIcon={false}\n          icons={{\n            expandOpen: <i class=\"fa-solid fa-minus\"></i>,\n            expandClose: <i class=\"fa-solid fa-plus\"></i>,\n            uncheck: (\n              <i\n                class=\"fa-regular fa-square\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            check: (\n              <i\n                class=\"fa-solid fa-square-check\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            halfCheck: (\n              <i\n                class=\"fa-regular fa-square-minus\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n          }}\n        />\n      </div>\n      <div className=\"text-center  pt-2 \">\n        <Button\n          className=\" mb-5\"\n          variant=\"primary btn-md \"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Save Selection\n        </Button>\n      </div>\n    </>\n  );\n};\nexport default CompanyItem;\n","import React, { useState, useEffect } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { Button } from \"react-bootstrap\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\n\nconst GeoFenceItem = ({ geoFences, handleToggleCardPositionHandler }) => {\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [nodes, setNodes] = useState([]);\n\n  useEffect(() => {\n    const data = Object.entries(geoFences).map(([company, fences]) => {\n      const childNodes = fences.map((fence) => ({\n        label: fence.name,\n        value: fence.id,\n      }));\n      return { value: company, label: company, children: childNodes };\n    });\n    setNodes(data);\n  }, [geoFences]);\n\n  const handleCheck = (checked) => {\n    setChecked(checked);\n  };\n\n  const handleExpand = (expanded) => {\n    setExpanded(expanded);\n  };\n\n  const handleSubmit = () => {\n    const selectedObject = checked.map((data) => JSON.parse(data));\n    handleToggleCardPositionHandler();\n  };\n\n  return (\n    <>\n      <div className=\"checkboxTree\">\n        <CheckboxTree\n          nodes={nodes}\n          checked={checked}\n          expanded={expanded}\n          onCheck={handleCheck}\n          onExpand={handleExpand}\n          showNodeIcon={false}\n          icons={{\n            expandOpen: <i className=\"fa-solid fa-minus\"></i>,\n            expandClose: <i className=\"fa-solid fa-plus\"></i>,\n            uncheck: (\n              <i\n                className=\"fa-regular fa-square\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            check: (\n              <i\n                className=\"fa-solid fa-square-check\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            halfCheck: (\n              <i\n                className=\"fa-regular fa-square-minus\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n          }}\n        />\n      </div>\n      <div className=\"text-center  pt-2 \">\n        <Button\n          className=\" mb-5\"\n          variant=\"primary btn-md \"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Save Selection\n        </Button>\n      </div>\n    </>\n  );\n};\nexport default GeoFenceItem;\n","import React, { useEffect, useState } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { Button } from \"react-bootstrap\";\n\nconst DriverItem = (props) => {\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [nodes, setNodes] = useState([]);\n  useEffect(() => {\n    const data = Object.entries(props.drivers).map((data) => {\n      const childNode = data[1].map((data) => {\n        return { label: data.firstName, value: data.id };\n      });\n\n      return { value: data[0], label: data[0], children: childNode };\n    });\n    setNodes([...data]);\n  }, [props.drivers]);\n  const handleCheck = (checked) => {\n    setChecked(checked);\n  };\n  const handleExpand = (expanded) => {\n    setExpanded(expanded);\n  };\n  const handleSubmit = () => {\n    const selectedObject = checked.map((data) => JSON.parse(data));\n    console.log(selectedObject, \"selctedObject\");\n    props.handleToggleCardPositionHandler();\n  };\n  return (\n    <>\n      <div className=\"checkboxTree\">\n        <CheckboxTree\n          nodes={nodes}\n          checked={checked}\n          expanded={expanded}\n          onCheck={handleCheck}\n          onExpand={handleExpand}\n          showNodeIcon={false}\n          icons={{\n            expandOpen: <i class=\"fa-solid fa-minus\"></i>,\n            expandClose: <i class=\"fa-solid fa-plus\"></i>,\n            uncheck: (\n              <i\n                class=\"fa-regular fa-square\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            check: (\n              <i\n                class=\"fa-solid fa-square-check\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            halfCheck: (\n              <i\n                class=\"fa-regular fa-square-minus\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n          }}\n        />\n      </div>\n      <div className=\"text-center  pt-2 \">\n        <Button\n          className=\" mb-5\"\n          variant=\"primary btn-md \"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Save Selection\n        </Button>\n      </div>\n    </>\n  );\n};\nexport default DriverItem;\n","import React, { useEffect, useState } from \"react\";\nimport { Nav, Tab } from \"react-bootstrap\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { IoIosArrowForward, IoIosArrowBack } from \"react-icons/io\";\n\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\nimport CompanyItem from \"../Tracking/CompanyItem\";\nimport { getVehicles, statusData } from \"../../../utils/helper\";\n\nimport GeoFenceItem from \"../Tracking/DriverTabComponent3\";\nimport DriverItem from \"../Tracking/DriverItem\";\nimport { notifyError } from \"../../../utils/toast\";\nimport { getVehiclesByCompany } from \"../../../services/api/VehicleService\";\n\nconst DriverTab = ({\n  tabData,\n  handleToggleCardPosition,\n  isOutside,\n  setVehicleIds,\n  setVehicleStatus,\n  vehicleCounts,\n}) => {\n  const componentData = {\n    name: \"Company1\",\n    drivers: [\n      { name: \"driver1\", timeStamp: \"22-02-2024 3:00 PM\", status: \"running\" },\n      { name: \"driver2\", timeStamp: \"22-02-2024 3:00 PM\", status: \"idle\" },\n      { name: \"driver3\", timeStamp: \"22-02-2024 3:00 PM\", status: \"inactive\" },\n      { name: \"driver4\", timeStamp: \"22-02-2024 3:00 PM\", status: \"running\" },\n      { name: \"driver5\", timeStamp: \"22-02-2024 3:00 PM\", status: \"stopped\" },\n      { name: \"driver6\", timeStamp: \"22-02-2024 3:00 PM\", status: \"stopped\" },\n      { name: \"driver7\", timeStamp: \"22-02-2024 3:00 PM\" },\n    ],\n    allocatedDriver: 4,\n    notAllocatedDriver: 3,\n    totalDriver: 7,\n  };\n\n  const components = [\n    DriverTabComponent1,\n    DriverTabComponent2,\n    DriverTabComponent3,\n  ];\n\n  return (\n    <>\n      <div\n        className={`default-tab outer-container ${\n          isOutside ? \"toggleBarInside\" : \"toggleBarOutside\"\n        }`}\n      >\n        <button\n          onClick={handleToggleCardPosition}\n          className=\"driver_tracking_button\"\n        >\n          {!isOutside ? <IoIosArrowForward /> : <IoIosArrowBack />}\n        </button>\n        <Tab.Container defaultActiveKey={tabData[0].name.toLowerCase()}>\n          <Nav as=\"ul\" className=\"nav-tabs tracking_navTabs\">\n            {tabData.map((data, i) => {\n              const Icon = data.icon;\n              return (\n                <Nav.Item as=\"li\" key={i}>\n                  <Nav.Link eventKey={data.name.toLowerCase()}>\n                    <Icon className=\"tab-icon\" />\n                    {data.name}\n                  </Nav.Link>\n                </Nav.Item>\n              );\n            })}\n          </Nav>\n          <Tab.Content\n            className=\"p-2 py-4\"\n            style={{\n              background: \"#f5f5f5\",\n              overflow: \"scroll\",\n              height: \"100vh\",\n            }}\n          >\n            {tabData.map((data, i) => {\n              const Component = components[i];\n              return (\n                <Tab.Pane eventKey={data.name.toLowerCase()} key={i}>\n                  <Component\n                    data={componentData}\n                    handleToggleCardPosition={handleToggleCardPosition}\n                    setVehicleIds={setVehicleIds}\n                    setVehicleStatus={setVehicleStatus}\n                    vehicleCounts={vehicleCounts}\n                  />\n                </Tab.Pane>\n              );\n            })}\n          </Tab.Content>\n        </Tab.Container>\n      </div>\n    </>\n  );\n};\n\nconst DriverTabComponent1 = (props) => {\n  const { setVehicleStatus, vehicleCounts } = props;\n\n  const { running, idle, stopped, inactive, nodata, total } = vehicleCounts;\n  const [selectValue, setSelectValue] = useState(\"All\");\n  const [vehicles, setVehicles] = useState([]);\n\n  const [companyVehicle, setCompanyVehicle] = useState([]);\n\n  const getVehiclesList = async (search) => {\n    try {\n      const data = await getVehiclesByCompany(search);\n      await setCompanyVehicle(data?.data ?? []);\n      return;\n    } catch (e) {\n      notifyError(\"Some Error occured\");\n    }\n  };\n\n  useEffect(() => {\n    getVehiclesList();\n    // const data = getVehicles(selectValue);\n    // setVehicles(data);\n  }, [selectValue]);\n\n  const items = JSON.parse(localStorage?.getItem(\"userJsonData\"))\n    ? JSON.parse(localStorage?.getItem(\"userJsonData\"))\n        .filter((item) => item.designation === \"vehicle\")\n        .map((data) => ({\n          id: data.id,\n          name: data.vehicleName,\n        }))\n    : [];\n\n  const handleSearch = (item) => {\n    const vehicleData = getVehicles(selectValue);\n\n    const filteredData = Object.entries(vehicleData).filter((vehicle) => {\n      const vec = vehicle[1].filter((data) => data.id == item.id);\n      return vec.length > 0;\n    });\n\n    const convertedData = filteredData.reduce((acc, [company, dataArray]) => {\n      dataArray.map((data) => {\n        if (data.vehicleName === item.name) {\n          acc[company] = [data];\n        }\n      });\n      return acc;\n    }, {});\n    setVehicles(convertedData);\n  };\n\n  return (\n    <>\n      <div className=\"vehicle_tracking-object\">\n        <span\n          className={`light fs-9 running ${\n            selectValue === \"Running\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"Running\");\n            setVehicleStatus(\"RUNNING\");\n          }}\n        >\n          <p>{running}</p>\n          <span>Running</span>\n        </span>\n        <span\n          pill\n          className={`light fs-9 idle ${\n            selectValue === \"Idle\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"Idle\");\n            setVehicleStatus(\"IDLE\");\n          }}\n        >\n          <p>{idle}</p>\n          <span>Idle</span>\n        </span>\n        <span\n          pill\n          className={`light stopped fs-9 ${\n            selectValue === \"Stopped\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"Stopped\");\n            setVehicleStatus(\"STOP\");\n          }}\n        >\n          <p>{stopped}</p>\n          <span>Stopped</span>\n        </span>\n        <span\n          pill\n          className={`light fs-9 inActive ${\n            selectValue === \"Inactive\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"Inactive\");\n            setVehicleStatus(\"INACTIVE\");\n          }}\n        >\n          <p>{inactive}</p>\n          <span>InActive</span>\n        </span>\n        <span\n          pill\n          className={`light fs-9 noData ${\n            selectValue === \"NoData\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"NoData\");\n            setVehicleStatus(\"NODATA\");\n          }}\n        >\n          <p>{nodata}</p>\n          <span>NoData</span>\n        </span>\n        <span\n          className={`light fs-9 total ${\n            selectValue === \"All\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"All\");\n            setVehicleStatus(\"\");\n          }}\n        >\n          <p>{total}</p>\n          <span>Total</span>\n        </span>\n      </div>\n      <div className=\"d-flex mt-4 mb-4\">\n        <ReactSearchAutocomplete\n          items={items}\n          className=\"w-100\"\n          styling={{\n            height: \"30px\",\n            marginRight: \"10px\",\n            fontSize: \"12px\",\n            color: \"#4A4646\",\n          }}\n          onSearch={(string) => {\n            if (string === \"\") {\n              const data = getVehicles(selectValue);\n              setVehicles(data);\n            }\n          }}\n          onSelect={handleSearch}\n        />\n      </div>\n      {\n        <CompanyItem\n          companyVehicle={companyVehicle ?? []}\n          setVehicleIds={props.setVehicleIds}\n          vehicles={vehicles}\n          handleToggleCardPositionHandler={props.handleToggleCardPosition}\n        />\n      }\n    </>\n  );\n};\n\nconst DriverTabComponent2 = (props) => {\n  const [selectValue, setSelectValue] = useState(\"All\");\n  const [selectAll, setSelectAll] = useState([]);\n  const [selectedDrivers, setSelectedDrivers] = useState([]);\n  const [selectDriver, setSelectDriver] = useState([]);\n  const [filterApplied, setFilterApplied] = useState(false);\n  const [isDisable, setIsDisable] = useState(false);\n  const jsonData = JSON.parse(localStorage.getItem(\"userJsonData\"))\n    ? JSON.parse(localStorage.getItem(\"userJsonData\"))\n    : [];\n  const [companyDrivers, setCompanyDrivers] = useState([]);\n  const [company, setCompany] = useState(\n    jsonData.filter((item) => item.role === \"company\")\n  );\n  const [drivers, setDrivers] = useState(\n    jsonData.filter((item) => item.designation === \"Driver\")\n  );\n  const allocated = drivers.filter(\n    (item) => item.activityStatus === \"Allocated\"\n  );\n  const notAllocated = drivers.filter(\n    (item) => item.activityStatus === \"Not Allocated\"\n  );\n\n  useEffect(() => {\n    const newCompanyDrivers = company.reduce((acc, company) => {\n      const companyDrivers = jsonData.filter(\n        (item) =>\n          item.designation === \"Driver\" &&\n          item.parentCompany === company.userName\n      );\n\n      if (companyDrivers.length > 0) {\n        acc[company.userName] = companyDrivers;\n      }\n      return acc;\n    }, {});\n    setCompanyDrivers(newCompanyDrivers);\n  }, [company]);\n\n  useEffect(() => {\n    const companyDrivers = company.reduce((acc, company) => {\n      const drivers = jsonData.filter(\n        (item) =>\n          item.designation === \"Driver\" &&\n          item.parentCompany === company.userName &&\n          (selectValue != \"All\" ? item.activityStatus === selectValue : true)\n      );\n\n      if (drivers.length > 0) {\n        acc[company.userName] = drivers;\n      }\n      return acc;\n    }, {});\n    setCompanyDrivers(companyDrivers);\n  }, [selectValue]);\n\n  const total = drivers.length;\n\n  const handleOnSelect = (item) => {\n    const selectedCompanyId = item.id;\n\n    const companyDriversData = company.reduce((acc, company) => {\n      const driversForCompany = jsonData.filter(\n        (driver) =>\n          driver.designation === \"Driver\" &&\n          driver.parentCompany === company.userName &&\n          driver.id === selectedCompanyId\n      );\n\n      if (driversForCompany.length > 0) {\n        acc[company.userName] = driversForCompany;\n      }\n      return acc;\n    }, {});\n\n    setCompanyDrivers(companyDriversData);\n  };\n\n  const handleOnSearch = (string, results) => {\n    if (string === \"\") {\n      const newCompanyDrivers = company.reduce((acc, company) => {\n        const companyDrivers = jsonData.filter(\n          (item) =>\n            item.designation === \"Driver\" &&\n            item.parentCompany === company.userName\n        );\n\n        if (companyDrivers.length > 0) {\n          acc[company.userName] = companyDrivers;\n        }\n        return acc;\n      }, {});\n      setCompanyDrivers(newCompanyDrivers);\n    }\n  };\n  const handleSelectAll = (id, company, drivers, index) => {\n    var checkboxArray = [...selectedDrivers];\n    if (!selectAll[index]) {\n      drivers.map((item) => checkboxArray[index].push(item.id));\n    } else {\n      checkboxArray[index] = [];\n      setSelectedDrivers(checkboxArray);\n    }\n  };\n  const handleSelect = (ind) => {\n    setSelectAll((prev) => {\n      const newArr = [...prev];\n      newArr[ind] = !newArr[ind];\n      return newArr;\n    });\n  };\n  const handleDriverSelect = (id, ind) => {\n    const updatedDrivers = [...selectedDrivers];\n    if (updatedDrivers[ind].includes(id)) {\n      const index = updatedDrivers[ind].indexOf(id);\n      updatedDrivers[ind].splice(index, 1);\n      if (updatedDrivers[ind].length === 2) {\n        handleSelect(ind);\n      }\n    } else {\n      updatedDrivers[ind].push(id);\n      if (updatedDrivers[ind].length === 3) {\n        handleSelect(ind);\n      }\n    }\n\n    setSelectedDrivers(updatedDrivers);\n  };\n\n  const items = jsonData\n    .filter((item) => item.designation === \"Driver\")\n    .map((item) => {\n      return { id: item.id, name: item.firstName + \" \" + item.lastName };\n    });\n  return (\n    <>\n      <div className=\"px-2 vehicle_tracking-object\">\n        <span\n          bg=\"\"\n          pill\n          className={`light fs-9  running ${\n            selectValue === \"Allocated\"\n              ? \"vehicle_tracking-active\"\n              : isDisable && \"pe-none\"\n          }`}\n          onClick={() => setSelectValue(\"Allocated\")}\n        >\n          <p>{allocated.length}</p>\n          <span>Allocated</span>\n        </span>\n        <span\n          bg=\"\"\n          pill\n          className={`light fs-9 idle ${\n            selectValue === \"Not Allocated\"\n              ? \"vehicle_tracking-active\"\n              : isDisable && \"pe-none\"\n          }`}\n          onClick={() => setSelectValue(\"Not Allocated\")}\n        >\n          <p>{notAllocated.length}</p>\n          <span>Not Allocated</span>\n        </span>\n        <span\n          bg=\"\"\n          pill\n          className={`light fs-9 total ${\n            selectValue === \"Total\"\n              ? \"vehicle_tracking-active\"\n              : isDisable && \"pe-none\"\n          }`}\n          onClick={() => setSelectValue(\"All\")}\n        >\n          <p>{total}</p>\n          <span>Total</span>\n        </span>\n      </div>\n      <div className=\"d-flex mt-4 mb-4\">\n        <ReactSearchAutocomplete\n          items={items}\n          className=\"w-100\"\n          styling={{\n            height: \"30px\",\n            marginRight: \"10px\",\n            fontSize: \"12px\",\n            color: \"#red\",\n          }}\n          onSearch={handleOnSearch}\n          onSelect={handleOnSelect}\n        />\n      </div>\n      {\n        <DriverItem\n          key={companyDrivers}\n          drivers={companyDrivers}\n          handleToggleCardPositionHandler={props.handleToggleCardPosition}\n        />\n      }\n    </>\n  );\n};\n\nconst DriverTabComponent3 = (props) => {\n  const geoData = JSON.parse(localStorage.getItem(\"geofenceData\"))\n    ? JSON.parse(localStorage.getItem(\"geofenceData\"))\n    : [];\n  const [tableData, setTableData] = useState(geoData);\n  const [selectedCompanies, setSelectedCompanies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Function to handle search\n  const handleSearch = (query) => {\n    const fenceData = geoData.filter((item) => item.id === query.id);\n    setTableData(fenceData);\n  };\n\n  // Function to reset search\n  const resetSearch = () => {\n    setSearchQuery(\"\");\n  };\n\n  // Filter tableData based on searchQuery\n  const filteredTableData = tableData.filter((item) =>\n    item.company.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  const onConfirmDelete = (id) => {\n    const updatedData = tableData.filter((item) => item.id !== id);\n    setTableData(updatedData);\n\n    // const updatedLocalStorageData = geoData.filter((item) => item.id !== id);\n    // localStorage.setItem(\n    //   \"geofenceData\",\n    //   JSON.stringify(updatedLocalStorageData)\n    // );\n  };\n\n  const editDrawerOpen = (d) => {\n    // navigate(`/geofence/map/edit/${d.id}`);\n  };\n\n  const toggleAllData = (company) => {\n    let newSelectedCompanies;\n    if (selectedCompanies.includes(company)) {\n      newSelectedCompanies = selectedCompanies.filter((c) => c !== company);\n    } else {\n      newSelectedCompanies = [...selectedCompanies, company];\n    }\n    setSelectedCompanies(newSelectedCompanies);\n\n    const updatedData = tableData.map((item) => {\n      if (item.company === company) {\n        return { ...item, selected: !selectedCompanies.includes(company) };\n      }\n      return item;\n    });\n    setTableData(updatedData);\n  };\n\n  const toggleSingleData = (id) => {\n    const updatedData = tableData.map((item) => {\n      if (item.id === id) {\n        return { ...item, selected: !item.selected };\n      }\n      return item;\n    });\n    setTableData(updatedData);\n  };\n\n  // Group tableData by company name\n  const groupedData = tableData.reduce((acc, cur) => {\n    if (!acc[cur.company]) {\n      acc[cur.company] = [];\n    }\n    acc[cur.company].push(cur);\n    return acc;\n  }, {});\n\n  const items = tableData.map((data) => ({\n    id: data.id,\n    name: data.name,\n  }));\n\n  return (\n    <>\n      <div className=\"d-flex mt-4 mb-4\">\n        <ReactSearchAutocomplete\n          items={items}\n          // onSearch={handleSearch}\n          className=\"w-100\"\n          styling={{\n            height: \"30px\",\n            marginRight: \"10px\",\n            fontSize: \"12px\",\n            color: \"#red\",\n          }}\n          onSelect={handleSearch}\n        />\n      </div>\n      <div\n        className=\"d-flex flex-column p-2\"\n        style={{\n          marginTop: \".5rem\",\n          overflowY: \"scroll\",\n        }}\n      >\n        <GeoFenceItem\n          geoFences={groupedData}\n          handleToggleCardPositionHandler={props.handleToggleCardPosition}\n        />\n      </div>\n    </>\n  );\n};\nexport default DriverTab;\n","import React, { useState } from \"react\";\nimport { FaUser } from \"react-icons/fa\";\nimport { MdFence } from \"react-icons/md\";\nimport { TbLocationFilled } from \"react-icons/tb\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport MainPagetitle from \"@/components/MainPagetitle\";\nimport ShowMap from \"../../../jsx/components/maps/ShowMap\";\nimport DriverTab from \"../../../jsx/components/maps/DriverTab\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { notifyError } from \"@/utils/toast\";\nimport { getVehiclesTraking } from \"../api\";\n\nconst DriverTracking = () => {\n  const { t } = useTranslation();\n  const data = [\n    { lat: 30.7099475, lng: 76.6900474 },\n    { lat: 30.7333, lng: 76.7794 },\n  ];\n  const [isOutside, setIsOutside] = useState(true);\n\n  const tabData = [\n    { name: \"Object\", icon: TbLocationFilled },\n    { name: \"Driver\", icon: FaUser },\n    { name: \"Geofence\", icon: MdFence },\n  ];\n\n  const handleToggleCardPosition = () => {\n    setIsOutside(!isOutside);\n  };\n\n  const [vehicleIds, setVehicleIds] = useState([]);\n  const [vehicleStatus, setVehicleStatus] = useState(\"\");\n  const { data: trackingData } = useQuery({\n    queryKey: [\"tracking\", vehicleIds.join(\",\"), vehicleStatus],\n    queryFn: () => getVehiclesTraking(vehicleIds.join(\",\"), vehicleStatus),\n    staleTime: 120000,\n    refetchInterval: 120000,\n    refetchOnWindowFocus: \"always\",\n  });\n\n  return (\n    <>\n      <MainPagetitle\n        mainTitle={t(\"vehicleTracking\")}\n        pageTitle={t(\"vehicleTracking\")}\n        parentTitle={t(\"tracking\")}\n      />\n      <div\n        className={`backdrop ${isOutside ? \"d-none\" : \"d-block\"}`}\n        onClick={() => setIsOutside(true)}\n      />\n      <div className=\"p-2\">\n        <ShowMap\n          data={data}\n          trackingData={trackingData?.data}\n          centerCoordinate={trackingData?.centerCoordinate}\n        />\n      </div>\n\n      <DriverTab\n        tabData={tabData}\n        setVehicleIds={setVehicleIds}\n        vehicleIds={vehicleIds}\n        setVehicleStatus={setVehicleStatus}\n        vehicleCounts={trackingData?.count ?? {}}\n        handleToggleCardPosition={handleToggleCardPosition}\n        isOutside={isOutside}\n      />\n      {/* </div> */}\n    </>\n  );\n};\nexport default DriverTracking;\n"],"names":["createVehicles","async","axios","post","body","getAllVehicles","page","branchIds","url","Array","isArray","forEach","id","data","get","totalCount","deleteVehicle","delete","updateVehicles","patch","getVehiclesTraking","status","count","centerCoordinate","getVehicleById","_data$data","props","checked","setChecked","useState","expanded","setExpanded","nodes","setNodes","useEffect","companyVehicle","map","_data$vehicles","childNode","vehicles","subItem","label","vehicleName","value","_id","companyName","children","vehicleIds","ele","_ele$children","vehicle","push","handleCheck","setVehicleIds","_jsxs","_Fragment","_jsx","className","CheckboxTree","onCheck","onExpand","showNodeIcon","icons","expandOpen","class","expandClose","uncheck","style","fontSize","check","halfCheck","Button","variant","type","onClick","handleSubmit","handleToggleCardPositionHandler","_ref","geoFences","Object","entries","_ref2","company","fences","fence","name","JSON","parse","drivers","firstName","selectedObject","console","log","DriverTabComponent1","_localStorage","_localStorage2","setVehicleStatus","vehicleCounts","running","idle","stopped","inactive","nodata","total","selectValue","setSelectValue","setVehicles","setCompanyVehicle","getVehiclesByCompany","search","e","notifyError","getVehiclesList","items","localStorage","getItem","filter","item","designation","pill","ReactSearchAutocomplete","styling","height","marginRight","color","onSearch","string","getVehicles","onSelect","vehicleData","convertedData","length","reduce","acc","dataArray","CompanyItem","handleToggleCardPosition","DriverTabComponent2","selectAll","setSelectAll","selectedDrivers","setSelectedDrivers","selectDriver","setSelectDriver","filterApplied","setFilterApplied","isDisable","setIsDisable","jsonData","companyDrivers","setCompanyDrivers","setCompany","role","setDrivers","allocated","activityStatus","notAllocated","newCompanyDrivers","parentCompany","userName","lastName","bg","handleOnSearch","results","selectedCompanyId","companyDriversData","driversForCompany","driver","DriverItem","DriverTabComponent3","geoData","tableData","setTableData","selectedCompanies","setSelectedCompanies","searchQuery","setSearchQuery","groupedData","toLowerCase","includes","cur","query","fenceData","marginTop","overflowY","GeoFenceItem","tabData","isOutside","componentData","timeStamp","allocatedDriver","notAllocatedDriver","totalDriver","components","IoIosArrowBack","IoIosArrowForward","Tab","Container","defaultActiveKey","Nav","as","i","Icon","icon","Item","Link","eventKey","Content","background","overflow","Component","Pane","DriverTracking","_trackingData$count","t","useTranslation","setIsOutside","TbLocationFilled","FaUser","MdFence","vehicleStatus","trackingData","useQuery","queryKey","join","queryFn","staleTime","refetchInterval","refetchOnWindowFocus","MainPagetitle","mainTitle","pageTitle","parentTitle","ShowMap","lat","lng","DriverTab"],"sourceRoot":""}