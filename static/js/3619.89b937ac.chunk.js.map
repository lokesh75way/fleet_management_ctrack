{"version":3,"file":"static/js/3619.89b937ac.chunk.js","mappings":"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","sources":["jsx/pages/Map.jsx","jsx/pages/GeofenceMap.jsx"],"sourcesContent":["import React from 'react';\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\n\n\nconst Map = () => {\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyA_nkYS3LnLGLrj4Qmky4NntAE97ivSxP8\"\n  });\n\n  const containerStyle = {\n    width: '100%',\n    height: '100%'\n  };\n\n  const center = {\n    lat: 30.7099127700684,\n    lng: 76.69003904617821,\n  };\n\n  const [map, setMap] = React.useState(null);\n\n  const onLoad = React.useCallback(function callback(map) {\n    // This is just an example of getting and using the map instance!!! don't just blindly copy!\n    const bounds = new window.google.maps.LatLngBounds(center);\n    map.fitBounds(bounds);\n\n    setMap(map);\n  }, [center]);\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  return isLoaded ? (\n    <GoogleMap\n      mapContainerStyle={containerStyle}\n      center={center}\n      zoom={10}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n    >\n    <Marker position={center}/>\n      <></>\n    </GoogleMap>\n  ) : <></>;\n};\n\nexport default Map;\n","import React, { useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\nimport { ChromePicker } from \"react-color\";\nimport Select from \"react-select\";\nimport Map from \"./Map\";\nimport { BiNoEntry } from \"react-icons/bi\";\nimport CustomInput from \"../components/Input/CustomInput\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { geofenceMapSchema } from \"../../yup\";\nimport {\n  categoryOptions,\n  toleranceOptions,\n} from \"../components/TabComponent/VehicleTabs/Options\";\nimport { Button } from \"react-bootstrap\";\nimport Error from \"../components/Error/Error\";\n\nconst GeofenceDetail = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [tempValue, setTempValue] = useState();\n  const mapContainerStyle = {\n    height: \"100%\",\n    width: \"100%\",\n  };\n  const customStyles = {\n    control: (base) => ({\n      ...base,\n      padding: \".25rem 0 \", // Adjust the height as needed\n    }),\n  };\n\n  const defaultCenter = {\n    lat: -3.745,\n    lng: -38.523,\n  };\n\n  const [map, setMap] = useState(null);\n\n  const onLoad = React.useCallback(\n    function callback(map) {\n      const bounds = new window.google.maps.LatLngBounds(defaultCenter);\n      map.fitBounds(bounds);\n      setMap(map);\n    },\n    [defaultCenter]\n  );\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  // const handleColorChange = (color) => {\n  //   setFormData((prevData) => ({ ...prevData, color: color.hex }));\n  // };\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    getValues,\n    control,\n    handleSubmit,\n  } = useForm({\n    resolver: yupResolver(geofenceMapSchema),\n  });\n  const handleChange = (e) => {\n    setSelectedOption(e.target.value);\n    setValue(\"geofenceAccess\", e.target.value);\n  };\n\n  const onSubmit = (data) => {\n    console.log(data);\n  };\n\n  return (\n    <div >\n      <div style={{ padding: \"10px\", backgroundColor: \"#FFFDFD\" }}>\n        <h2 style={{ fontSize: \"20px\" }}>Geofence Detail</h2>\n      </div>\n\n      <div className=\"\" style={{ display: \"flex\", height: \"88vh\" }}>\n        <div\n          className=\"col-md-3\"\n          style={{\n            padding: \"15px\",\n            boxShadow: \"9px 0 4px rgba(0, 0, 0, 0.1)\",\n            backgroundColor: \"#fff\",\n            overflow:\"auto\"\n          }}\n        >\n          <FormProvider>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  Company:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  name=\"company\"\n                  register={register}\n                  label=\"Company\"\n                />\n                <Error errorName={errors.company} />\n              </div>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  Name:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  label=\"Name\"\n                  register={register}\n                  name=\"name\"\n                />\n                <Error errorName={errors.name} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Category:<span className=\"text-danger\">*</span></label>\n                <Controller\n                  name=\"category\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"category\", newValue.value);\n                      }}\n                      options={categoryOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      defaultValue={categoryOptions[0]}\n                    />\n                  )}\n                />\n                {!getValues('category') && <Error errorName={errors.category} />}\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Geofence Access:<span className=\"text-danger\">*</span></label>\n                <div\n                  style={{ display: \"flex\", flexDirection: \"row\", gap: \"5rem\" }}\n                >\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"public\"\n                      checked={selectedOption === \"public\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">Public</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"private\"\n                      checked={selectedOption === \"private\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">Private</label>\n                  </div>\n                </div>\n                { !getValues('geofenceAccess') && <Error errorName={errors.geofenceAccess} />}\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"contactNumber\" className=\"form-label\">\n                  Contact Number:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"number\"\n                  register={register}\n                  label=\"Contact Number\"\n                  name=\"contactNumber\"\n                />\n                <Error errorName={errors.contactNumber} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"address\" className=\"form-label\">\n                  Address:\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  {...register}\n                  label=\"Address\"\n                  name=\"address\"\n                />\n              </div>\n\n              {/* <div className=\"mb-3\">\n            <label htmlFor=\"color\" className=\"form-label\">\n              Color:\n            </label>\n            <ChromePicker\n              color={formData.color}\n              onChangeComplete={(color) => handleColorChange(color)}\n            />\n          </div> */}\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Tolerance:<span className=\"text-danger\">*</span></label>\n                <Controller\n                  name=\"tolerance\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"tolerance\", newValue.value);\n                      }}\n                      options={toleranceOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      defaultValue={toleranceOptions[0]}\n                    />\n                  )}\n                />\n                {!getValues('contactNunber') &&<Error errorName={errors.contactNumber} />}\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Description:</label>\n                <textarea\n                  className=\"form-control\"\n                  name=\"description\"\n                  {...register}\n                  label=\"Description\"\n                />\n              </div>\n                <div\n                  style={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: \"2rem 0\",\n                  }}\n                >\n                  <Button\n                    type=\"submit\"\n                    onClick={handleSubmit(onSubmit)}\n                  >\n                    {\" \"}\n                    Next\n                  </Button>\n                </div>\n            </form>\n          </FormProvider>\n        </div>\n\n        {/* Right side */}\n        <div className=\"col-md-9\" style={{ paddingLeft: \"15px\" }}>\n          <Map />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeofenceDetail;\n"],"names":["Map","isLoaded","useJsApiLoader","id","googleMapsApiKey","center","lat","lng","map","setMap","React","onLoad","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","_jsxs","GoogleMap","mapContainerStyle","width","height","zoom","children","_jsx","Marker","position","_Fragment","GeofenceDetail","selectedOption","setSelectedOption","useState","tempValue","setTempValue","customStyles","control","base","padding","defaultCenter","register","formState","errors","setValue","getValues","handleSubmit","useForm","resolver","yupResolver","geofenceMapSchema","handleChange","e","target","value","onSubmit","data","console","log","style","backgroundColor","fontSize","className","display","boxShadow","overflow","FormProvider","htmlFor","CustomInput","type","name","label","Error","errorName","company","Controller","rules","required","render","_ref","field","onChange","ref","Select","newValue","options","categoryOptions","styles","defaultValue","category","flexDirection","gap","checked","geofenceAccess","contactNumber","_ref2","toleranceOptions","justifyContent","margin","Button","onClick","paddingLeft"],"sourceRoot":""}