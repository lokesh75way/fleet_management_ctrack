{"version":3,"file":"static/js/1741.d2bbbc6f.chunk.js","mappings":"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","sources":["components/Input/CredentialsInput.jsx","features/businessGroup/components/Form.jsx","features/businessGroup/pages/Create.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport { LuEye, LuEyeOff } from \"react-icons/lu\";\nimport { t } from \"i18next\";\nimport CustomInput from \"./CustomInput\";\nimport Error from \"../Error/Error\";\n\nconst CredentialsInput = ({ heading, register, errors, id, getValues }) => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  return (\n    <div className=\"row\">\n      <h3 className=\"mt-4 mb-4\">{heading}</h3>\n\n      <div className=\"col-xl-3 mb-3\">\n        <label className=\"form-label\">\n          {t(\"username\")} <span className=\"text-danger\">*</span>\n        </label>\n        <CustomInput\n          type=\"text\"\n          register={register}\n          label=\"userName\"\n          name=\"userName\"\n          placeholder=\"\"\n          defaultValue={getValues(\"userName\")}\n          disabled={id ? true : false}\n        />\n        <Error errorName={errors.userName} />\n      </div>\n\n      {!id && (\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">\n            {t(\"password\")} <span className=\"text-danger\">*</span>\n          </label>\n          <div className=\"position-relative\">\n            <CustomInput\n              type={showPassword ? \"text\" : \"password\"}\n              register={register}\n              label=\"Password\"\n              name=\"password\"\n              placeholder=\"\"\n            />\n            <span\n              className=\"showPasswordIcon\"\n              onClick={() => {\n                setShowPassword(!showPassword);\n              }}\n            >\n              {showPassword ? <LuEyeOff /> : <LuEye />}\n            </span>\n          </div>\n          {!id && <Error errorName={errors.password} />}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CredentialsInput;\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Controller, useFieldArray } from \"react-hook-form\";\nimport Select from \"react-select\";\nimport { useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nimport Error from \"@/components/Error/Error\";\nimport CustomInput from \"@/components/Input/CustomInput\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { dateFormatOptions, timeFormatOptions } from \"@/constants/options\";\nimport FileUploader from \"@/components/FileUploader\";\nimport CredentialsInput from \"@/components/Input/CredentialsInput\";\nimport UserDetailsForm from \"@/components/Input/UserDetailsForm\";\nimport LocationSelector from \"@/components/Input/LocationSelector\";\nimport useUserLocation from \"@/hooks/useUserLocation\";\n\nconst BusinessForm = ({\n  setValue,\n  getValues,\n  register,\n  onSubmit,\n  handleSubmit,\n  errors,\n  control,\n  isFormSubmitting,\n}) => {\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"userInfo\",\n  });\n  const [loading, setLoading] = useState(false);\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const { location: locationData, error: locationError } = useUserLocation();\n\n  const handleAddForm = () => {\n    append({\n      name: \"\",\n      designation: \"\",\n      mobileNumber: null,\n      email: \"\",\n    });\n  };\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"row\" style={{ width: \"85%\" }}>\n        <div>{locationError && <p>{locationError}</p>}</div>\n        <div className=\"col-xl-3 mb-3\">\n          <label className=\"form-label\">\n            {t(\"businessGroupName\")} <span className=\"text-danger\">*</span>\n          </label>\n          <CustomInput\n            type=\"text\"\n            register={register}\n            label=\"groupName\"\n            name=\"groupName\"\n            placeholder=\"\"\n            defaultValue={getValues(\"groupName\")}\n          />\n          <Error errorName={errors.groupName} />\n        </div>\n        <div className=\"col-xl-3 mb-3 z-1\">\n          <label className=\"form-label\">{t(\"tradeLicenseNumber\")}</label>\n          <CustomInput\n            type=\"text\"\n            register={register}\n            label=\"tradeLicenseNumber\"\n            name=\"tradeLicenseNumber\"\n            placeholder=\"\"\n            defaultValue={getValues(\"tradeLicenseNumber\")}\n          />\n          <Error errorName={errors.tradeLicenseNumber} />\n        </div>\n        <div className=\"col-xl-3 mb-3 z-1\">\n          <label className=\"form-label\">{t(\"officeNo\")}</label>\n          <CustomInput\n            type=\"text\"\n            register={register}\n            label=\"officeNumber\"\n            name=\"officeNumber\"\n            defaultValue={getValues(\"officeNumber\")}\n          />\n          <Error errorName={errors.officeNumber} />\n        </div>\n        <span\n          className=\"absolute\"\n          style={{\n            position: \"absolute\",\n            top: \"23%\",\n            right: \"-42%\",\n            overflow: \"hidden\",\n          }}\n        >\n          <FileUploader\n            setValue={setValue}\n            register={register}\n            label=\"Business Group Logo\"\n            name=\"logo\"\n            getValue={getValues}\n            setLoading={setLoading}\n            loading={loading}\n            link={getValues(\"logo\")}\n          />\n          <Error errorName={errors.logo} />\n        </span>\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">\n            {t(\"email\")}\n            <span className=\"text-danger\">*</span>\n          </label>\n          <CustomInput\n            type=\"email\"\n            register={register}\n            label=\"Email\"\n            name=\"email\"\n            placeholder=\"\"\n            defaultValue={getValues(\"email\")}\n            disabled={id ? true : false}\n          />\n          <Error errorName={errors.email} />\n        </div>\n        <LocationSelector\n          register={register}\n          setValue={setValue}\n          errors={errors}\n          getValues={getValues}\n          locationData={locationData}\n          id={id}\n          showCity={true}\n          Comptype={\"businessGroupId\"}\n        />\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">{t(\"dateFormat\")}</label>\n          <Controller\n            name=\"dateFormat\"\n            control={control}\n            render={({ field: { onChange, value, name, ref } }) => (\n              <Select\n                onChange={(newValue) => setValue(\"dateFormat\", newValue?.value)}\n                options={dateFormatOptions}\n                ref={ref}\n                name={name}\n                styles={{\n                  control: (base) => ({\n                    ...base,\n                    padding: \".25rem 0 \",\n                  }),\n                }}\n                value={{ value, label: value }}\n              />\n            )}\n          />\n          <Error errorName={errors.dateFormat} />\n        </div>\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">{t(\"timeFormat\")}</label>\n          <Controller\n            name=\"timeFormat\"\n            control={control}\n            render={({ field: { onChange, value, name, ref } }) => (\n              <Select\n                onChange={(newValue) => setValue(\"timeFormat\", newValue.value)}\n                options={timeFormatOptions}\n                ref={ref}\n                name={name}\n                styles={{\n                  control: (base) => ({\n                    ...base,\n                    padding: \".25rem 0 \",\n                  }),\n                }}\n                value={{ value, label: value }}\n                defaultValue={timeFormatOptions[1]}\n              />\n            )}\n          />\n        </div>\n        <CredentialsInput\n          heading={t(\"businessLoginDetails\")}\n          register={register}\n          errors={errors}\n          id={id}\n          getValues={getValues}\n        />\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            margin: \"2rem 0\",\n          }}\n        >\n          <h3>{t(\"contactDetails\")}</h3>\n          <Button\n            type=\"button\"\n            onClick={handleAddForm}\n            style={{ width: \"10%\" }}\n          >\n            {\" \"}\n            ADD\n          </Button>\n        </div>\n        {fields.map((field, index) => (\n          <UserDetailsForm\n            key={field.id}\n            field={field}\n            index={index}\n            register={register}\n            getValues={getValues}\n            errors={errors}\n            fields={fields}\n            remove={remove}\n            id={id}\n          />\n        ))}\n      </div>\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          margin: \"2rem 0\",\n        }}\n      >\n        <Button\n          type=\"submit\"\n          disabled={loading || isFormSubmitting}\n          onClick={handleSubmit(onSubmit)}\n          style={{ width: \"10%\" }}\n        >\n          {\" \"}\n          {t(\"submit\")}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default BusinessForm;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Nav, Tab } from \"react-bootstrap\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\n\nimport \"react-country-state-city/dist/react-country-state-city.css\";\nimport MainPagetitle from \"@/components/MainPagetitle\";\nimport CreateForm from \"../components/Form\";\nimport ChangePassword from \"@/components/Form/ChangePassword\";\nimport { businessGroupAccountSchema, companyPasswordSchema } from \"@/utils/yup\";\nimport { notifyError, notifySuccess } from \"@/utils/toast\";\nimport { changePassword, createGroup, getGroupById, updateGroup } from \"../api\";\nimport { getApiErrorMessage } from \"@/utils/helper\";\nimport { dateFormatOptions, timeFormatOptions } from \"@/constants/options\";\nimport Loader from \"@/components/Loader\";\n\nconst CreateBusiness = () => {\n  const { t } = useTranslation();\n  const [activeIndex, setActiveIndex] = useState(0);\n  const { id } = useParams();\n  let tabHeading = [\n    id ? t(\"editBusinessGroup\") : t(\"newBusinessGroup\"),\n    t(\"changePassword\"),\n  ];\n  let component = [CreateForm, ChangePassword];\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  if (!id) {\n    tabHeading = [t(\"newBusinessGroup\")];\n    component = [CreateForm];\n  }\n\n  const {\n    data: groupData,\n    isLoading,\n    isError,\n  } = useQuery({\n    queryKey: [\"group\", id],\n    queryFn: () => getGroupById(id),\n    enabled: !!id,\n    staleTime: Infinity,\n  });\n\n  useEffect(() => {\n    if (isError && !!id) {\n      notifyError(\"Not able to fetch business group data\");\n      navigate(\"/not-found\");\n    }\n  }, [isError && id]);\n  const parsedGroupData = useMemo(() => {\n    return {\n      ...groupData,\n      ...groupData?.businessGroupId,\n      logo: groupData?.businessGroupId?.logo ?? null,\n    };\n  }, [groupData]);\n\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    getValues,\n    control,\n    handleSubmit,\n  } = useForm({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    defaultValues: {\n      userInfo: [\n        {\n          name: \"\",\n          designation: \"\",\n          mobileNumber: null,\n          email: \"\",\n        },\n      ],\n      timeFormat: timeFormatOptions[1]?.value,\n      dateFormat: dateFormatOptions[1]?.value,\n    },\n    resolver: yupResolver(\n      activeIndex === 0 ? businessGroupAccountSchema(id) : companyPasswordSchema\n    ),\n    values: parsedGroupData,\n  });\n\n  const onError = (err) => notifyError(getApiErrorMessage(err));\n\n  const { mutate: editGroupMutation, isPending: editPending } = useMutation({\n    mutationFn: ({ data, id }) => updateGroup(id, data),\n    onSuccess: () => {\n      notifySuccess(\"Business group has been updated!\");\n      queryClient.invalidateQueries([\"groups\"]);\n      navigate(\"/business\");\n    },\n    onError,\n  });\n\n  const { mutate: createGroupMutation, isPending: createPending } = useMutation(\n    {\n      mutationFn: createGroup,\n      onSuccess: () => {\n        notifySuccess(\"Business group created\");\n        queryClient.invalidateQueries([\"groups\"]);\n        navigate(\"/business\");\n      },\n      onError,\n    }\n  );\n\n  const { mutate: passwordMutation, isPending: passwordPending } = useMutation({\n    mutationFn: changePassword,\n    onSuccess: () => {\n      notifySuccess(\"Password has been changed\");\n      navigate(\"/business\");\n    },\n    onError,\n  });\n\n  const onSubmit = async (data) => {\n    if (activeIndex === 0) {\n      if (data.logo == null || data.logo.length === 0) {\n        delete data.logo;\n      }\n      if (data.file && data.file.length === 0) {\n        delete data.file;\n      }\n      if (id) {\n        editGroupMutation({ data, id });\n      } else {\n        createGroupMutation(data);\n      }\n    } else if (activeIndex === 1) {\n      const passwordData = {\n        password: data.newPassword,\n        oldPassword: data.oldPassword,\n        confirmPassword: data.confirmPassword,\n        _id: id,\n      };\n      passwordMutation(passwordData);\n    }\n  };\n\n  return (\n    <>\n      <MainPagetitle\n        mainTitle={t(\"businessGroup\")}\n        pageTitle={id ? t(\"edit\") : t(\"create\")}\n        parentTitle={t(\"businessGroup\")}\n      />\n      <div className=\"m-2 p-2\">\n        <FormProvider>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"default-tab\">\n              <Tab.Container defaultActiveKey={tabHeading[0].toLowerCase()}>\n                <Nav as=\"ul\" className=\"nav-tabs\">\n                  {tabHeading.map((data, i) => (\n                    <Nav.Item as=\"li\" key={i}>\n                      <Nav.Link\n                        style={{ padding: \".5rem 2rem\" }}\n                        eventKey={data.toLowerCase()}\n                        active={i === activeIndex}\n                        onClick={() => setActiveIndex(i)}\n                      >\n                        {data}\n                      </Nav.Link>\n                    </Nav.Item>\n                  ))}\n                </Nav>\n                <Tab.Content className=\"pt-4\">\n                  {isLoading ? (\n                    <Loader height={500} />\n                  ) : (\n                    tabHeading.map((data, i) => {\n                      const Component = component[i];\n                      return (\n                        <Tab.Pane\n                          eventKey={data.toLowerCase()}\n                          key={i}\n                          active={i === activeIndex}\n                        >\n                          <Component\n                            data={tabHeading}\n                            control={control}\n                            setValue={setValue}\n                            register={register}\n                            getValues={getValues}\n                            errors={errors}\n                            handleSubmit={handleSubmit}\n                            onSubmit={onSubmit}\n                            isFormSubmitting={\n                              createPending || editPending || passwordPending\n                            }\n                          />\n                        </Tab.Pane>\n                      );\n                    })\n                  )}\n                </Tab.Content>\n              </Tab.Container>\n            </div>\n          </form>\n        </FormProvider>\n      </div>\n    </>\n  );\n};\nexport default CreateBusiness;\n"],"names":["_ref","heading","register","errors","id","getValues","showPassword","setShowPassword","useState","_jsxs","className","children","_jsx","t","CustomInput","type","label","name","placeholder","defaultValue","disabled","Error","errorName","userName","onClick","LuEyeOff","LuEye","password","setValue","onSubmit","handleSubmit","control","isFormSubmitting","fields","append","remove","useFieldArray","loading","setLoading","useTranslation","useParams","location","locationData","error","locationError","useUserLocation","style","width","groupName","tradeLicenseNumber","officeNumber","position","top","right","overflow","FileUploader","getValue","link","logo","email","LocationSelector","showCity","Comptype","Controller","render","_ref2","field","onChange","value","ref","Select","newValue","options","dateFormatOptions","styles","base","padding","dateFormat","_ref3","timeFormatOptions","CredentialsInput","display","justifyContent","margin","Button","handleAddForm","designation","mobileNumber","map","index","UserDetailsForm","CreateBusiness","_timeFormatOptions$","_dateFormatOptions$","activeIndex","setActiveIndex","tabHeading","component","CreateForm","ChangePassword","navigate","useNavigate","queryClient","useQueryClient","data","groupData","isLoading","isError","useQuery","queryKey","queryFn","getGroupById","enabled","staleTime","Infinity","useEffect","notifyError","parsedGroupData","useMemo","_groupData$businessGr","_groupData$businessGr2","businessGroupId","formState","useForm","mode","reValidateMode","defaultValues","userInfo","timeFormat","resolver","yupResolver","businessGroupAccountSchema","companyPasswordSchema","values","onError","err","getApiErrorMessage","mutate","editGroupMutation","isPending","editPending","useMutation","mutationFn","updateGroup","onSuccess","notifySuccess","invalidateQueries","createGroupMutation","createPending","createGroup","passwordMutation","passwordPending","changePassword","async","length","file","passwordData","newPassword","oldPassword","confirmPassword","_id","_Fragment","MainPagetitle","mainTitle","pageTitle","parentTitle","FormProvider","Tab","Container","defaultActiveKey","toLowerCase","Nav","as","i","Item","Link","eventKey","active","Content","Loader","height","Component","Pane"],"sourceRoot":""}