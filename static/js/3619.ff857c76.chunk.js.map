{"version":3,"file":"static/js/3619.ff857c76.chunk.js","mappings":"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","sources":["jsx/pages/Map.jsx","jsx/pages/GeofenceMap.jsx"],"sourcesContent":["import React from 'react';\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\n\n\nconst Map = () => {\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyA_nkYS3LnLGLrj4Qmky4NntAE97ivSxP8\"\n  });\n\n  const containerStyle = {\n    width: '100%',\n    height: '100%'\n  };\n\n  const center = {\n    lat: 30.7099127700684,\n    lng: 76.69003904617821,\n  };\n\n  const [map, setMap] = React.useState(null);\n\n  const onLoad = React.useCallback(function callback(map) {\n    // This is just an example of getting and using the map instance!!! don't just blindly copy!\n    const bounds = new window.google.maps.LatLngBounds(center);\n    map.fitBounds(bounds);\n\n    setMap(map);\n  }, [center]);\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  return isLoaded ? (\n    <GoogleMap\n      mapContainerStyle={containerStyle}\n      center={center}\n      zoom={10}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n    >\n    <Marker position={center}/>\n      <></>\n    </GoogleMap>\n  ) : <></>;\n};\n\nexport default Map;\n","import React, { useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\nimport { ChromePicker } from \"react-color\";\nimport Select from \"react-select\";\nimport Map from \"./Map\";\nimport { BiNoEntry } from \"react-icons/bi\";\nimport CustomInput from \"../components/Input/CustomInput\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { geofenceMapSchema } from \"../../yup\";\nimport {\n  categoryOptions,\n  toleranceOptions,\n} from \"../components/TabComponent/VehicleTabs/Options\";\nimport { Button } from \"react-bootstrap\";\nimport Error from \"../components/Error/Error\";\nimport { notifyError, notifySuccess } from \"../../utils/toast\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nconst GeofenceDetail = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [tempValue, setTempValue] = useState();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const mapContainerStyle = {\n    height: \"100%\",\n    width: \"100%\",\n  };\n  const customStyles = {\n    control: (base) => ({\n      ...base,\n      padding: \".25rem 0 \", // Adjust the height as needed\n    }),\n  };\n\n  const defaultCenter = {\n    lat: -3.745,\n    lng: -38.523,\n  };\n\n  const [map, setMap] = useState(null);\n\n  const onLoad = React.useCallback(\n    function callback(map) {\n      const bounds = new window.google.maps.LatLngBounds(defaultCenter);\n      map.fitBounds(bounds);\n      setMap(map);\n    },\n    [defaultCenter]\n  );\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  // const handleColorChange = (color) => {\n  //   setFormData((prevData) => ({ ...prevData, color: color.hex }));\n  // };\n\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    getValues,\n    control,\n    handleSubmit,\n  } = useForm({\n    resolver: yupResolver(geofenceMapSchema),\n  });\n  const handleChange = (e) => {\n    setSelectedOption(e.target.value);\n    setValue(\"geofenceAccess\", e.target.value);\n  };\n\n  const onSubmit = (data) => {\n    try {\n      if (id) {\n        const val = JSON.parse(localStorage.getItem(\"geofenceData\"));\n        const indexToUpdate = val.findIndex((item) => item.id == id);\n        if (indexToUpdate !== -1) {\n          val[indexToUpdate] = { ...data, id };\n          localStorage.setItem(\"geofenceData\", JSON.stringify(val));\n          notifySuccess(\"Geofence Updated!\");\n          navigate(\"/vehicle-tracking\");\n        }\n        return;\n      } else {\n        data = { ...data };\n        const existingData = JSON.parse(localStorage.getItem(\"geofenceData\"));\n        data.id = existingData.length + 1;\n        existingData.push(data);\n        localStorage.setItem(\"geofenceData\", JSON.stringify(existingData));\n\n        notifySuccess(\"New Geofence Created!\");\n        navigate(\"/vehicle-tracking\");\n        return;\n      }\n    } catch (error) {\n      notifyError(\"Some error occured !!\");\n    }\n  };\n\n  const Geofence = JSON.parse(localStorage.getItem(\"geofenceData\"));\n  const GeoData = Geofence.filter((item) => item.id == id);\n\n  const [filteredGeoData, setFilteredGeoData] = useState(GeoData);\n\n  return (\n    <div>\n      <div style={{ padding: \"10px\", backgroundColor: \"#FFFDFD\" }}>\n        <h2 style={{ fontSize: \"20px\" }}>Geofence Detail</h2>\n      </div>\n\n      <div className=\"\" style={{ display: \"flex\", height: \"88vh\" }}>\n        <div\n          className=\"col-md-3\"\n          style={{\n            padding: \"15px\",\n            boxShadow: \"9px 0 4px rgba(0, 0, 0, 0.1)\",\n            backgroundColor: \"#fff\",\n            overflow: \"auto\",\n          }}\n        >\n          <FormProvider>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  Company:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  name=\"company\"\n                  register={register}\n                  label=\"Company\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].company : \"\"\n                  }\n                />\n                <Error errorName={errors.company} />\n              </div>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  Name:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  label=\"Name\"\n                  register={register}\n                  name=\"name\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].name : \"\"\n                  }\n                />\n                <Error errorName={errors.name} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  Category:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"category\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"category\", newValue.value);\n                      }}\n                      options={categoryOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      defaultValue={\n                        filteredGeoData[0]\n                          ? filteredGeoData[0].name\n                          : categoryOptions[0]\n                      }\n                    />\n                  )}\n                />\n                {!getValues(\"category\") && (\n                  <Error errorName={errors.category} />\n                )}\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  Geofence Access:<span className=\"text-danger\">*</span>\n                </label>\n                <div\n                  style={{ display: \"flex\", flexDirection: \"row\", gap: \"5rem\" }}\n                >\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"public\"\n                      checked={selectedOption === \"public\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">Public</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"private\"\n                      checked={selectedOption === \"private\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">Private</label>\n                  </div>\n                </div>\n                {!getValues(\"geofenceAccess\") && (\n                  <Error errorName={errors.geofenceAccess} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"contactNumber\" className=\"form-label\">\n                  Contact Number:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"number\"\n                  register={register}\n                  label=\"Contact Number\"\n                  name=\"contactNumber\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].contactNumber : \"\"\n                  }\n                />\n                <Error errorName={errors.contactNumber} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"address\" className=\"form-label\">\n                  Address:\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"address\")}\n                  label=\"Address\"\n                  name=\"address\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].address : \"\"\n                  }\n                />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  Tolerance:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"tolerance\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"tolerance\", newValue.value);\n                      }}\n                      options={toleranceOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      defaultValue={\n                        filteredGeoData[0]\n                          ? filteredGeoData[0].name\n                          : toleranceOptions[0]\n                      }\n                    />\n                  )}\n                />\n                {!getValues(\"contactNunber\") && (\n                  <Error errorName={errors.contactNumber} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Description:</label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"description\")}\n                  name=\"description\"\n                  label=\"Description\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].description : \"\"\n                  }\n                />\n              </div>\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  margin: \"2rem 0\",\n                }}\n              >\n                <Button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n                  {\" \"}\n                  Next\n                </Button>\n              </div>\n            </form>\n          </FormProvider>\n        </div>\n\n        {/* Right side */}\n        <div className=\"col-md-9\" style={{ paddingLeft: \"15px\" }}>\n          <Map />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeofenceDetail;\n"],"names":["Map","isLoaded","useJsApiLoader","id","googleMapsApiKey","center","lat","lng","map","setMap","React","onLoad","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","_jsxs","GoogleMap","mapContainerStyle","width","height","zoom","children","_jsx","Marker","position","_Fragment","GeofenceDetail","selectedOption","setSelectedOption","useState","tempValue","setTempValue","navigate","useNavigate","useParams","customStyles","control","base","padding","defaultCenter","register","formState","errors","setValue","getValues","handleSubmit","useForm","resolver","yupResolver","geofenceMapSchema","handleChange","e","target","value","onSubmit","data","val","JSON","parse","localStorage","getItem","indexToUpdate","findIndex","item","setItem","stringify","notifySuccess","existingData","length","push","error","notifyError","GeoData","filter","filteredGeoData","setFilteredGeoData","style","backgroundColor","fontSize","className","display","boxShadow","overflow","FormProvider","htmlFor","CustomInput","type","name","label","defaultValue","company","Error","errorName","Controller","rules","required","render","_ref","field","onChange","ref","Select","newValue","options","categoryOptions","styles","category","flexDirection","gap","checked","geofenceAccess","contactNumber","address","_ref2","toleranceOptions","description","justifyContent","margin","Button","onClick","paddingLeft"],"sourceRoot":""}