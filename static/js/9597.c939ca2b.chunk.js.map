{"version":3,"file":"static/js/9597.c939ca2b.chunk.js","mappings":"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","sources":["jsx/components/Tables/GeofenceTable.jsx","jsx/pages/Geofence.jsx","services/api/GeoFenceService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { MdDelete } from \"react-icons/md\";\nimport { FaEdit } from \"react-icons/fa\";\nimport DeleteModal from \"../../../components/Modal/DeleteModal\";\n\nconst GeofenceTable = ({\n  tableData,\n  currentPage,\n  itemsPerPage,\n  onConfirmDelete,\n  editDrawerOpen,\n  page,\n}) => {\n  console.log(tableData);\n  const startIndex = (currentPage - 1) * itemsPerPage + 1;\n  return (\n    <>\n      {tableData.map((item, index) => (\n        <tr key={index}>\n          <td>\n            <span>{startIndex + index}</span>\n          </td>\n          <td>\n            <h6>{item.name}</h6>\n          </td>\n          <td>\n            <span>{item.category}</span>\n          </td>\n          <td>\n            <span>{item.contactNumber}</span>\n          </td>\n          <td>\n            <span>{item.address}</span>\n          </td>\n          <td>\n            <span>{item.description}</span>\n          </td>\n          <td>\n            <span>{item.geofenceAccess}</span>\n          </td>\n          <td>\n            <span className=\"d-flex justify-content-center\">\n              <span\n                className=\"cursor-pointer\"\n                onClick={() => editDrawerOpen(item._id)}\n              >\n                <FaEdit style={{ color: \"green\", fontSize: \"1.2rem\" }} />\n              </span>\n              <DeleteModal\n                className=\"cursor-pointer \"\n                onConfirmDelete={onConfirmDelete}\n                id={item._id}\n              >\n                <MdDelete style={{ color: \"red\", fontSize: \"1.2rem\" }} />\n              </DeleteModal>\n            </span>\n          </td>\n        </tr>\n      ))}\n    </>\n  );\n};\n\nexport default GeofenceTable;\n","import React, { useState, useRef, useEffect, useContext } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\n\nimport MainPagetitle from \"../../components/MainPagetitle\";\nimport InviteCustomer from \"../constant/ModalList\";\nimport EmployeeOffcanvas from \"../constant/EmployeeOffcanvas\";\nimport { GeofenceData } from \"../components/Tables/Tables\";\nimport GeofenceTable from \"../components/Tables/GeofenceTable\";\nimport { useTranslation } from \"react-i18next\";\nimport { notifyError, notifySuccess } from \"../../utils/toast\";\nimport {\n  deleteGeofenceData,\n  getGeofenceData,\n} from \"../../services/api/GeoFenceService\";\nimport usePagination from \"../../hooks/usePagination\";\nimport { ThemeContext } from \"../../context/ThemeContext\";\nimport clsx from \"clsx\";\nimport ReactPaginate from \"react-paginate\";\nimport { ICON } from \"../../constants/theme\";\nimport Paginate from \"../../components/Paginate\";\nimport TableSkeleton from \"@/components/Skeleton/Table\";\n\nconst headers = [\n  { label: \"Employee ID\", key: \"emplid\" },\n  { label: \"Employee Name\", key: \"title\" },\n  { label: \"Department\", key: \"department\" },\n  { label: \"Email Address\", key: \"email\" },\n  { label: \"Contact Number\", key: \"contact\" },\n  { label: \"Gender\", key: \"gender\" },\n  { label: \"Location\", key: \"location\" },\n  { label: \"Status\", key: \"status\" },\n];\n\nconst Geofence = (ref) => {\n  const navigate = useNavigate();\n  const { page, goToPage, setCount, totalCount } = usePagination();\n\n  const { isRtl } = useContext(ThemeContext);\n\n  const [tableData, setTableData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [editData, setEditData] = useState({\n    id: 0,\n    status: \"\",\n    title: \"\",\n    contact: 0,\n    age: 0,\n    drivingExperience: 0,\n    gender: \"\",\n    location: \"\",\n  });\n\n  const itemsPerPage = 10;\n\n  const handlePageClick = ({ selected }) => {\n    goToPage(selected + 1);\n  };\n\n  const startIndex = (page - 1) * itemsPerPage;\n  const slicedData = tableData.slice(startIndex, startIndex + itemsPerPage);\n\n  const getData = async () => {\n    try {\n      setIsLoading(true);\n      const { geofences, count } = await getGeofenceData(page);\n      setCount(count);\n      setTableData(geofences);\n    } catch (error) {\n      notifyError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, [page]);\n\n  const onConfirmDelete = async (id) => {\n    try {\n      const data = await deleteGeofenceData(id);\n      if (data.success) {\n        notifySuccess(data.message);\n      }\n      getData(page);\n    } catch (error) {\n      notifyError(error);\n    }\n  };\n  const editDrawerOpen = (item) => {\n    navigate(`/settings/geofence/map/edit/${item}`);\n  };\n\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <MainPagetitle\n        mainTitle={t(\"geofence\")}\n        pageTitle={t(\"geofence\")}\n        parentTitle={t(\"settings\")}\n      />\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-xl-12\">\n            <div className=\"card\">\n              <div className=\"card-body p-0\">\n                <div className=\"table-responsive active-projects style-1 ItemsCheckboxSec shorting\">\n                  <div className=\"tbl-caption d-flex justify-content-between text-wrap align-items-center\">\n                    <h4 className=\"heading mb-0\">{t(\"geofence\")}</h4>\n                    <div className=\"d-flex\">\n                      <Link\n                        to={\"/settings/geofence/map\"}\n                        className=\"btn btn-primary btn-sm ms-1\"\n                        data-bs-toggle=\"offcanvas\"\n                        // onClick={() => employe.current.showModal()}\n                      >\n                        + {t(\"showMap\")}\n                      </Link>{\" \"}\n                    </div>\n                  </div>\n                  <div\n                    id=\"employee-tbl_wrapper\"\n                    className=\"dataTables_wrapper no-footer\"\n                  >\n                    {!tableData.length && isLoading ? (\n                      <TableSkeleton />\n                    ) : (\n                      <table\n                        id=\"empoloyees-tblwrapper\"\n                        className=\"table ItemsCheckboxSec dataTable no-footer mb-0\"\n                      >\n                        <thead>\n                          <tr>\n                            <th>{t(\"geofenceID\")}</th>\n                            <th>{t(\"geofenceName\")}</th>\n                            <th>{t(\"geofenceType\")}</th>\n                            <th>{t(\"contactNumber\")}</th>\n                            <th>{t(\"address\")}</th>\n                            <th>{t(\"description\")}</th>\n                            <th>{t(\"geofenceAccess\")}</th>\n                            <th>{t(\"action\")}</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <GeofenceTable\n                            page={page}\n                            editData={editData}\n                            tableData={tableData}\n                            onConfirmDelete={onConfirmDelete}\n                            editDrawerOpen={editDrawerOpen}\n                            setEditData={setEditData}\n                            currentPage={page}\n                            itemsPerPage={itemsPerPage}\n                          />\n                        </tbody>\n                      </table>\n                    )}\n                    <div className=\"d-sm-flex text-center justify-content-between align-items-center\">\n                      <div className=\"dataTables_info\">\n                        {t(\"showing\")} {(page - 1) * 10 + 1} {t(\"to\")}{\" \"}\n                        {Math.min(page * 10, totalCount)} {t(\"of\")} {totalCount}{\" \"}\n                        {t(\"entries\")}\n                      </div>\n                      <div\n                        className=\"dataTables_paginate paging_simple_numbers\"\n                        id=\"example2_paginate\"\n                      >\n                        <Paginate\n                          totalCount={totalCount}\n                          itemsPerPage={itemsPerPage}\n                          handlePageClick={handlePageClick}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Geofence;\n","import axios from \"axios\";\n\nexport const getGeofenceData = async (pageNo = 1, limit = 10) => {\n  const data = await axios.get(`/geofences?page=${pageNo}&limit=${limit}`);\n  return data.data.data;\n};\n\nexport const deleteGeofenceData = async (id) => {\n  const { data } = await axios.delete(`/geofences/${id}`);\n  return data;\n};\n\nexport const createGeofenceData = async (body) => {\n  const { data } = await axios.post(\"/geofences\", body);\n  return data;\n};\n\nexport const getGeofenceById = async (id) => {\n  const { data } = await axios.get(`/geofences/${id}`);\n  return data;\n};\n\nexport const updateGeofence = async (id, body) => {\n  const { data } = await axios.patch(`/geofences/${id}`, body);\n  return data;\n};\n"],"names":["_ref","tableData","currentPage","itemsPerPage","onConfirmDelete","editDrawerOpen","page","console","log","startIndex","_jsx","_Fragment","children","map","item","index","_jsxs","name","category","contactNumber","address","description","geofenceAccess","className","onClick","_id","FaEdit","style","color","fontSize","DeleteModal","id","MdDelete","ref","navigate","useNavigate","goToPage","setCount","totalCount","usePagination","isRtl","useContext","ThemeContext","setTableData","useState","isLoading","setIsLoading","editData","setEditData","status","title","contact","age","drivingExperience","gender","location","getData","slice","async","geofences","count","getGeofenceData","error","notifyError","useEffect","t","useTranslation","MainPagetitle","mainTitle","pageTitle","parentTitle","Link","to","length","TableSkeleton","GeofenceTable","data","deleteGeofenceData","success","notifySuccess","message","concat","Math","min","Paginate","handlePageClick","selected","pageNo","arguments","undefined","limit","axios","get","delete","createGeofenceData","post","body","getGeofenceById","updateGeofence","patch"],"sourceRoot":""}