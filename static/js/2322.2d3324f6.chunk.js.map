{"version":3,"file":"static/js/2322.2d3324f6.chunk.js","mappings":"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","sources":["jsx/components/Tracking/CompanyItem.jsx","jsx/components/Tracking/DriverTabComponent3.jsx","jsx/components/Tracking/DriverItem.jsx","jsx/components/maps/DriverTab.jsx","jsx/pages/DriverTracking.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport \"../../../scss/pages/_driver-tracking.scss\";\nimport { Button } from \"react-bootstrap\";\nconst CompanyItem = (props) => {\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [nodes, setNodes] = useState([]);\n\n\n  useEffect(() => {\n    const data = props?.companyVehicle.map((data) => {\n      const childNode = data?.vehicles?.map((subItem) => {\n        return { label: subItem?.vehicleName, value: subItem?._id };\n      });\n\n      return { value: data?._id, label: data?.companyName, children: childNode };\n    });\n    setNodes([...data]);\n  }, [props.companyVehicle]);\n\n\n  // useEffect(() => {\n  //   const data = Object.entries(props.vehicles).map((data) => {\n  //     const childNode = data[1].map((data) => {\n  //       return { label: data.vehicleName, value: data.id };\n  //     });\n\n  //     return { value: data[0], label: data[0], children: childNode };\n  //   });\n  //   setNodes([...data]);\n  // }, [props.vehicles]);\n\n  useEffect(() => {\n    let vehicleIds = [];\n    const data = nodes?.map((ele) => ele.children?.map((vehicle) => vehicleIds.push(vehicle.value) ));\n    handleCheck(vehicleIds);\n  }, [nodes])\n  \n  const handleCheck = (checked) => {\n    setChecked(checked);\n    props.setVehicleIds(checked)\n  };\n  const handleExpand = (expanded) => {\n    setExpanded(expanded);\n  };\n  const handleSubmit = () => {\n    props.getVehiclesByIds();\n    // const selectedObject = checked.map((data) => JSON.parse(data));\n    // console.log(selectedObject)\n    props.handleToggleCardPositionHandler();\n  };\n  \n  return (\n    <>\n    <div className=\"checkboxTree\">\n      <CheckboxTree\n        nodes={nodes}\n        checked={checked}\n        expanded={expanded}\n        onCheck={handleCheck}\n        onExpand={handleExpand}\n        showNodeIcon={false}\n        icons={{\n          expandOpen: <i class=\"fa-solid fa-minus\"></i>,\n          expandClose: <i class=\"fa-solid fa-plus\"></i>,\n          uncheck: (\n            <i\n              class=\"fa-regular fa-square\"\n              style={{\n                fontSize: \"16px\",\n              }}\n            ></i>\n          ),\n          check: (\n            <i\n              class=\"fa-solid fa-square-check\"\n              style={{\n                fontSize: \"16px\",\n              }}\n            ></i>\n          ),\n          halfCheck: (\n            <i\n              class=\"fa-regular fa-square-minus\"\n              style={{\n                fontSize: \"16px\",\n              }}\n            ></i>\n          ),\n        }}\n      />\n      </div>\n      <div className=\"text-center  pt-2 \">\n        <Button\n          className=\" mb-5\"\n          variant=\"primary btn-md \"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Save Selection \n        </Button>\n      </div>\n    </>\n  );\n};\nexport default CompanyItem;\n\n\n\n\n\n\n\n\n\n\n\n","import React, { useState, useEffect } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport \"../../../scss/pages/_driver-tracking.scss\";\nimport { Button } from \"react-bootstrap\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\n\nconst GeoFenceItem = ({ geoFences, handleToggleCardPositionHandler }) => {\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [nodes, setNodes] = useState([]);\n\n\nuseEffect(() => {\n    const data = Object.entries(geoFences).map(([company, fences]) => {\n      const childNodes = fences.map(fence => ({\n        label: fence.name,\n        value: fence.id\n      }));\n      return { value: company, label: company, children: childNodes };\n    });\n    setNodes(data);\n  }, [geoFences]);\n\n  const handleCheck = (checked) => {\n    setChecked(checked);\n  };\n\n  const handleExpand = (expanded) => {\n    setExpanded(expanded);\n  };\n\n  const handleSubmit = () => {\n    const selectedObject = checked.map((data) => JSON.parse(data));\n    handleToggleCardPositionHandler();\n  };\n\n  return (\n    <>\n      <div className=\"checkboxTree\">\n        <CheckboxTree\n          nodes={nodes}\n          checked={checked}\n          expanded={expanded}\n          onCheck={handleCheck}\n          onExpand={handleExpand}\n          showNodeIcon={false}\n          icons={{\n            expandOpen: <i className=\"fa-solid fa-minus\"></i>,\n            expandClose: <i className=\"fa-solid fa-plus\"></i>,\n            uncheck: (\n              <i\n                className=\"fa-regular fa-square\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            check: (\n              <i\n                className=\"fa-solid fa-square-check\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            halfCheck: (\n              <i\n                className=\"fa-regular fa-square-minus\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n          }}\n        />\n      </div>\n      <div className=\"text-center  pt-2 \">\n        <Button\n          className=\" mb-5\"\n          variant=\"primary btn-md \"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Save Selection\n        </Button>\n      </div>\n    </>\n  );\n};\nexport default GeoFenceItem;","import React, { useEffect, useState } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport \"../../../scss/pages/_driver-tracking.scss\";\nimport { Button } from \"react-bootstrap\";\n\n\nconst DriverItem = (props) => {\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [nodes, setNodes] = useState([]);\n  useEffect(() => {\n    const data = Object.entries(props.drivers).map((data) => {\n      const childNode = data[1].map((data) => {\n        return { label: data.firstName, value: data.id };\n      });\n\n      return { value: data[0], label: data[0], children: childNode };\n    });\n    setNodes([...data]);\n  }, [props.drivers]);\n  const handleCheck = (checked) => {\n    setChecked(checked);\n  };\n  const handleExpand = (expanded) => {\n    setExpanded(expanded);\n  };\n  const handleSubmit = () => {\n    const selectedObject = checked.map((data) => JSON.parse(data));\n    console.log(selectedObject, \"selctedObject\")\n    props.handleToggleCardPositionHandler();\n  };\n  return (\n    <>\n    <div className=\"checkboxTree\">\n      <CheckboxTree\n        nodes={nodes}\n        checked={checked}\n        expanded={expanded}\n        onCheck={handleCheck}\n        onExpand={handleExpand}\n        showNodeIcon={false}\n        icons={{\n          expandOpen: <i class=\"fa-solid fa-minus\"></i>,\n          expandClose: <i class=\"fa-solid fa-plus\"></i>,\n          uncheck: (\n            <i\n              class=\"fa-regular fa-square\"\n              style={{\n                fontSize: \"16px\",\n              }}\n            ></i>\n          ),\n          check: (\n            <i\n              class=\"fa-solid fa-square-check\"\n              style={{\n                fontSize: \"16px\",\n              }}\n            ></i>\n          ),\n          halfCheck: (\n            <i\n              class=\"fa-regular fa-square-minus\"\n              style={{\n                fontSize: \"16px\",\n              }}\n            ></i>\n          ),\n        }}\n      />\n      </div>\n      <div className=\"text-center  pt-2 \">\n        <Button\n          className=\" mb-5\"\n          variant=\"primary btn-md \"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Save Selection\n        </Button>\n      </div>\n    </>\n  );\n};\nexport default DriverItem;","import React, { useEffect, useState } from \"react\";\nimport { Nav, Tab } from \"react-bootstrap\";\nimport \"../../../scss/pages/_driver-tracking.scss\";\nimport { IoIosArrowForward, IoIosArrowBack } from \"react-icons/io\";\n\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\nimport CompanyItem from \"../Tracking/CompanyItem\";\nimport { getVehicles, statusData } from \"../../../utils/helper\";\n\n\nimport GeoFenceItem from \"../Tracking/DriverTabComponent3\";\nimport DriverItem from \"../Tracking/DriverItem\";\nimport { notifyError } from \"../../../utils/toast\";\nimport { getVehiclesByCompany } from \"../../../services/api/VehicleService\";\n\nconst DriverTab = ({ tabData, handleToggleCardPosition, isOutside, setVehicleIds, getVehiclesByIds, setVehicleStatus, vehicleCounts }) => {\n  const componentData = {\n    name: \"Company1\",\n    drivers: [\n      { name: \"driver1\", timeStamp: \"22-02-2024 3:00 PM\", status: \"running\" },\n      { name: \"driver2\", timeStamp: \"22-02-2024 3:00 PM\", status: \"idle\" },\n      { name: \"driver3\", timeStamp: \"22-02-2024 3:00 PM\", status: \"inactive\" },\n      { name: \"driver4\", timeStamp: \"22-02-2024 3:00 PM\", status: \"running\" },\n      { name: \"driver5\", timeStamp: \"22-02-2024 3:00 PM\", status: \"stopped\" },\n      { name: \"driver6\", timeStamp: \"22-02-2024 3:00 PM\", status: \"stopped\" },\n      { name: \"driver7\", timeStamp: \"22-02-2024 3:00 PM\" },\n    ],\n    allocatedDriver: 4,\n    notAllocatedDriver: 3,\n    totalDriver: 7,\n  };\n\n  const components = [\n    DriverTabComponent1,\n    DriverTabComponent2,\n    DriverTabComponent3,\n  ];\n\n  return (\n    <>\n      <div\n        className={`default-tab outer-container ${\n          isOutside ? \"toggleBarInside\" : \"toggleBarOutside\"\n        }`}\n      >\n        <button\n          onClick={handleToggleCardPosition}\n          className=\"driver_tracking_button\"\n        >\n          {!isOutside ? <IoIosArrowForward /> : <IoIosArrowBack />}\n        </button>\n        <Tab.Container defaultActiveKey={tabData[0].name.toLowerCase()}>\n          <Nav as=\"ul\" className=\"nav-tabs tracking_navTabs\">\n            {tabData.map((data, i) => {\n              const Icon = data.icon;\n              return (\n                <Nav.Item as=\"li\" key={i}>\n                  <Nav.Link eventKey={data.name.toLowerCase()}>\n                    <Icon className=\"tab-icon\" />\n                    {data.name}\n                  </Nav.Link>\n                </Nav.Item>\n              );\n            })}\n          </Nav>\n          <Tab.Content\n            className=\"p-2 py-4\"\n            style={{\n              background: \"#f5f5f5\",\n              overflow: \"scroll\",\n              height: \"100vh\",\n            }}\n          >\n            {tabData.map((data, i) => {\n              const Component = components[i];\n              return (\n                <Tab.Pane eventKey={data.name.toLowerCase()} key={i}>\n                  <Component\n                    data={componentData}\n                    handleToggleCardPosition={handleToggleCardPosition}\n                    setVehicleIds={setVehicleIds}\n                    getVehiclesByIds={getVehiclesByIds}\n                    setVehicleStatus={setVehicleStatus}\n                    vehicleCounts={vehicleCounts}\n                  />\n                </Tab.Pane>\n              );\n            })}\n          </Tab.Content>\n        </Tab.Container>\n      </div>\n    </>\n  );\n};\n\nconst DriverTabComponent1 = (props) => {\n  const { setVehicleStatus, vehicleCounts } = props;\n  \n  const { running, idle, stopped, inactive, nodata, total } = vehicleCounts;\n  const [selectValue, setSelectValue] = useState(\"All\");\n  const [vehicles, setVehicles] = useState([]);\n\n  const [companyVehicle, setCompanyVehicle] = useState([]);\n\n  const getVehiclesList = async(search) =>{\n    try{\n      const data = await getVehiclesByCompany(search);\n      await setCompanyVehicle(data?.data ?? [])\n      return;\n    }catch(e){\n      notifyError(\"Some Error occured\")\n    }\n  }\n\n\n  useEffect(() => {\n    getVehiclesList();\n    // const data = getVehicles(selectValue);\n    // setVehicles(data);\n  }, [selectValue]);\n\n  const items = JSON.parse(localStorage?.getItem(\"userJsonData\")) ? JSON.parse(localStorage?.getItem(\"userJsonData\")) \n    .filter((item) => item.designation === \"vehicle\")\n    .map((data) => ({\n      id: data.id,\n      name: data.vehicleName,\n    })): [];\n\n  const handleSearch = (item) => {\n\n    const vehicleData = getVehicles(selectValue);\n\n    const filteredData = Object.entries(vehicleData).filter((vehicle) => {\n      const vec = vehicle[1].filter((data) => data.id == item.id);\n      return vec.length > 0;\n    });\n\n    const convertedData = filteredData.reduce((acc, [company, dataArray]) => {\n      dataArray.map((data) => {\n        if (data.vehicleName === item.name) {\n          acc[company] = [data];\n        }\n      });\n      return acc;\n    }, {});\n    setVehicles(convertedData);\n  };\n\n  return (\n    <>\n      <div className=\"vehicle_tracking-object\">\n        <span\n          className={`light fs-9 running ${\n            selectValue === \"Running\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {setSelectValue(\"Running\"); setVehicleStatus(\"RUNNING\"); } }\n        >\n          <p>{running}</p>\n          <span>Running</span>\n        </span>\n        <span\n          pill\n          className={`light fs-9 idle ${\n            selectValue === \"Idle\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => { setSelectValue(\"Idle\"); setVehicleStatus(\"IDLE\"); }}\n        >\n          <p>{idle}</p>\n          <span>Idle</span>\n        </span>\n        <span\n          pill\n          className={`light stopped fs-9 ${\n            selectValue === \"Stopped\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => { setSelectValue(\"Stopped\"); setVehicleStatus(\"STOP\"); }}\n        >\n          <p>{stopped}</p>\n          <span>Stopped</span>\n        </span>\n        <span\n          pill\n          className={`light fs-9 inActive ${\n            selectValue === \"Inactive\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => { setSelectValue(\"Inactive\"); setVehicleStatus(\"INACTIVE\"); }}\n        >\n          <p>{inactive}</p>\n          <span>InActive</span>\n        </span>\n        <span\n          pill\n          className={`light fs-9 noData ${\n            selectValue === \"NoData\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => { setSelectValue(\"NoData\"); setVehicleStatus(\"NODATA\"); }}\n        >\n          <p>{nodata}</p>\n          <span>NoData</span>\n        </span>\n        <span\n          className={`light fs-9 total ${\n            selectValue === \"All\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => { setSelectValue(\"All\"); setVehicleStatus(\"\"); }}\n        >\n          <p>{total}</p>\n          <span>Total</span>\n        </span>\n      </div>\n      <div className=\"d-flex mt-4 mb-4\">\n        <ReactSearchAutocomplete\n          items={items}\n          className=\"w-100\"\n          styling={{\n            height: \"30px\",\n            marginRight: \"10px\",\n            fontSize: \"12px\",\n            color: \"#4A4646\",\n          }}\n          onSearch={(string) => {\n            if (string === \"\") {\n              const data = getVehicles(selectValue);\n              setVehicles(data);\n            }\n          }}\n          onSelect={handleSearch}\n        />\n      </div>\n      {\n        <CompanyItem\n          companyVehicle={companyVehicle ?? []}\n          setVehicleIds={props.setVehicleIds}\n          vehicles={vehicles}\n          getVehiclesByIds={props.getVehiclesByIds}\n          handleToggleCardPositionHandler={props.handleToggleCardPosition}\n        />\n      }\n    </>\n  );\n};\n\nconst DriverTabComponent2 = (props) => {\n  const [selectValue, setSelectValue] = useState(\"All\");\n  const [selectAll, setSelectAll] = useState([]);\n  const [selectedDrivers, setSelectedDrivers] = useState([]);\n  const [selectDriver, setSelectDriver] = useState([]);\n  const [filterApplied, setFilterApplied] = useState(false);\n  const [isDisable, setIsDisable] = useState(false);\n  const jsonData = JSON.parse(localStorage.getItem(\"userJsonData\")) ? JSON.parse(localStorage.getItem(\"userJsonData\")): [];\n  const [companyDrivers, setCompanyDrivers] = useState([]);\n  const [company, setCompany] = useState(\n    jsonData.filter((item) => item.role === \"company\")\n  );\n  const [drivers, setDrivers] = useState(\n    jsonData.filter((item) => item.designation === \"Driver\")\n  );\n  const allocated = drivers.filter(\n    (item) => item.activityStatus === \"Allocated\"\n  );\n  const notAllocated = drivers.filter(\n    (item) => item.activityStatus === \"Not Allocated\"\n  );\n\n  useEffect(() => {\n    const newCompanyDrivers = company.reduce((acc, company) => {\n      const companyDrivers = jsonData.filter((item) => item.designation === \"Driver\" && item.parentCompany === company.userName);\n\n      if (companyDrivers.length > 0) {\n        acc[company.userName] = companyDrivers;\n      }\n      return acc;\n    }, {}); \n    setCompanyDrivers(newCompanyDrivers);\n  }, [company]);\n\n  useEffect(() => {\n\n  const companyDrivers = company.reduce((acc, company) => {\n    const drivers = jsonData.filter((item) => \n      item.designation === \"Driver\" && \n      item.parentCompany === company.userName &&\n      (selectValue != \"All\" ? item.activityStatus === selectValue: true)\n    );\n\n    if (drivers.length > 0) {\n      acc[company.userName] = drivers;\n    }\n    return acc;\n  }, {});\n  setCompanyDrivers(companyDrivers);\n  }, [selectValue]);\n\n  const total = drivers.length;\n\n  const handleOnSelect = (item) => {\n    const selectedCompanyId = item.id;\n\n  const companyDriversData = company.reduce((acc, company) => {\n    const driversForCompany = jsonData.filter((driver) =>\n      driver.designation === \"Driver\" &&\n      driver.parentCompany === company.userName &&\n      driver.id === selectedCompanyId\n    );\n\n    if (driversForCompany.length > 0) {\n      acc[company.userName] = driversForCompany;\n    }\n    return acc;\n  }, {});\n\n  setCompanyDrivers(companyDriversData);\n  };\n\n  const handleOnSearch = (string, results) => {\n    if(string === \"\"){\n      const newCompanyDrivers = company.reduce((acc, company) => {\n        const companyDrivers = jsonData.filter((item) => item.designation === \"Driver\" && item.parentCompany === company.userName);\n\n        if (companyDrivers.length > 0) {\n          acc[company.userName] = companyDrivers;\n        }\n        return acc;\n      }, {}); \n      setCompanyDrivers(newCompanyDrivers);\n    }\n  };\n  const handleSelectAll = (id, company, drivers, index) => {\n    var checkboxArray = [...selectedDrivers];\n    if (!selectAll[index]) {\n      drivers.map((item) => checkboxArray[index].push(item.id));\n    } else {\n      checkboxArray[index] = [];\n      setSelectedDrivers(checkboxArray);\n    }\n\n  };\n  const handleSelect = (ind) => {\n\n    setSelectAll((prev) => {\n      const newArr = [...prev];\n      newArr[ind] = !newArr[ind];\n      return newArr;\n    });\n  };\n  const handleDriverSelect = (id, ind) => {\n    const updatedDrivers = [...selectedDrivers];\n    if (updatedDrivers[ind].includes(id)) {\n      const index = updatedDrivers[ind].indexOf(id);\n      updatedDrivers[ind].splice(index, 1);\n      if (updatedDrivers[ind].length === 2) {\n        handleSelect(ind);\n      }\n    } else {\n      updatedDrivers[ind].push(id);\n      if (updatedDrivers[ind].length === 3) {\n        handleSelect(ind);\n      }\n    }\n\n    setSelectedDrivers(updatedDrivers);\n  };\n  \n  const items = jsonData\n    .filter((item) => item.designation === \"Driver\")\n    .map((item) => {\n      return { id: item.id, name: item.firstName + \" \" + item.lastName };\n    });\n  return (\n    <>\n      <div className=\"px-2 vehicle_tracking-object\">\n        <span\n          bg=\"\"\n          pill\n          className={`light fs-9  running ${\n            selectValue === \"Allocated\"\n              ? \"vehicle_tracking-active\"\n              : isDisable && \"pe-none\"\n          }`}\n          onClick={() => setSelectValue(\"Allocated\")}\n        >\n          <p>{allocated.length}</p>\n          <span>Allocated</span>\n        </span>\n        <span\n          bg=\"\"\n          pill\n          className={`light fs-9 idle ${\n            selectValue === \"Not Allocated\"\n              ? \"vehicle_tracking-active\"\n              : isDisable && \"pe-none\"\n          }`}\n          onClick={() => setSelectValue(\"Not Allocated\")}\n        >\n          <p>{notAllocated.length}</p>\n          <span>Not Allocated</span>\n        </span>\n        <span\n          bg=\"\"\n          pill\n          className={`light fs-9 total ${\n            selectValue === \"Total\"\n              ? \"vehicle_tracking-active\"\n              : isDisable && \"pe-none\"\n          }`}\n          onClick={() => setSelectValue(\"All\")}\n        >\n          <p>{total}</p>\n          <span>Total</span>\n        </span>\n      </div>\n      <div className=\"d-flex mt-4 mb-4\">\n        <ReactSearchAutocomplete\n          items={items}\n          className=\"w-100\"\n          styling={{\n            height: \"30px\",\n            marginRight: \"10px\",\n            fontSize: \"12px\",\n            color: \"#red\",\n          }}\n          onSearch={handleOnSearch}\n          onSelect={handleOnSelect}\n        />\n      </div>\n      {\n        <DriverItem\n        key={companyDrivers}\n          drivers={companyDrivers}\n          handleToggleCardPositionHandler={props.handleToggleCardPosition}\n        />\n        }\n    </>\n  );\n};\n\nconst DriverTabComponent3 = (props) => {\n  const geoData = JSON.parse(localStorage.getItem(\"geofenceData\")) ? JSON.parse(localStorage.getItem(\"geofenceData\")) : [];\n  const [tableData, setTableData] = useState(geoData);\n  const [selectedCompanies, setSelectedCompanies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Function to handle search\n  const handleSearch = (query) => {\n\n    const fenceData = geoData.filter((item) => item.id === query.id);\n    setTableData(fenceData);\n  };\n\n  // Function to reset search\n  const resetSearch = () => {\n    setSearchQuery(\"\");\n  };\n\n  // Filter tableData based on searchQuery\n  const filteredTableData = tableData.filter((item) =>\n    item.company.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  const onConfirmDelete = (id) => {\n    const updatedData = tableData.filter((item) => item.id !== id);\n    setTableData(updatedData);\n\n    // const updatedLocalStorageData = geoData.filter((item) => item.id !== id);\n    // localStorage.setItem(\n    //   \"geofenceData\",\n    //   JSON.stringify(updatedLocalStorageData)\n    // );\n  };\n\n  const editDrawerOpen = (d) => {\n    // navigate(`/geofence/map/edit/${d.id}`);\n  };\n\n  const toggleAllData = (company) => {\n    let newSelectedCompanies;\n    if (selectedCompanies.includes(company)) {\n      newSelectedCompanies = selectedCompanies.filter((c) => c !== company);\n    } else {\n      newSelectedCompanies = [...selectedCompanies, company];\n    }\n    setSelectedCompanies(newSelectedCompanies);\n\n    const updatedData = tableData.map((item) => {\n      if (item.company === company) {\n        return { ...item, selected: !selectedCompanies.includes(company) };\n      }\n      return item;\n    });\n    setTableData(updatedData);\n  };\n\n  const toggleSingleData = (id) => {\n    const updatedData = tableData.map((item) => {\n      if (item.id === id) {\n        return { ...item, selected: !item.selected };\n      }\n      return item;\n    });\n    setTableData(updatedData);\n  };\n\n  // Group tableData by company name\n  const groupedData = tableData.reduce((acc, cur) => {\n    if (!acc[cur.company]) {\n      acc[cur.company] = [];\n    }\n    acc[cur.company].push(cur);\n    return acc;\n  }, {});\n\n  const items = tableData.map((data) => ({\n    id: data.id,\n    name: data.name,\n  }));\n\n  return (\n    <>\n      <div className=\"d-flex mt-4 mb-4\">\n        <ReactSearchAutocomplete\n          items={items}\n          // onSearch={handleSearch}\n          className=\"w-100\"\n          styling={{\n            height: \"30px\",\n            marginRight: \"10px\",\n            fontSize: \"12px\",\n            color: \"#red\",\n          }}\n          onSelect={handleSearch}\n        />\n      </div>\n      <div\n        className=\"d-flex flex-column p-2\"\n        style={{\n          marginTop: \".5rem\",\n          overflowY: \"scroll\",\n        }}\n      >\n        <GeoFenceItem\n          geoFences={groupedData}\n          handleToggleCardPositionHandler={props.handleToggleCardPosition}\n        />\n      </div>\n    </>\n  );\n};\nexport default DriverTab;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport MainPagetitle from \"../layouts/MainPagetitle\";\nimport ShowMap from \"../components/maps/ShowMap\";\nimport { ThemeContext } from \"../../context/ThemeContext\";\nimport DriverTab from \"../components/maps/DriverTab\";\nimport { TbLocationFilled } from \"react-icons/tb\";\nimport { FaUser } from \"react-icons/fa\";\nimport { FaMapLocationDot } from \"react-icons/fa6\";\nimport { MdFence } from \"react-icons/md\";\nimport \"../../scss/pages/_driver-tracking.scss\";\n\nimport {useTranslation} from 'react-i18next'\nimport { getVehiclesTraking } from \"../../services/api/VehicleService\";\nimport { notifyError } from \"../../utils/toast\";\nconst DriverTracking = () => {\n\n  const {t} = useTranslation();\n  const { currentPosition, setCurrentPosition } = useContext(ThemeContext);\n  const data = [\n    { lat: 30.7099475, lng: 76.6900474 },\n    { lat: 30.7333, lng: 76.7794 },\n  ];\n  const [isOutside, setIsOutside] = useState(true);\n  const tabData = [\n    { name: \"Object\", icon: TbLocationFilled },\n    { name: \"Driver\", icon: FaUser },\n    { name: \"Geofence\", icon: MdFence },\n  ];\n  const handleToggleCardPosition = () => {\n    setIsOutside(!isOutside);\n  };\n\n  const [vehicleIds, setVehicleIds] = useState([]);\n  const [vehicleStatus, setVehicleStatus] = useState(\"\");\n  const [trackingData, setTrackingData] = useState([]);\n  const [vehicleCounts, setVehicleCounts] = useState({});\n  const [centerCoordinate, setCenterCoordinate] = useState({});\n  \n  const getVehiclesStatus = async (ids) =>{\n    try{\n      const data = await getVehiclesTraking(ids ?? \"\", vehicleStatus);\n      setTrackingData(data?.data ?? []);\n      setVehicleCounts(data?.data?.count);\n      setCenterCoordinate(data?.data?.centerCoordinate);\n      return;\n    }catch(error){\n      notifyError(\"Some Error occured\")\n    }\n  }\n\n  const getVehiclesByIds = () => {\n    const queryString = vehicleIds.map(id => `id=${id}&`).join('');\n    getVehiclesStatus(queryString);\n  }\n\n  useEffect(() => {\n    let intervalId;\n    if(vehicleIds.length) {\n      getVehiclesByIds();\n\n      intervalId = setInterval(() => {\n        getVehiclesByIds();\n      }, 120000);\n    }\n    \n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [vehicleIds])\n  \n\n  // const getCurrentPosition = () => {\n  //   navigator.geolocation.getCurrentPosition((position) => {\n  //     setCurrentPosition({\n  //       lat: position.coords.latitude,\n  //       lng: position.coords.longitude\n  //     });\n  //   });\n  // };\n  // const [locationData, setLocationData] = useState([{lat:30.7099475,lng:76.6900474}])\n  // useEffect(() => {\n  //   getCurrentPosition()\n  // }, []);\n  return (\n    <>\n      <MainPagetitle\n        mainTitle={t('vehicleTracking')}\n        pageTitle={t('vehicleTracking')}\n        parentTitle={t('tracking')}\n      />\n      <div\n        className={`backdrop ${isOutside ? \"d-none\" : \"d-block\"}`}\n        onClick={() => setIsOutside(true)}\n      />\n      <div className=\"p-2\" >\n        <ShowMap data={data} trackingData={trackingData} centerCoordinate={centerCoordinate} />\n      </div>\n      {/* <div style={{zIndex : 20}}> */}\n        <DriverTab\n          tabData={tabData}\n          setVehicleIds={setVehicleIds}\n          getVehiclesByIds={getVehiclesByIds}\n          vehicleIds={vehicleIds}\n          setVehicleStatus={setVehicleStatus}\n          vehicleCounts={vehicleCounts}\n          handleToggleCardPosition={handleToggleCardPosition}\n          isOutside={isOutside}\n        />\n      {/* </div> */}\n    </>\n  );\n};\nexport default DriverTracking;"],"names":["props","checked","setChecked","useState","expanded","setExpanded","nodes","setNodes","useEffect","data","companyVehicle","map","_data$vehicles","childNode","vehicles","subItem","label","vehicleName","value","_id","companyName","children","vehicleIds","ele","_ele$children","vehicle","push","handleCheck","setVehicleIds","_jsxs","_Fragment","_jsx","className","CheckboxTree","onCheck","onExpand","showNodeIcon","icons","expandOpen","class","expandClose","uncheck","style","fontSize","check","halfCheck","Button","variant","type","onClick","handleSubmit","getVehiclesByIds","handleToggleCardPositionHandler","_ref","geoFences","Object","entries","_ref2","company","fences","fence","name","id","JSON","parse","drivers","firstName","selectedObject","console","log","DriverTabComponent1","_localStorage","_localStorage2","setVehicleStatus","vehicleCounts","running","idle","stopped","inactive","nodata","total","selectValue","setSelectValue","setVehicles","setCompanyVehicle","async","_data$data","getVehiclesByCompany","search","e","notifyError","getVehiclesList","items","localStorage","getItem","filter","item","designation","pill","ReactSearchAutocomplete","styling","height","marginRight","color","onSearch","string","getVehicles","onSelect","vehicleData","convertedData","length","reduce","acc","dataArray","CompanyItem","handleToggleCardPosition","DriverTabComponent2","selectAll","setSelectAll","selectedDrivers","setSelectedDrivers","selectDriver","setSelectDriver","filterApplied","setFilterApplied","isDisable","setIsDisable","jsonData","companyDrivers","setCompanyDrivers","setCompany","role","setDrivers","allocated","activityStatus","notAllocated","newCompanyDrivers","parentCompany","userName","lastName","bg","handleOnSearch","results","selectedCompanyId","companyDriversData","driversForCompany","driver","DriverItem","DriverTabComponent3","geoData","tableData","setTableData","selectedCompanies","setSelectedCompanies","searchQuery","setSearchQuery","groupedData","toLowerCase","includes","cur","query","fenceData","marginTop","overflowY","GeoFenceItem","tabData","isOutside","componentData","timeStamp","status","allocatedDriver","notAllocatedDriver","totalDriver","components","IoIosArrowBack","IoIosArrowForward","Tab","Container","defaultActiveKey","Nav","as","i","Icon","icon","Item","Link","eventKey","Content","background","overflow","Component","Pane","DriverTracking","t","useTranslation","currentPosition","setCurrentPosition","useContext","ThemeContext","setIsOutside","TbLocationFilled","FaUser","MdFence","vehicleStatus","trackingData","setTrackingData","setVehicleCounts","centerCoordinate","setCenterCoordinate","_data$data2","_data$data3","getVehiclesTraking","ids","count","error","getVehiclesStatus","join","intervalId","setInterval","clearInterval","MainPagetitle","mainTitle","pageTitle","parentTitle","ShowMap","lat","lng","DriverTab"],"sourceRoot":""}