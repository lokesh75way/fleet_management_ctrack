{"version":3,"file":"static/js/8387.b364a421.chunk.js","mappings":"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","sources":["jsx/pages/Map.jsx","jsx/pages/GeofenceMap.jsx","services/api/GeoFenceService.js"],"sourcesContent":["import React from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Tooltip } from \"react-leaflet\";\nimport EditControlFC from \"../components/maps/EditControl\";\n\nconst Map = ({ geofenceHanlder, setValue, watch, getValues, errors }) => {\n  const [geojson, setGeojson] = React.useState({\n    type: \"FeatureCollection\",\n    features: [],\n  });\n  const mapId = watch(\"location\")?.length ?? 0;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"85vh\",\n        border: errors.location ? \"3px solid #ff5e5e\" : null,\n      }}\n    >\n      <div style={{ width: \"100%\" }}>\n        <MapContainer center={[25.2233, 55.2869]} zoom={14} zoomControl={false}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n          />\n          <Marker styles={{ background: \"red\" }} position={[25.2233, 55.2869]}>\n            <Popup>Dubai Trade Center</Popup>\n            <Tooltip>Dubai Trade Center</Tooltip>\n          </Marker>\n\n          <EditControlFC\n            key={mapId}\n            setValues={setValue}\n            geofenceHanlder={geofenceHanlder}\n            watch={watch}\n            getValues={getValues}\n          />\n        </MapContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport Map from \"./Map\";\nimport CustomInput from \"../../components/Input/CustomInput\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { geofenceMapSchema } from \"../../utils/yup\";\nimport { categoryOptions, toleranceOptions } from \"@/constants/options\";\nimport { Button } from \"react-bootstrap\";\nimport Error from \"../../components/Error/Error\";\nimport { notifyError, notifySuccess } from \"../../utils/toast\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  createGeofenceData,\n  getGeofenceById,\n  updateGeofence,\n} from \"../../services/api/GeoFenceService\";\n\nimport { useTranslation } from \"react-i18next\";\nimport CompanyDropdown from \"../../features/company/components/DropDownList\";\n\nconst GeofenceDetail = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [defaultData, setDefaultData] = useState();\n  const [tempValue, setTempValue] = useState();\n  const [groupId, setGroupId] = useState(null);\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [companyId, setCompanyId] = useState();\n  const [companyDisabled, setCompanyDisabled] = useState(false);\n  const userDetails = JSON.parse(localStorage.getItem(\"userDetails\"));\n\n  const customStyles = {\n    control: (base) => ({\n      ...base,\n      padding: \".25rem 0 \", // Adjust the height as needed\n    }),\n  };\n\n  const getGeofenceDataById = async () => {\n    if (id) {\n      const { data } = await getGeofenceById(id);\n      setDefaultData(data);\n      reset(data);\n      setSelectedOption(data.geofenceAccess);\n    }\n  };\n\n  useEffect(() => {\n    if (userDetails.user.role === \"COMPANY\") {\n      setValue(\"businessGroupId\", userDetails?.user.businessGroupId);\n      setGroupId(userDetails?.user.businessGroupId);\n\n      setValue(\"companyId\", userDetails?.user.companyId);\n      setCompanyId(userDetails?.user.companyId);\n      setCompanyDisabled(true);\n    }\n    if (userDetails.user.role === \"BUSINESS_GROUP\") {\n      setValue(\"businessGroupId\", userDetails?.user.businessGroupId);\n      setGroupId(userDetails?.user.businessGroupId);\n    }\n\n    if (id) {\n      getGeofenceDataById();\n    }\n  }, [id]);\n\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n    getValues,\n    control,\n    handleSubmit,\n    reset,\n  } = useForm({\n    resolver: yupResolver(geofenceMapSchema),\n    defaultValues: {\n      category: categoryOptions[0].value,\n      tolerance: toleranceOptions[0].value,\n    },\n  });\n  const handleChange = (e) => {\n    setSelectedOption(e.target.value);\n    setValue(\"geofenceAccess\", e.target.value);\n  };\n\n  const onSubmit = async (data) => {\n    try {\n      if (id) {\n        const { success } = await updateGeofence(id, data);\n        if (success) {\n          notifySuccess(\"Geofence updated successfully!\");\n          navigate(\"/settings/geofence\");\n        }\n        return;\n      } else {\n        const { success } = await createGeofenceData(data);\n        if (success) {\n          notifySuccess(\"New Geofence Created!\");\n          navigate(\"/settings/geofence\");\n        }\n        return;\n      }\n    } catch (error) {\n      console.log(error);\n      notifyError(\"Some error occured !!\");\n      return;\n    }\n  };\n\n  const Geofence = JSON.parse(localStorage.getItem(\"geofenceData\"));\n  const GeoData = Geofence?.filter((item) => item.id == id);\n  const [filteredGeoData, setFilteredGeoData] = useState(GeoData);\n  const { t } = useTranslation();\n  return (\n    <div>\n      <div style={{ padding: \"10px\", backgroundColor: \"#FFFDFD\" }}>\n        <h2 style={{ fontSize: \"20px\" }}>{t(\"geofenceDetail\")}l</h2>\n      </div>\n\n      <div className=\"\" style={{ display: \"flex\", height: \"88vh\" }}>\n        <div\n          className=\"col-md-3\"\n          style={{\n            padding: \"15px\",\n            boxShadow: \"9px 0 4px rgba(0, 0, 0, 0.1)\",\n            backgroundColor: \"#fff\",\n            overflow: \"auto\",\n          }}\n        >\n          <FormProvider>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  {t(\"company\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"company\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <CompanyDropdown\n                      key={groupId}\n                      groupId={groupId}\n                      onChange={(newValue) => {\n                        setValue(\"company\", newValue.value);\n                        setValue(\"companyName\", newValue.value);\n                        setCompanyId(newValue.value);\n                      }}\n                      value={value}\n                      customStyles={customStyles}\n                      ref={ref}\n                      isDisabled={companyDisabled}\n                      name={name}\n                    />\n                  )}\n                />\n                <Error errorName={errors.company} />\n              </div>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  {t(\"name\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  label=\"Name\"\n                  register={register}\n                  name=\"name\"\n                  // defaultValue={\n                  //   filteredGeoData[0] ? filteredGeoData[0].name : \"\"\n                  // }\n                />\n                <Error errorName={errors.name} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  {t(\"category\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"category\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"category\", newValue.value);\n                      }}\n                      options={categoryOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      value={{ value, label: value }}\n                    />\n                  )}\n                />\n                {!getValues(\"category\") && (\n                  <Error errorName={errors.category} />\n                )}\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  {t(\"geofenceAccess\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <div\n                  style={{ display: \"flex\", flexDirection: \"row\", gap: \"5rem\" }}\n                >\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"PUBLIC\"\n                      checked={selectedOption === \"PUBLIC\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">{t(\"public\")}</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"PRIVATE\"\n                      checked={selectedOption === \"PRIVATE\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">{t(\"private\")}</label>\n                  </div>\n                </div>\n                {!getValues(\"geofenceAccess\") && (\n                  <Error errorName={errors.geofenceAccess} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"contactNumber\" className=\"form-label\">\n                  {t(\"contactNumber\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"number\"\n                  register={register}\n                  label=\"Contact Number\"\n                  name=\"contactNumber\"\n                  min=\"0\"\n                  onInput={(e) => {\n                    const temp = Math.max(0, e.target.value);\n                    e.target.value = temp < 1 ? \"\" : temp;\n                  }}\n                  // defaultValue={\n                  //   filteredGeoData[0] ? filteredGeoData[0].contactNumber : \"\"\n                  // }\n                />\n                <Error errorName={errors.contactNumber} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"address\" className=\"form-label\">\n                  {t(\"address\")}:\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"address\")}\n                  label=\"Address\"\n                  name=\"address\"\n                  // defaultValue={\n                  //   filteredGeoData[0] ? filteredGeoData[0].address : \"\"\n                  // }\n                />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  {t(\"tolerance\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"tolerance\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"tolerance\", newValue.value);\n                      }}\n                      options={toleranceOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      value={{ label: value, value: value }}\n                    />\n                  )}\n                />\n                {!getValues(\"tolerance\") && (\n                  <Error errorName={errors.tolerance} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">{t(\"description\")}:</label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"description\")}\n                  name=\"description\"\n                  label=\"Description\"\n                  // defaultValue={\n                  //   filteredGeoData[0] ? filteredGeoData[0].description : \"\"\n                  // }\n                />\n              </div>\n              {!getValues(\"location\") && <Error errorName={errors.location} />}\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  margin: \"2rem 0\",\n                }}\n              >\n                <Button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n                  {\" \"}\n                  {t(\"submit\")}\n                </Button>\n              </div>\n            </form>\n          </FormProvider>\n        </div>\n\n        {/* Right side */}\n        <div className=\"col-md-9\" style={{ paddingLeft: \"15px\" }}>\n          <Map\n            setValue={setValue}\n            watch={watch}\n            getValues={getValues}\n            defaultValues={defaultData}\n            errors={errors}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeofenceDetail;\n","import axios from \"axios\";\n\nexport const getGeofenceData = async (pageNo = 1, limit = 10) => {\n  const data = await axios.get(`/geofences?page=${pageNo}&limit=${limit}`);\n  return data.data.data;\n};\n\nexport const deleteGeofenceData = async (id) => {\n  const { data } = await axios.delete(`/geofences/${id}`);\n  return data;\n};\n\nexport const createGeofenceData = async (body) => {\n  const { data } = await axios.post(\"/geofences\", body);\n  return data;\n};\n\nexport const getGeofenceById = async (id) => {\n  const { data } = await axios.get(`/geofences/${id}`);\n  return data;\n};\n\nexport const updateGeofence = async (id, body) => {\n  const { data } = await axios.patch(`/geofences/${id}`, body);\n  return data;\n};\n"],"names":["_ref","_watch$length","_watch","geofenceHanlder","setValue","watch","getValues","errors","geojson","setGeojson","React","type","features","mapId","length","_jsx","style","display","height","border","location","children","width","_jsxs","MapContainer","center","zoom","zoomControl","TileLayer","attribution","url","Marker","styles","background","position","Popup","Tooltip","EditControlFC","setValues","GeofenceDetail","selectedOption","setSelectedOption","useState","defaultData","setDefaultData","tempValue","setTempValue","groupId","setGroupId","navigate","useNavigate","id","useParams","companyId","setCompanyId","companyDisabled","setCompanyDisabled","userDetails","JSON","parse","localStorage","getItem","customStyles","control","base","padding","useEffect","user","role","businessGroupId","async","data","getGeofenceById","reset","geofenceAccess","getGeofenceDataById","register","formState","handleSubmit","useForm","resolver","yupResolver","geofenceMapSchema","defaultValues","category","categoryOptions","value","tolerance","toleranceOptions","handleChange","e","target","onSubmit","success","updateGeofence","notifySuccess","createGeofenceData","error","console","log","notifyError","Geofence","GeoData","filter","item","filteredGeoData","setFilteredGeoData","t","useTranslation","backgroundColor","fontSize","className","boxShadow","overflow","FormProvider","htmlFor","Controller","name","rules","required","render","field","onChange","ref","CompanyDropdown","newValue","isDisabled","Error","errorName","company","CustomInput","label","_ref2","Select","options","flexDirection","gap","checked","min","onInput","temp","Math","max","contactNumber","_ref3","justifyContent","margin","Button","onClick","paddingLeft","Map","getGeofenceData","pageNo","arguments","undefined","limit","axios","get","deleteGeofenceData","delete","post","body","patch"],"sourceRoot":""}