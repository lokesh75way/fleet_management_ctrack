{"version":3,"file":"static/js/1384.52510cdd.chunk.js","mappings":"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","sources":["features/auth/api.js","features/auth/pages/ResetPassword.jsx"],"sourcesContent":["import { axiosInstance as axios } from \"@/services/api\";\n\nexport function signUp(data) {\n  return axios.post(`/auth/register`, data);\n}\n\nexport async function login({ email, password }) {\n  const postData = {\n    email,\n    password,\n    returnSecureToken: true,\n  };\n\n  const { data } = await axios.post(`/auth/login`, postData);\n  return data?.data;\n}\n\nexport const changePassword = async (body) => {\n  return axios.put(\"/auth/change-password\", body);\n};\n\nexport const forgotPassword = async (body) => {\n  const response = await axios.post(\"/auth/forgot-password\", body);\n  return response;\n};\n\nexport const resetPassword = async (body) => {\n  const response = await axios.put(\"/auth/reset-password\", body);\n  return response;\n};\n","import React, { useContext } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\n\nimport logo from \"@/assets/images/logo/logo-full.png\";\nimport LogoWhite from \"@/assets/images/logo/logofull-white.png\";\nimport { ThemeContext } from \"@/context/ThemeContext\";\nimport { resetPassword as resetPasswordSchema } from \"@/utils/yup\";\nimport CustomInput from \"@/components/Input/CustomInput\";\nimport { notifySuccess } from \"@/utils/toast\";\nimport { resetPassword } from \"../api\";\n\nconst ResetPassword = () => {\n  const { background } = useContext(ThemeContext);\n\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm({\n    defaultValues: {\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n    resolver: yupResolver(resetPasswordSchema),\n  });\n\n  const nav = useNavigate();\n  const onSubmit = async ({ newPassword }) => {\n    const token = window.location.pathname.split(\"/\")[2];\n    const data = {\n      password: newPassword,\n      token: token,\n    };\n    console.log(data);\n    const response = await resetPassword(data);\n    if (response?.data?.success) {\n      notifySuccess(\"Password Reset Successfully\");\n      nav(\"/login\");\n    } else {\n      notifySuccess(\"Password Reset Failed\");\n    }\n    // nav(\"/login\");\n  };\n  return (\n    <>\n      <div className=\"authincation\">\n        <div className=\"container\">\n          <div className=\"row justify-content-center h-100 align-items-center\">\n            <div className=\"col-md-6\">\n              <div className=\"authincation-content\">\n                <div className=\"row no-gutters\">\n                  <div className=\"col-xl-12\">\n                    <div className=\"auth-form\">\n                      <div className=\"text-center mb-3\">\n                        <Link to=\"/dashboard\">\n                          {background.value === \"light\" ? (\n                            <img src={logo} alt=\"\" />\n                          ) : (\n                            <img src={LogoWhite} alt=\"\" />\n                          )}\n                        </Link>\n                      </div>\n                      <h4 className=\"text-center mb-4\">Reset Password</h4>\n                      <form onSubmit={handleSubmit(onSubmit)}>\n                        <div className=\"mb-3\">\n                          <label>\n                            <strong>New Password</strong>\n                          </label>\n                          <CustomInput\n                            type=\"password\"\n                            className=\"form-control\"\n                            register={register}\n                            name=\"newPassword\"\n                            label=\"New Password\"\n                          />\n                          {errors.newPassword && (\n                            <div className=\"text-danger fs-12\">\n                              {errors.newPassword.message}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"mb-3\">\n                          <label>\n                            <strong>Confirm Password</strong>\n                          </label>\n                          <CustomInput\n                            type=\"password\"\n                            className=\"form-control\"\n                            defaultValue=\"Password\"\n                            register={register}\n                            name=\"confirmPassword\"\n                            label=\"Confirm Password\"\n                          />\n                          {errors.confirmPassword && (\n                            <div className=\"text-danger fs-12\">\n                              {errors.confirmPassword.message}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"text-center\">\n                          <button\n                            type=\"submit\"\n                            className=\"btn btn-primary btn-block\"\n                          >\n                            Reset\n                          </button>\n                        </div>\n                      </form>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ResetPassword;\n"],"names":["async","login","_ref","email","password","postData","returnSecureToken","data","axios","post","forgotPassword","body","resetPassword","put","ResetPassword","background","useContext","ThemeContext","register","formState","errors","handleSubmit","useForm","defaultValues","newPassword","confirmPassword","resolver","yupResolver","resetPasswordSchema","nav","useNavigate","_jsx","_Fragment","children","className","_jsxs","Link","to","value","src","logo","alt","LogoWhite","onSubmit","_response$data","token","window","location","pathname","split","console","log","response","success","notifySuccess","CustomInput","type","name","label","message","defaultValue"],"sourceRoot":""}