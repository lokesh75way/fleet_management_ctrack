{"version":3,"file":"static/js/3619.dd881034.chunk.js","mappings":"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","sources":["jsx/pages/Map.jsx","jsx/pages/GeofenceMap.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { createRoot } from 'react-dom/client';\nimport { MapContainer, TileLayer, GeoJSON,Marker,Popup ,Tooltip} from 'react-leaflet';\nimport EditControlFC from '../components/maps/EditControl';\n\nconst Map = () => {\n  const [geojson, setGeojson] = React.useState({\n    type: 'FeatureCollection',\n    features: [],\n  });\n\n  return (\n    <div style={{ display: 'flex', height: '85vh' }}>\n    <div style={{ width: '100%' }}>\n      <MapContainer\n        center={[ 25.2233, 55.2869]}\n        zoom={14}\n        zoomControl={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n        />\n        <Marker styles={{background:'red'}} position={[ 25.2233, 55.2869]} ><Popup>Dubai Trade Center</Popup><Tooltip>Dubai Trade Center</Tooltip></Marker>\n        <EditControlFC geojson={geojson} setGeojson={setGeojson} />\n      </MapContainer>\n    </div>\n  </div>\n  );\n}\n\nexport default Map","import React, { useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\nimport { ChromePicker } from \"react-color\";\nimport Select from \"react-select\";\nimport Map from \"./Map\";\nimport { BiNoEntry } from \"react-icons/bi\";\nimport CustomInput from \"../components/Input/CustomInput\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { geofenceMapSchema } from \"../../yup\";\nimport {\n  categoryOptions,\n  toleranceOptions,\n} from \"../components/TabComponent/VehicleTabs/Options\";\nimport { Button } from \"react-bootstrap\";\nimport Error from \"../components/Error/Error\";\nimport { notifyError, notifySuccess } from \"../../utils/toast\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport {useTranslation} from 'react-i18next'\n\nconst GeofenceDetail = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [tempValue, setTempValue] = useState();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const mapContainerStyle = {\n    height: \"100%\",\n    width: \"100%\",\n  };\n  const customStyles = {\n    control: (base) => ({\n      ...base,\n      padding: \".25rem 0 \", // Adjust the height as needed\n    }),\n  };\n\n  const defaultCenter = {\n    lat: -3.745,\n    lng: -38.523,\n  };\n\n  const [map, setMap] = useState(null);\n\n  const onLoad = React.useCallback(\n    function callback(map) {\n      const bounds = new window.google.maps.LatLngBounds(defaultCenter);\n      map.fitBounds(bounds);\n      setMap(map);\n    },\n    [defaultCenter]\n  );\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  // const handleColorChange = (color) => {\n  //   setFormData((prevData) => ({ ...prevData, color: color.hex }));\n  // };\n\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    getValues,\n    control,\n    handleSubmit,\n  } = useForm({\n    resolver: yupResolver(geofenceMapSchema),\n  });\n  const handleChange = (e) => {\n    setSelectedOption(e.target.value);\n    setValue(\"geofenceAccess\", e.target.value);\n  };\n\n  const onSubmit = (data) => {\n    try {\n      if (id) {\n        const val = JSON.parse(localStorage.getItem(\"geofenceData\"));\n        const indexToUpdate = val.findIndex((item) => item.id == id);\n        if (indexToUpdate !== -1) {\n          val[indexToUpdate] = { ...data, id };\n          localStorage.setItem(\"geofenceData\", JSON.stringify(val));\n          notifySuccess(\"Geofence Updated!\");\n          navigate(\"/vehicle-tracking\");\n        }\n        return;\n      } else {\n        data = { ...data };\n        const existingData = JSON.parse(localStorage.getItem(\"geofenceData\"));\n        data.id = existingData.length + 1;\n        existingData.push(data);\n        localStorage.setItem(\"geofenceData\", JSON.stringify(existingData));\n\n        notifySuccess(\"New Geofence Created!\");\n        navigate(\"/vehicle-tracking\");\n        return;\n      }\n    } catch (error) {\n      notifyError(\"Some error occured !!\");\n    }\n  };\n\n  const Geofence = JSON.parse(localStorage.getItem(\"geofenceData\"));\n  const GeoData = Geofence.filter((item) => item.id == id);\n\n  const [filteredGeoData, setFilteredGeoData] = useState(GeoData);\n  const {t} = useTranslation();\n  return (\n    <div>\n      <div style={{ padding: \"10px\", backgroundColor: \"#FFFDFD\" }}>\n        <h2 style={{ fontSize: \"20px\" }}>{t('geofenceDetail')}l</h2>\n      </div>\n\n      <div className=\"\" style={{ display: \"flex\", height: \"88vh\" }}>\n        <div\n          className=\"col-md-3\"\n          style={{\n            padding: \"15px\",\n            boxShadow: \"9px 0 4px rgba(0, 0, 0, 0.1)\",\n            backgroundColor: \"#fff\",\n            overflow: \"auto\",\n          }}\n        >\n          <FormProvider>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  {t('company')}:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  name=\"company\"\n                  register={register}\n                  label=\"Company\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].company : \"\"\n                  }\n                />\n                <Error errorName={errors.company} />\n              </div>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                {t('name')}:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  label=\"Name\"\n                  register={register}\n                  name=\"name\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].name : \"\"\n                  }\n                />\n                <Error errorName={errors.name} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                {t('category')}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"category\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"category\", newValue.value);\n                      }}\n                      options={categoryOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      defaultValue={\n                        filteredGeoData[0]\n                          ? filteredGeoData[0].name\n                          : categoryOptions[0]\n                      }\n                    />\n                  )}\n                />\n                {!getValues(\"category\") && (\n                  <Error errorName={errors.category} />\n                )}\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                {t('geofenceAccess')}:<span className=\"text-danger\">*</span>\n                </label>\n                <div\n                  style={{ display: \"flex\", flexDirection: \"row\", gap: \"5rem\" }}\n                >\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"public\"\n                      checked={selectedOption === \"public\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">{t('public')}</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"private\"\n                      checked={selectedOption === \"private\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">{t('private')}</label>\n                  </div>\n                </div>\n                {!getValues(\"geofenceAccess\") && (\n                  <Error errorName={errors.geofenceAccess} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"contactNumber\" className=\"form-label\">\n                {t('contactNumber')}:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"number\"\n                  register={register}\n                  label=\"Contact Number\"\n                  name=\"contactNumber\"\n                  min=\"0\"\n                  onInput={(e)=>{const temp = Math.max(0, e.target.value); e.target.value = temp < 1 ? '': temp}}\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].contactNumber : \"\"\n                  }\n                />\n                <Error errorName={errors.contactNumber} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"address\" className=\"form-label\">\n                {t('address')}:\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"address\")}\n                  label=\"Address\"\n                  name=\"address\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].address : \"\"\n                  }\n                />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                {t('tolerance')}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"tolerance\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"tolerance\", newValue.value);\n                      }}\n                      options={toleranceOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      defaultValue={\n                        filteredGeoData[0]\n                          ? filteredGeoData[0].name\n                          : toleranceOptions[0]\n                      }\n                    />\n                  )}\n                />\n                {!getValues(\"tolerance\") && (\n                  <Error errorName={errors.tolerance} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">{t('description')}:</label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"description\")}\n                  name=\"description\"\n                  label=\"Description\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].description : \"\"\n                  }\n                />\n              </div>\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  margin: \"2rem 0\",\n                }}\n              >\n                <Button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n                  {\" \"}\n                  {t('next')}\n                </Button>\n              </div>\n            </form>\n          </FormProvider>\n        </div>\n\n        {/* Right side */}\n        <div className=\"col-md-9\" style={{ paddingLeft: \"15px\" }}>\n          <Map />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeofenceDetail;\n"],"names":["Map","geojson","setGeojson","React","type","features","_jsx","style","display","height","children","width","_jsxs","MapContainer","center","zoom","zoomControl","TileLayer","attribution","url","Marker","styles","background","position","Popup","Tooltip","EditControlFC","GeofenceDetail","selectedOption","setSelectedOption","useState","tempValue","setTempValue","navigate","useNavigate","id","useParams","customStyles","control","base","padding","defaultCenter","lat","lng","map","setMap","register","formState","errors","setValue","getValues","handleSubmit","bounds","window","google","maps","LatLngBounds","fitBounds","useForm","resolver","yupResolver","geofenceMapSchema","handleChange","e","target","value","onSubmit","data","val","JSON","parse","localStorage","getItem","indexToUpdate","findIndex","item","setItem","stringify","notifySuccess","existingData","length","push","error","notifyError","GeoData","filter","filteredGeoData","setFilteredGeoData","t","useTranslation","backgroundColor","fontSize","className","boxShadow","overflow","FormProvider","htmlFor","CustomInput","name","label","defaultValue","company","Error","errorName","Controller","rules","required","render","_ref","field","onChange","ref","Select","newValue","options","categoryOptions","category","flexDirection","gap","checked","geofenceAccess","min","onInput","temp","Math","max","contactNumber","address","_ref2","toleranceOptions","tolerance","description","justifyContent","margin","Button","onClick","paddingLeft"],"sourceRoot":""}