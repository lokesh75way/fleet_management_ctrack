{"version":3,"file":"static/js/4492.d1fd4ef0.chunk.js","mappings":"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","sources":["jsx/components/TimeZoneSelector.js","components/Input/LocationSelector.jsx","components/Input/UserDetailsForm.jsx","features/branch/components/Form.jsx","hooks/useUserLocation.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ct from \"countries-and-timezones\";\nimport Select from \"react-select\";\nimport { useTranslation } from \"react-i18next\";\n\nconst TimeZoneSelector = ({\n  countryCode,\n  customStyle,\n  setValue,\n  id,\n  dValues,\n  Comptype,\n}) => {\n  const { t } = useTranslation();\n  const [timezones, setTimezones] = useState([]);\n  const [selectedTimezone, setSelectedTimezone] = useState(null);\n  useEffect(() => {\n    const country = ct.getCountry(countryCode);\n    if (country) {\n      const timezoneList = country.timezones;\n      if (timezoneList && timezoneList.length > 0) {\n        setTimezones(\n          timezoneList.map((timezone) => ({\n            label: `(GMT ${getGMTOffset(timezone)}) ${timezone} `,\n            value: timezone,\n          }))\n        );\n        // Set default timezone to the first one in the list\n        setSelectedTimezone({\n          label: `(GMT ${getGMTOffset(timezoneList[0])}) ${timezoneList[0]} `,\n          value: timezoneList[0],\n        });\n        setValue(\"timezone\", timezoneList[0]);\n      }\n    }\n  }, [countryCode]);\n\n  useEffect(() => {\n    if (dValues && id) {\n      const timezone =\n        Comptype === \"companyId\"\n          ? dValues.companyId?.timezone\n          : Comptype === \"businessGroupId\"\n            ? dValues.businessGroupId?.timezone\n            : dValues.timezone;\n\n      setValue(\"timezone\", timezone);\n\n      if (timezone) {\n        setSelectedTimezone({\n          label: `(GMT ${getGMTOffset(timezone)}) ${timezone}`,\n          value: timezone,\n        });\n        console.log(selectedTimezone, \"hi\");\n      }\n    }\n  }, [dValues, id]);\n\n  const handleTimezoneChange = (selectedOption) => {\n    // console.log(selectedOption, \"ds:-\")\n    setValue(\"timezone\", selectedOption.value);\n    setSelectedTimezone(selectedOption);\n  };\n  const getGMTOffset = (timezone) => {\n    const offsetMinutes = ct.getTimezone(timezone).utcOffset;\n    const offsetHours = Math.abs(Math.floor(offsetMinutes / 60));\n    const offsetMinutesRemainder = Math.abs(offsetMinutes % 60);\n    const offsetSign = offsetMinutes >= 0 ? \"+\" : \"-\";\n    return `${offsetSign}${offsetHours}:${offsetMinutesRemainder.toString().padStart(2, \"0\")}`;\n  };\n\n  return (\n    <div className=\"col-xl-3\">\n      <label htmlFor=\"timezone\">{t(\"timezone\")}:</label>\n      <Select\n        id=\"timezone\"\n        value={selectedTimezone}\n        styles={customStyle}\n        onChange={handleTimezoneChange}\n        options={timezones}\n      />\n    </div>\n  );\n};\n\nexport default TimeZoneSelector;\n","import React, { useEffect, useState } from \"react\";\nimport { GetCountries, GetState, GetCity } from \"react-country-state-city/dist/cjs\";\nimport Error from \"../Error/Error\";\nimport CustomInput from \"./CustomInput\";\nimport Select from \"react-select\";\nimport TimeZoneSelector from \"../../jsx/components/TimeZoneSelector\";\nimport { useTranslation } from \"react-i18next\";\n\nconst customStyles = {\n  control: (base) => ({\n    ...base,\n    padding: \".25rem 0 \",\n  }),\n};\n\nconst LocationSelector = ({\n  register,\n  setValue,\n  errors,\n  getValues,\n  locationData,\n  dValues,\n  id,\n  showCity,\n  Comptype,\n  showtimeZone = true,\n}) => {\n  const { t } = useTranslation();\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [selectedState, setSelectedState] = useState(null);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [countriesList, setCountriesList] = useState([]);\n  const [stateList, setStateList] = useState([]);\n  const [cityList, setCityList] = useState([]);\n  const [countryCode, setCountryCode] = useState(\"IND\");\n  const [countryId, setCountryId] = useState(null);\n\n  useEffect(() => {\n    GetCountries().then((result) => {\n      setCountriesList(result);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (id) {\n      if (dValues?.city) {\n        setValue(\"city\", dValues.city);\n        setSelectedCity({\n          value: dValues.city,\n          label: dValues.city,\n        });\n      }\n      \n      if (dValues?.country) {\n        setValue(\"country\", dValues.country);\n        const option = countryOptions.find(\n          (option) => option.value === dValues?.country\n        );\n        if (option) handleCountryChange(option);\n      }\n      \n      if (dValues?.state) {\n        setValue(\"state\", dValues.state || \"\");\n        setSelectedState({\n          value: dValues.state,\n          label: dValues.state || \"\",\n        });\n        \n        // If we have both country and state, we can load cities\n        if (dValues?.country && dValues?.state && countryId) {\n          const stateObj = stateList.find(state => getStateName(state) === dValues.state);\n          if (stateObj) {\n            loadCities(countryId, stateObj.id);\n          }\n        }\n      }\n    } else {\n      if (locationData?.country?.isoAlpha3) {\n        setSelectedCountry({\n          value: locationData?.country?.isoAlpha3,\n          label: locationData?.country?.isoName,\n        });\n        setValue(\"country\", locationData?.country?.isoAlpha3);\n        setCountryCode(locationData?.country?.isoAlpha2);\n        \n        const selectedCountryId = isoToCountryId(locationData?.country?.isoAlpha3);\n        setCountryId(selectedCountryId);\n        \n        if (locationData?.location?.principalSubdivision) {\n          setSelectedState({\n            value: locationData?.location?.principalSubdivision,\n            label: locationData?.location?.principalSubdivision || \"\",\n          });\n          setValue(\"state\", locationData?.location?.principalSubdivision || \"\");\n          \n          GetState(selectedCountryId).then((result) => {\n            setStateList(result);\n            // Find state ID to load cities\n            const stateObj = result.find(state => \n              getStateName(state) === locationData?.location?.principalSubdivision);\n            if (stateObj) {\n              loadCities(selectedCountryId, stateObj.id);\n            }\n          });\n        } else {\n          GetState(selectedCountryId).then((result) => {\n            setStateList(result);\n          });\n        }\n        \n        if (locationData?.location?.city) {\n          setValue(\"city\", locationData?.location?.city);\n          setSelectedCity({\n            value: locationData?.location?.city,\n            label: locationData?.location?.city,\n          });\n        }\n      }\n    }\n  }, [locationData, id, dValues, countriesList]);\n\n  const isoToCountryId = (isoCode) => {\n    const country = countriesList.find((country) => country.iso3 === isoCode);\n    return country ? country.id : null;\n  };\n\n  const loadCities = async (countryId, stateId) => {\n    if (countryId && stateId) {\n      try {\n        const cities = await GetCity(countryId, stateId);\n        setCityList(cities);\n      } catch (error) {\n        console.error(\"Error loading cities:\", error);\n        setCityList([]);\n      }\n    } else {\n      setCityList([]);\n    }\n  };\n\n  const handleCountryChange = async (selectedOption) => {\n    const selectedIsoCode = selectedOption.value;\n    const selectedCountryId = isoToCountryId(selectedIsoCode);\n    setCountryId(selectedCountryId);\n\n    const selectedCountryObj = countriesList.find(\n      (country) => country.iso3 === selectedIsoCode\n    );\n    setCountryCode(selectedCountryObj.iso2);\n\n    setValue(\"country\", selectedIsoCode);\n    setSelectedCountry({ value: selectedIsoCode, label: selectedCountryObj.name });\n    setStateList([]);\n    setCityList([]);\n    setSelectedState(null);\n    setSelectedCity(null);\n    setValue(\"state\", \"\");\n    setValue(\"city\", \"\");\n    \n    const result = await GetState(selectedCountryId);\n    setStateList(result);\n  };\n\n  const handleStateChange = async (selectedOption) => {\n    const selectedStateName = selectedOption.value;\n    const selectedStateObj = stateList.find(\n      (state) => state.name === selectedStateName\n    );\n    \n    const stateName = getStateName(selectedStateObj);\n    setValue(\"state\", stateName);\n    setSelectedState({ value: stateName, label: stateName });\n    \n    // Reset city selection\n    setCityList([]);\n    setSelectedCity(null);\n    setValue(\"city\", \"\");\n    \n    // Load cities for the selected state\n    await loadCities(countryId, selectedStateObj.id);\n  };\n\n  const handleCityChange = (selectedOption) => {\n    const selectedCityName = selectedOption.value;\n    setValue(\"city\", selectedCityName);\n    setSelectedCity({ value: selectedCityName, label: selectedCityName });\n  };\n\n  const getStateName = (state) => {\n    if (\n      selectedCountry?.label === \"United Arab Emirates\" &&\n      state.name.endsWith(\" Emirate\")\n    ) {\n      return state.name.replace(\" Emirate\", \"\");\n    }\n    return state.name;\n  };\n\n  const countryOptions = countriesList.map((country) => ({\n    value: country.iso3,\n    label: country.name,\n  }));\n\n  const stateOptions = stateList.map((state) => ({\n    value: state.name,\n    label: getStateName(state),\n  }));\n\n  const cityOptions = cityList.map((city) => ({\n    value: city.name,\n    label: city.name,\n  }));\n\n  return (\n    <>\n      <div className=\"col-xl-3 mb-3\">\n        <label className=\"form-label\">{t(\"country\")}</label>\n        {\n          <Select\n            options={countryOptions}\n            key={`country-${selectedCountry?.value}`}\n            value={selectedCountry}\n            styles={customStyles}\n            onChange={handleCountryChange}\n          />\n        }\n        {!selectedCountry && <Error errorName={errors.country} />}\n      </div>\n      <div className=\"col-xl-3 mb-3\">\n        <label className=\"form-label\">{t(\"state\")}</label>\n        <Select\n          options={stateOptions}\n          key={`state-${selectedState?.value}`}\n          value={selectedState}\n          styles={customStyles}\n          onChange={handleStateChange}\n          isDisabled={!selectedCountry}\n        />\n        {!selectedState && <Error errorName={errors.state} />}\n      </div>\n      {showCity && (\n        <div className=\"col-xl-3 mb-3\">\n          <label className=\"form-label\">{t(\"city\")}</label>\n          {cityList.length > 0 ? (\n            <Select\n              options={cityOptions}\n              key={`city-${selectedCity?.value}`}\n              value={selectedCity}\n              styles={customStyles}\n              onChange={handleCityChange}\n              isDisabled={!selectedState}\n            />\n          ) : (\n            <CustomInput\n              type=\"text\"\n              register={register}\n              label=\"City\"\n              name=\"city\"\n              placeholder=\"\"\n              defaultValue={getValues(\"city\")}\n            />\n          )}\n          <Error errorName={errors.city} />\n        </div>\n      )}\n      {showCity && showtimeZone && (\n        <TimeZoneSelector\n          setValue={setValue}\n          id={id}\n          countryCode={countryCode}\n          customStyle={customStyles}\n          Comptype={Comptype}\n        />\n      )}\n    </>\n  );\n};\n\nexport default LocationSelector;\n","import React from \"react\";\nimport CustomInput from \"./CustomInput\";\nimport Error from \"../Error/Error\";\nimport { SVGICON } from \"../../constants/theme\";\nimport { t } from \"i18next\";\n\nconst UserDetailsForm = ({\n  field,\n  fields,\n  index,\n  register,\n  getValues,\n  errors,\n  remove,\n  id,\n}) => {\n  const handleRemoveForm = (index) => {\n    remove(index);\n  };\n\n  return (\n    <div key={field.id} className=\"row\">\n      <div className=\"d-flex align-items-center\">\n        {fields.length > 1 && (\n          <div className=\"flex-grow-1 mb-3\">\n            <h5>User {index + 1}</h5>\n          </div>\n        )}\n        {fields.length > 1 && (\n          <div className=\"mr-5\" onClick={() => handleRemoveForm(index)}>\n            {SVGICON.Delete}\n          </div>\n        )}\n      </div>\n      <div className=\"col-xl-3 mb-3\">\n        <label className=\"form-label\">\n          {t(\"name\")} <span className=\"text-danger\">*</span>\n        </label>\n        <CustomInput\n          type=\"text\"\n          register={register}\n          label=\"name\"\n          name={`userInfo.${index}.name`}\n          placeholder=\"\"\n          defaultValue={getValues(`userInfo.${index}.name`)}\n        />\n        <Error errorName={errors.userInfo?.[index]?.name} />\n      </div>\n      <div className=\"col-xl-3 mb-3\">\n        <label className=\"form-label\">\n          {t(\"designation\")} <span className=\"text-danger\">*</span>\n        </label>\n        <CustomInput\n          type=\"text\"\n          register={register}\n          label=\"designation\"\n          name={`userInfo.${index}.designation`}\n          placeholder=\"\"\n          defaultValue={getValues(`userInfo.${index}.designation`)}\n        />\n        <Error errorName={errors.userInfo?.[index]?.designation} />\n      </div>\n      <div className=\"col-xl-3 mb-3\">\n        <label className=\"form-label\">\n          {t(\"mobileNumber\")}\n          <span className=\"text-danger\">*</span>\n        </label>\n        <CustomInput\n          type=\"number\"\n          register={register}\n          name={`userInfo.${index}.mobileNumber`}\n          label=\"Mobile Number\"\n          placeholder=\"\"\n          min=\"0\"\n          onInput={(e) => {\n            const temp = Math.max(0, e.target.value);\n            e.target.value = temp < 1 ? \"\" : temp;\n          }}\n          defaultValue={getValues(`userInfo.${index}.mobileNumber`)}\n        />\n        <Error errorName={errors.userInfo?.[index]?.mobileNumber} />\n      </div>\n      <div className=\"col-xl-3 mb-3\">\n        <label className=\"form-label\">\n          {t(\"email\")}\n          <span className=\"text-danger\">*</span>\n        </label>\n        <CustomInput\n          type=\"email\"\n          register={register}\n          name={`userInfo.${index}.email`}\n          label=\"email\"\n          placeholder=\"\"\n          defaultValue={getValues(`userInfo.${index}.email`)}\n        />\n        <Error errorName={errors.userInfo?.[index]?.email} />\n      </div>\n    </div>\n  );\n};\n\nexport default UserDetailsForm;\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Controller, useFieldArray } from \"react-hook-form\";\nimport Select from \"react-select\";\nimport { useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nimport Error from \"@/components/Error/Error\";\nimport CustomInput from \"@/components/Input/CustomInput\";\nimport GroupDropdown from \"@/features/businessGroup/components/DropDownList\";\nimport CompanyDropdown from \"@/features/company/components/DropDownList\";\nimport FormField from \"@/components/Input/UserDetailsForm\";\nimport { dateFormatOptions, timeFormatOptions } from \"@/constants/options\";\nimport LocationSelector from \"@/components/Input/LocationSelector\";\nimport useUserLocation from \"@/hooks/useUserLocation\";\n\nconst customStyles = {\n  control: (base) => ({\n    ...base,\n    padding: \".25rem 0 \",\n  }),\n};\n\nconst BranchForm = ({\n  setValue,\n  getValues,\n  register,\n  onSubmit,\n  handleSubmit,\n  errors,\n  control,\n  isFormSubmitting,\n  watch,\n}) => {\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"userInfo\",\n  });\n  const [company, setCompany] = useState();\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const { location: locationData, error: locationError } = useUserLocation();\n\n  const handleAddForm = () => {\n    append({\n      name: \"\",\n      designation: \"\",\n      mobileNumber: null,\n      email: \"\",\n    });\n  };\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"row\" style={{ width: \"85%\", margin: \"auto\" }}>\n        <div>{locationError && <p>{locationError}</p>}</div>\n        <div className=\"col-xl-3 mb-3\">\n          <label className=\"form-label\">{t(\"businessGroup\")}</label>\n          <span className=\"text-danger\">*</span>\n\n          <Controller\n            name=\"businessGroupId\"\n            control={control}\n            rules={{ required: true }}\n            render={({ field: { onChange, value, name, ref } }) => (\n              <GroupDropdown\n                onChange={(newValue) => {\n                  if (getValues(\"businessGroupId\") != newValue.value) {\n                    setValue(\"businessGroupId\", newValue.value);\n                    setValue(\"companyName\", \"\");\n                    setValue(\"companyId\", \"\");\n                    setCompany(null);\n                  }\n                }}\n                defaultValue={value}\n                customStyles={customStyles}\n                ref={ref}\n                name={name}\n              />\n            )}\n          />\n\n          {!getValues(\"businessGroupId\") && (\n            <Error errorName={errors.businessGroupId} />\n          )}\n        </div>\n        <div className=\"col-xl-3 mb-3\">\n          <label className=\"form-label\">\n            {t(\"company\")}\n            <span className=\"text-danger\">*</span>\n          </label>\n\n          <Controller\n            name=\"companyId\"\n            control={control}\n            rules={{ required: true }}\n            render={({ field: { onChange, value, name, ref } }) => (\n              <CompanyDropdown\n                groupId={watch(\"businessGroupId\")}\n                onChange={(newValue) => {\n                  setValue(\"companyId\", newValue.value);\n                  setValue(\"companyName\", newValue.label);\n                  setCompany(newValue);\n                }}\n                defaultValue={value}\n                value={company}\n                customStyles={customStyles}\n                ref={ref}\n                name={name}\n              />\n            )}\n          />\n\n          {!getValues(\"companyId\") && <Error errorName={errors.companyId} />}\n        </div>\n\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">\n            {t(\"branchName\")} <span className=\"text-danger\">*</span>\n          </label>\n          <CustomInput\n            type=\"text\"\n            register={register}\n            required\n            label=\"Branch Name\"\n            name=\"branchName\"\n            placeholder=\"\"\n            defaultValue={getValues(\"branchName\")}\n          />\n          <Error errorName={errors.branchName} />\n        </div>\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">{t(\"tradeLicenseNumber\")}</label>\n          <CustomInput\n            type=\"text\"\n            register={register}\n            label=\"tradeLicenseNumber\"\n            name=\"tradeLicenseNumber\"\n            placeholder=\"\"\n            defaultValue={getValues(\"tradeLicenseNumber\")}\n          />\n          <Error errorName={errors.tradeLicenseNumber} />\n        </div>\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">{t(\"officeNo\")}</label>\n          <CustomInput\n            type=\"text\"\n            register={register}\n            label=\"officeNumber\"\n            name=\"officeNumber\"\n            placeholder=\"\"\n            defaultValue={getValues(\"officeNumber\")}\n          />\n          <Error errorName={errors.officeNumber} />\n        </div>\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">\n            {t(\"email\")}\n            <span className=\"text-danger\">*</span>\n          </label>\n          <CustomInput\n            type=\"email\"\n            register={register}\n            label=\"Email\"\n            name=\"email\"\n            placeholder=\"\"\n            defaultValue={getValues(\"email\")}\n            disabled={id ? true : false}\n          />\n          <Error errorName={errors.email} />\n        </div>\n        <LocationSelector\n          register={register}\n          setValue={setValue}\n          dValues={{\n            country: getValues(\"country\"),\n            state: getValues(\"state\"),\n            city: getValues(\"city\"),\n          }}\n          errors={errors}\n          getValues={getValues}\n          locationData={locationData}\n          id={id}\n          showCity={true}\n          Comptype={\"\"}\n        />\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">{t(\"dateFormat\")}</label>\n          <Controller\n            name=\"dateFormat\"\n            control={control}\n            render={({ field: { onChange, value, name, ref } }) => (\n              <Select\n                onChange={(newValue) => setValue(\"dateFormat\", newValue?.value)}\n                options={dateFormatOptions}\n                ref={ref}\n                name={name}\n                styles={customStyles}\n                value={\n                  dateFormatOptions.find((option) => option.value === value) ||\n                  dateFormatOptions[0]\n                }\n                defaultValue={dateFormatOptions[0]}\n              />\n            )}\n          />\n          <Error errorName={errors.dateFormat} />\n        </div>\n        <div className=\"col-xl-3 mb-3 \">\n          <label className=\"form-label\">{t(\"timeFormat\")}</label>\n          <Controller\n            name=\"timeFormat\"\n            control={control}\n            render={({ field: { onChange, value, name, ref } }) => (\n              <Select\n                onChange={(newValue) => setValue(\"timeFormat\", newValue.value)}\n                options={timeFormatOptions}\n                ref={ref}\n                name={name}\n                styles={customStyles}\n                value={\n                  timeFormatOptions.find((option) => option.value === value) ||\n                  timeFormatOptions[1]\n                }\n                defaultValue={timeFormatOptions[1]}\n              />\n            )}\n          />\n        </div>\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            margin: \"2rem 0\",\n          }}\n        >\n          <h3>{t(\"contactDetails\")}</h3>\n          <Button\n            type=\"button\"\n            onClick={handleAddForm}\n            style={{ width: \"10%\" }}\n          >\n            {t(\"add\")}\n          </Button>\n        </div>\n        {fields.map((field, index) => (\n          <FormField\n            key={field.id}\n            field={field}\n            index={index}\n            register={register}\n            getValues={getValues}\n            errors={errors}\n            fields={fields}\n            remove={remove}\n            id={id}\n          />\n        ))}\n      </div>\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          margin: \"2rem 0\",\n        }}\n      >\n        <Button\n          type=\"submit\"\n          disabled={isFormSubmitting}\n          onClick={handleSubmit(onSubmit)}\n          style={{ width: \"10%\" }}\n        >\n          {\" \"}\n          {t(\"submit\")}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default BranchForm;\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst useUserLocation = () => {\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [error, setError] = useState(null);\n  const [location, setLocation] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getLocation = async () => {\n    try {\n      setIsLoading(true);\n      const API_KEY = process.env.REACT_APP_BIG_DATA_CLOUD_API_KEY;\n      if (!API_KEY) {\n        throw new Error(\"API key is missing.\");\n      }\n\n      const response = await axios.get(\n        `https://api.bigdatacloud.net/data/ip-geolocation?key=${API_KEY}`\n      );\n\n      setLat(response.data.location.latitude);\n      setLng(response.data.location.longitude);\n      const locationData = response.data;\n      setLocation(locationData);\n      setError(null); // Reset error if location is successfully obtained\n    } catch (error) {\n      setError(\"Error getting location data: \" + error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  return { location, lat, lng, isLoading, error };\n};\n\nexport default useUserLocation;\n"],"names":["_ref","countryCode","customStyle","setValue","id","dValues","Comptype","t","useTranslation","timezones","setTimezones","useState","selectedTimezone","setSelectedTimezone","useEffect","country","ct","timezoneList","length","map","timezone","label","concat","getGMTOffset","value","_dValues$companyId","_dValues$businessGrou","companyId","businessGroupId","console","log","offsetMinutes","utcOffset","offsetHours","Math","abs","floor","offsetMinutesRemainder","toString","padStart","_jsxs","className","children","htmlFor","_jsx","Select","styles","onChange","selectedOption","options","customStyles","control","base","padding","register","errors","getValues","locationData","showCity","showtimeZone","selectedCountry","setSelectedCountry","selectedState","setSelectedState","selectedCity","setSelectedCity","countriesList","setCountriesList","stateList","setStateList","cityList","setCityList","setCountryCode","countryId","setCountryId","GetCountries","then","result","city","option","countryOptions","find","handleCountryChange","state","stateObj","getStateName","loadCities","_locationData$country","isoAlpha3","_locationData$country2","_locationData$country3","_locationData$country4","_locationData$country5","_locationData$country6","_locationData$locatio","_locationData$locatio6","isoName","isoAlpha2","selectedCountryId","isoToCountryId","_locationData$locatio2","_locationData$locatio3","_locationData$locatio4","_locationData$locatio7","_locationData$locatio8","_locationData$locatio9","location","principalSubdivision","GetState","_locationData$locatio5","isoCode","iso3","async","stateId","cities","GetCity","error","selectedIsoCode","selectedCountryObj","iso2","name","endsWith","replace","stateOptions","cityOptions","_Fragment","Error","errorName","selectedStateName","selectedStateObj","stateName","isDisabled","selectedCityName","CustomInput","type","placeholder","defaultValue","TimeZoneSelector","_errors$userInfo","_errors$userInfo$inde","_errors$userInfo2","_errors$userInfo2$ind","_errors$userInfo3","_errors$userInfo3$ind","_errors$userInfo4","_errors$userInfo4$ind","field","fields","index","remove","onClick","handleRemoveForm","SVGICON","Delete","userInfo","designation","min","onInput","e","temp","max","target","mobileNumber","email","onSubmit","handleSubmit","isFormSubmitting","watch","append","useFieldArray","company","setCompany","useParams","locationError","useUserLocation","style","width","margin","Controller","rules","required","render","_ref2","ref","GroupDropdown","newValue","_ref3","CompanyDropdown","groupId","branchName","tradeLicenseNumber","officeNumber","disabled","LocationSelector","_ref4","dateFormatOptions","dateFormat","_ref5","timeFormatOptions","display","justifyContent","Button","handleAddForm","FormField","lat","setLat","lng","setLng","setError","setLocation","isLoading","setIsLoading","API_KEY","process","response","axios","get","data","latitude","longitude","message","getLocation"],"sourceRoot":""}