{"version":3,"file":"static/js/1216.df4a2c02.chunk.js","mappings":"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","sources":["jsx/components/bootstrap/Accordion.js","jsx/layouts/PageTitle.js","../node_modules/react-bootstrap/esm/AccordionContext.js","../node_modules/react-bootstrap/esm/AccordionCollapse.js","../node_modules/react-bootstrap/esm/AccordionItemContext.js","../node_modules/react-bootstrap/esm/AccordionBody.js","../node_modules/react-bootstrap/esm/AccordionButton.js","../node_modules/react-bootstrap/esm/AccordionHeader.js","../node_modules/react-bootstrap/esm/AccordionItem.js","../node_modules/react-bootstrap/esm/Accordion.js","../node_modules/react-bootstrap/esm/createChainedFunction.js","../node_modules/react-bootstrap/esm/Collapse.js"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport { Link } from \"react-scroll\";\r\nimport Highlight from 'react-highlight';\r\nimport { Row, Col, Card, Accordion, Tab, Nav } from \"react-bootstrap\";\r\n\r\n\r\nimport PageTitle from \"../../layouts/PageTitle\";\r\n\r\nconst UiAccordion = () => {\r\n\t  const defaultAccordion = [\r\n    {\r\n      title: \"Accordion Header One\",\r\n      text:\r\n        \"Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod.\",\r\n      bg: \"primary\",\r\n\t  \r\n    },\r\n    {\r\n      title: \"Accordion Header Two\",\r\n      text:\r\n        \"Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod.\",\r\n\r\n      bg: \"info\",\r\n\t  \r\n    },\r\n    {\r\n      title: \"Accordion Header Three\",\r\n      text:\r\n        \"Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod.\",\r\n      bg: \"success\",\r\n\t  \r\n    },\r\n  ];\r\n  \r\n  // console.log(defaultAccordion);\r\n  const sidebarData = [\r\n    {title: 'Default Accordion', to:'accordion-one', select:''},\r\n    {title: 'Accordion Bordered', to:'accordion-two', select:''},\r\n    {title: 'Accordion without space', to:'accordion-three', select:''},\r\n    {title: 'Accordion without space with border', to:'accordion-four', select:''},\r\n    {title: 'Accordion indicator in left position', to:'accordion-five', select:''},\r\n    {title: 'Accordion with icon', to:'accordion-six', select:''},\r\n    {title: 'Accordion header background', to:'accordion-seven', select:''},\r\n    {title: 'Accordion solid background', to:'accordion-eight', select:''},\r\n    {title: 'Accordion active background', to:'accordion-nine', select:''},\r\n    {title: 'Accordion header shadow', to:'accordion-ten', select:''},\r\n    {title: 'Accordion Rounded Stylish', to:'accordion-eleven', select:''},\r\n    {title: 'Accordion Gradient', to:'accordion-twelve', select:''},\r\n    \r\n  ];\r\n\r\n  const [activeLink ,setActiveLink] = useState(0);\r\n  return (\r\n    <Fragment>\r\n         <PageTitle activeMenu=\"Accordion\" motherMenu=\"Bootstrap\" pageContent=\"Accordion\" />\r\n          <div className=\"container-fluid\">\r\n            <div className=\"element-area\">\r\n              <div className=\"demo-view\">\r\n                <div className=\"container-fluid pt-0 ps-0 pe-lg-4 pe-0\">\r\n                  <Row>\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-one\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                    <Card.Title>Default Accordion</Card.Title>\r\n                                    <Card.Text className=\"m-0 subtitle\">\r\n                                      Default accordion. Add <code>accordion</code> class in root\r\n                                    </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                      <Accordion className=\"accordion accordion-primary\" defaultActiveKey=\"0\">\r\n                                        {defaultAccordion.map((d, i) => (\r\n                                            <Accordion.Item className=\"accordion-item\" key={i} eventKey={`${i}`}>\r\n                                              <Accordion.Header className=\"accordion-header rounded-lg\">\r\n                                                {d.title}\r\n                                              </Accordion.Header>\r\n                                              <Accordion.Collapse eventKey={`${i}`}>\r\n                                                <div className=\"accordion-body\">{d.text}</div>\r\n                                              </Accordion.Collapse>\r\n                                            </Accordion.Item>\r\n                                        ))}\r\n                                      </Accordion>\t\t\t\t\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-primary\" defaultActiveKey=\"0\">\r\n    {defaultAccordion.map((d, i) => (\r\n        <Accordion.Item className=\"accordion-item\" key={i} eventKey={\\`$/{i}\\`}>\r\n          <Accordion.Header className=\"accordion-header rounded-lg\">\r\n            {d.title}\r\n          </Accordion.Header>\r\n          <Accordion.Collapse eventKey={\\`$\\{i}\\`}>\r\n            <div className=\"accordion-body\">{d.text}</div>\r\n          </Accordion.Collapse>\r\n        </Accordion.Item>\r\n    ))}\r\n    </Accordion>\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-two\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                    <Card.Title>Accordion bordered</Card.Title>\r\n                                    <Card.Text className=\"m-0 subtitle\">\r\n                                      Accordion with border. Add class <code>accordion-bordered</code>{\" \"}\r\n                                      with the class <code> accordion</code>\r\n                                    </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                    <Accordion className=\"accordion accordion-danger-solid\" defaultActiveKey=\"0\">\r\n                                      {defaultAccordion.map((data, i) => (\r\n                                        <Accordion.Item  key={i} eventKey={`${i}`}>\r\n                                          <Accordion.Header className=\"accordion-header\">\r\n                                            {\" \"}\r\n                                              {data.title}                      \r\n                                          </Accordion.Header>\r\n                                          <Accordion.Collapse eventKey={`${i}`} className=\"accordion__body\">\r\n                                            <div className=\"accordion-body\">{data.text}</div>\r\n                                          </Accordion.Collapse>\r\n                                        </Accordion.Item >\r\n                                      ))}\r\n                                    </Accordion>\t\t\t\t\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-danger-solid\" defaultActiveKey=\"0\">\r\n    {defaultAccordion.map((data, i) => (\r\n      <Accordion.Item  key={i} eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header className=\"accordion-header\">\r\n          {\" \"}\r\n            {data.title}                      \r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`} className=\"accordion__body\">\r\n          <div className=\"accordion-body\">{data.text}</div>\r\n        </Accordion.Collapse>\r\n      </Accordion.Item >\r\n    ))}\r\n  </Accordion>\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>   \r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-three\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                    <Card.Title>Accordion Without Space</Card.Title>\r\n                                    <Card.Text className=\"m-0 subtitle\">\r\n                                      Add <code>accordion-no-gutter</code> class\r\n                                      with <code>accordion</code>\r\n                                    </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                    <Accordion className=\"accordion accordion-no-gutter accordion-header-bg\" defaultActiveKey=\"0\">\r\n                                      {defaultAccordion.map((d, i) => (\r\n                                        <Accordion.Item  key={i} eventKey={`${i}`}>\r\n                                          <Accordion.Header  className=\"accordion-header\">\r\n                                              {d.title}                     \r\n                                          </Accordion.Header>\r\n                                          <Accordion.Collapse eventKey={`${i}`}>\r\n                                              <div className=\"accordion-body\">{d.text}</div>\r\n                                          </Accordion.Collapse>\r\n                                        </Accordion.Item>\r\n                                      ))}\r\n                                    </Accordion>\t\t\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-no-gutter accordion-header-bg\" defaultActiveKey=\"0\">\r\n    {defaultAccordion.map((d, i) => (\r\n      <Accordion.Item  key={i} eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header  className=\"accordion-header\">\r\n            {d.title}                     \r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`}>\r\n            <div className=\"accordion-body\">{d.text}</div>\r\n        </Accordion.Collapse>\r\n      </Accordion.Item>\r\n    ))}\r\n  </Accordion>\t\t\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>\r\n\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-four\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                      <Card.Title>Accordion Without Space With Border</Card.Title>\r\n                                      <Card.Text className=\"m-0 subtitle\">\r\n                                        Add <code>accordion-no-gutter accordion-bordered</code> class\r\n                                        with <code>accordion</code>\r\n                                      </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                    <Accordion className=\"accordion accordion-no-gutter \" defaultActiveKey=\"0\">\r\n                                      {defaultAccordion.map((d, i) => (\r\n                                        <Accordion.Item  key={i}  eventKey={`${i}`}>\r\n                                          <Accordion.Header as='div'>\r\n                                              {d.title}\r\n                                          </Accordion.Header>\r\n                                          <Accordion.Collapse eventKey={`${i}`}>\r\n                                              <div className=\"accordion-body\">{d.text}</div>\r\n                                          </Accordion.Collapse>\r\n                                        </Accordion.Item >\r\n                                      ))}\r\n                                    </Accordion>\t\t\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-no-gutter \" defaultActiveKey=\"0\">\r\n  {defaultAccordion.map((d, i) => (\r\n    <Accordion.Item  key={i}  eventKey={\\`$\\{i}\\`}>\r\n      <Accordion.Header as='div'>\r\n          {d.title}\r\n      </Accordion.Header>\r\n      <Accordion.Collapse eventKey={\\`$\\{i}\\`}>\r\n          <div className=\"accordion-body\">{d.text}</div>\r\n      </Accordion.Collapse>\r\n    </Accordion.Item >\r\n  ))}\r\n  </Accordion>\t\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>\r\n\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-five\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                      <Card.Title>Accordion Indicator In Left Position</Card.Title>\r\n                                      <Card.Text className=\"m-0 subtitle\">\r\n                                        Add <code>accordion-left-indicator</code> class with{\" \"}\r\n                                        <code>accordion</code>\r\n                                      </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                    <Accordion className=\"accordion accordion-left-indicator\" defaultActiveKey=\"0\">\r\n                                      {defaultAccordion.map((d, i) => (\r\n                                        <Accordion.Item key={i} eventKey={`${i}`}>\r\n                                          <Accordion.Header  className=\"accordion-header\">\r\n                                              {d.title}\r\n                                          </Accordion.Header>\r\n                                          <Accordion.Collapse eventKey={`${i}`}>\r\n                                              <div className=\"accordion-body\">{d.text}</div>\r\n                                          </Accordion.Collapse>\r\n                                        </Accordion.Item>\r\n                                      ))}\r\n                                    </Accordion>\t\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-left-indicator\" defaultActiveKey=\"0\">\r\n    {defaultAccordion.map((d, i) => (\r\n      <Accordion.Item key={i} eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header  className=\"accordion-header\">\r\n            {d.title}\r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`}>\r\n            <div className=\"accordion-body\">{d.text}</div>\r\n        </Accordion.Collapse>\r\n      </Accordion.Item>\r\n    ))}\r\n  </Accordion>\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>\r\n\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-six\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\" >\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                      <Card.Title>Accordion With Icon</Card.Title>\r\n                                      <Card.Text className=\"m-0 subtitle\">\r\n                                          Add <code>accordion-with-icon</code> class with{\" \"}\r\n                                          <code>accordion</code>\r\n                                      </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                    <Accordion className=\"accordion accordion-with-icon\" defaultActiveKey=\"0\">\r\n                                      {defaultAccordion.map((d, i) => (\r\n                                        <Accordion.Item key={i}  eventKey={`${i}`}>\r\n                                          <Accordion.Header className=\"accordion-header\">\r\n                                            <span className=\"accordion-header-icon\"></span>\r\n                                            <span className=\"accordion-header-text\">{d.title}</span>\r\n                                            <span className=\"accordion-header-indicator indicator-bordered\"></span>\r\n                                          </Accordion.Header>\r\n                                          <Accordion.Collapse eventKey={`${i}`}>\r\n                                            <div className=\"accordion-body\">{d.text}</div>\r\n                                          </Accordion.Collapse>\r\n                                        </Accordion.Item>\r\n                                      ))}\r\n                                    </Accordion>\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-with-icon\" defaultActiveKey=\"0\">\r\n    {defaultAccordion.map((d, i) => (\r\n      <Accordion.Item key={i}  eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header className=\"accordion-header\">\r\n          <span className=\"accordion-header-icon\"></span>\r\n          <span className=\"accordion-header-text\">{d.title}</span>\r\n          <span className=\"accordion-header-indicator indicator-bordered\"></span>\r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`}>\r\n          <div className=\"accordion-body\">{d.text}</div>\r\n        </Accordion.Collapse>\r\n      </Accordion.Item>\r\n    ))}\r\n  </Accordion>\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-seven\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                      <Card.Title>Accordion Header Background</Card.Title>\r\n                                      <Card.Text className=\"m-0 subtitle\">\r\n                                        Add <code>accordion-header-bg</code> class with{\" \"}\r\n                                        <code>accordion</code>\r\n                                      </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                    <Accordion\r\n                                      className=\"accordion accordion-header-bg \"\r\n                                      defaultActiveKey=\"0\"\r\n                                    >\r\n                                      {defaultAccordion.map((d, i) => (\r\n                                        <Accordion.Item  key={i}  eventKey={`${i}`}>\r\n                                          <Accordion.Header  className={`accordion-header accordion-header-${d.bg}`}>\r\n                                            \r\n                                            <span className=\"accordion-header-text\">{d.title}</span>\r\n                                            \r\n                                          </Accordion.Header>\r\n                                          <Accordion.Collapse eventKey={`${i}`} >\r\n                                            <div className=\"accordion-body\">{d.text}</div>\r\n                                          </Accordion.Collapse>\r\n                                        </Accordion.Item>\r\n                                      ))}\r\n                                    </Accordion>\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion\r\n    className=\"accordion accordion-header-bg \"\r\n    defaultActiveKey=\"0\"\r\n    >\r\n    {defaultAccordion.map((d, i) => (\r\n      <Accordion.Item  key={i}  eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header  className={\\`accordion-header accordion-header-$\\{d.bg}\\`}>\r\n          \r\n          <span className=\"accordion-header-text\">{d.title}</span>\r\n          \r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`} >\r\n          <div className=\"accordion-body\">{d.text}</div>\r\n        </Accordion.Collapse>\r\n      </Accordion.Item>\r\n    ))}\r\n    </Accordion>\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>   \r\n\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-eight\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                      <Card.Title>Accordion Solid Background</Card.Title>\r\n                                      <Card.Text className=\"m-0 subtitle\">\r\n                                        Add <code>accordion-solid-bg</code> class with{\" \"}\r\n                                        <code>accordion</code>\r\n                                      </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                    <Accordion className=\"accordion accordion-solid-bg\" defaultActiveKey=\"0\">\r\n                                      {defaultAccordion.map((d, i) => (\r\n                                        <Accordion.Item  key={i} eventKey={`${i}`}>\r\n                                          <Accordion.Header  className=\"accordion-header  accordion-header-primary\">\r\n                                            <span className=\"accordion-header-text\">{d.title}</span>\r\n                                          </Accordion.Header>\r\n                                          <Accordion.Collapse eventKey={`${i}`} className=\"accordion__body\">\r\n                                            <div className=\"accordion-body\">{d.text}</div>\r\n                                          </Accordion.Collapse>\r\n                                        </Accordion.Item >\r\n                                      ))}\r\n                                    </Accordion>\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-solid-bg\" defaultActiveKey=\"0\">\r\n    {defaultAccordion.map((d, i) => (\r\n      <Accordion.Item  key={i} eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header  className=\"accordion-header  accordion-header-primary\">\r\n          <span className=\"accordion-header-text\">{d.title}</span>\r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`} className=\"accordion__body\">\r\n          <div className=\"accordion-body\">{d.text}</div>\r\n        </Accordion.Collapse>\r\n      </Accordion.Item >\r\n    ))}\r\n  </Accordion>\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>                      \r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-nine\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\" >\r\n                                  <div>\r\n                                      <Card.Title>Accordion Active Background</Card.Title>\r\n                                      <Card.Text className=\"m-0 subtitle\">\r\n                                        Add <code>accordion-active-header</code> class with{\" \"}\r\n                                        <code>accordion</code>\r\n                                      </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                      <Accordion className=\"accordion accordion-active-header\" defaultActiveKey=\"0\">\r\n                                        {defaultAccordion.map((d, i) => (\r\n                                          <Accordion.Item className=\"accordion-item\" key={i} eventKey={`${i}`}>\r\n                                            <Accordion.Header className=\"accordion-header accordion-header-primary\">\r\n                                            \r\n                                              <span className=\"accordion-header-text\">{d.title}</span>\r\n                                            </Accordion.Header>\r\n                                            <Accordion.Collapse eventKey={`${i}`} className=\"accordion__body\">\r\n                                              <div className=\"accordion-body\">{d.text}</div>\r\n                                            </Accordion.Collapse>\r\n                                          </Accordion.Item>\r\n                                        ))}\r\n                                      </Accordion>\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-active-header\" defaultActiveKey=\"0\">\r\n    {defaultAccordion.map((d, i) => (\r\n      <Accordion.Item className=\"accordion-item\" key={i} eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header className=\"accordion-header accordion-header-primary\">\r\n        \r\n          <span className=\"accordion-header-text\">{d.title}</span>\r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`} className=\"accordion__body\">\r\n          <div className=\"accordion-body\">{d.text}</div>\r\n        </Accordion.Collapse>\r\n      </Accordion.Item>\r\n    ))}\r\n    </Accordion>\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>                    \r\n\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-ten\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                    <Card.Title>Accordion header shadow</Card.Title>\r\n                                    <Card.Text className=\"m-0 subtitle\">\r\n                                      Add <code>accordion-header-shadow</code> and{\" \"}\r\n                                      <code>accordion-rounded</code> class with <code>accordion</code>\r\n                                    </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                    <Accordion className=\"accordion accordion-header-shadow accordion-rounded\" defaultActiveKey=\"0\">\r\n                                      {defaultAccordion.map((d, i) => (\r\n                                        <Accordion.Item className=\"accordion-item\" key={i} eventKey={`${i}`}>\r\n                                          <Accordion.Header  className=\"accordion-header-primary\">\r\n                                            <span className=\"accordion-header-text\">{d.title}</span>\r\n                                          </Accordion.Header>\r\n                                          <Accordion.Collapse eventKey={`${i}`} className=\"accordion__body\">\r\n                                              <div className=\"accordion-body\">{d.text}</div>\r\n                                          </Accordion.Collapse>\r\n                                        </Accordion.Item>\r\n                                      ))}\r\n                                    </Accordion>\t\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-header-shadow accordion-rounded\" defaultActiveKey=\"0\">\r\n    {defaultAccordion.map((d, i) => (\r\n      <Accordion.Item className=\"accordion-item\" key={i} eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header  className=\"accordion-header-primary\">\r\n          <span className=\"accordion-header-text\">{d.title}</span>\r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`} className=\"accordion__body\">\r\n            <div className=\"accordion-body\">{d.text}</div>\r\n        </Accordion.Collapse>\r\n      </Accordion.Item>\r\n    ))}\r\n  </Accordion>\t\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>\r\n\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-eleven\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                      <Card.Title>Accordion Rounded Stylish</Card.Title>\r\n                                      <Card.Text className=\"m-0 subtitle\">\r\n                                        Add <code>accordion-rounded-stylish</code> class with{\" \"}\r\n                                        <code>accordion</code>\r\n                                      </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                    <Accordion className=\"accordion accordion-rounded-stylish accordion-bordered\" defaultActiveKey=\"0\">\r\n                                      {defaultAccordion.map((d, i) => (\r\n                                        <Accordion.Item  key={i}  eventKey={`${i}`}>\r\n                                            <Accordion.Header className=\"rounded-lg\">\r\n                                              {d.title}\r\n                                              <span className=\"accordion-header-indicator \"></span>\t\t\t\t\t             \r\n                                            </Accordion.Header>\r\n                                            <Accordion.Collapse eventKey={`${i}`} className=\"accordion__body\">\r\n                                              <div className=\"accordion-body\">{d.text}</div>\r\n                                            </Accordion.Collapse>\r\n                                        </Accordion.Item>\r\n                                      ))}\r\n                                    </Accordion>\t\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-rounded-stylish accordion-bordered\" defaultActiveKey=\"0\">\r\n  {defaultAccordion.map((d, i) => (\r\n    <Accordion.Item  key={i}  eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header className=\"rounded-lg\">\r\n          {d.title}\r\n          <span className=\"accordion-header-indicator \"></span>\t\t\t\t\t             \r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`} className=\"accordion__body\">\r\n          <div className=\"accordion-body\">{d.text}</div>\r\n        </Accordion.Collapse>\r\n    </Accordion.Item>\r\n  ))}\r\n  </Accordion>\r\n  `}\r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>\r\n\r\n                    <Col xl=\"12\">\r\n                        <Card name=\"accordion-twelve\" className=\"dz-card\">\r\n                            <Tab.Container defaultActiveKey=\"Preview\">\r\n                              <Card.Header className=\"card-header flex-wrap border-0\">\r\n                                  <div>\r\n                                      <Card.Title>Accordion Gradient</Card.Title>\r\n                                      <Card.Text className=\"m-0 subtitle\">\r\n                                        Add <code>accordion-gradient</code> class with{\" \"}\r\n                                        <code>accordion</code>\r\n                                      </Card.Text>\r\n                                  </div>  \r\n                                  <Nav as=\"ul\" className=\"nav nav-tabs dzm-tabs\" id=\"myTab\" role=\"tablist\">\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" role=\"presentation\">\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Preview\">Preview</Nav.Link>\r\n                                      </Nav.Item>\r\n                                      <Nav.Item as=\"li\" className=\"nav-item\" >\r\n                                        <Nav.Link as=\"button\"  type=\"button\" eventKey=\"Code\">React</Nav.Link>\r\n                                      </Nav.Item>\r\n                                  </Nav>\r\n                              </Card.Header>\r\n                              <Tab.Content className=\"tab-content\" id=\"myTabContent\">\r\n                                <Tab.Pane eventKey=\"Preview\">\r\n                                  <Card.Body className=\"card-body\">               \r\n                                      <Accordion className=\"accordion accordion-rounded-stylish accordion-gradient\" defaultActiveKey=\"0\">\r\n                                          {defaultAccordion.map((d, i) => (\r\n                                            <Accordion.Item  key={i} eventKey={`${i}`}>\r\n                                              <Accordion.Header  className=\"accordion-header rounded-lg\">                                              \r\n                                                <span className=\"accordion-header-text\">{d.title}</span>\r\n                                              </Accordion.Header>\r\n                                              <Accordion.Collapse eventKey={`${i}`} className=\"accordion__body\">\r\n                                                  <div className=\"accordion-body\">{d.text}</div>\r\n                                              </Accordion.Collapse>\r\n                                            </Accordion.Item>\r\n                                          ))}\r\n                                        </Accordion>\t\r\n                                  </Card.Body>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"Code\">\r\n                                <div className=\"card-body pt-0 p-0 code-area\">\r\n  <pre className=\"mb-0\"><code className=\"language-html\">\r\n  <Highlight>\r\n  {`\r\n  <Accordion className=\"accordion accordion-rounded-stylish accordion-gradient\" defaultActiveKey=\"0\">\r\n    {defaultAccordion.map((d, i) => (\r\n      <Accordion.Item  key={i} eventKey={\\`$\\{i}\\`}>\r\n        <Accordion.Header  className=\"accordion-header rounded-lg\">                                              \r\n          <span className=\"accordion-header-text\">{d.title}</span>\r\n        </Accordion.Header>\r\n        <Accordion.Collapse eventKey={\\`$\\{i}\\`} className=\"accordion__body\">\r\n            <div className=\"accordion-body\">{d.text}</div>\r\n        </Accordion.Collapse>\r\n      </Accordion.Item>\r\n    ))}\r\n  </Accordion>\t\r\n  `}                                      \r\n  </Highlight>\r\n  </code></pre>\r\n  </div>\r\n                                </Tab.Pane>\r\n                              </Tab.Content>    \r\n                            </Tab.Container>  \r\n                        </Card>\r\n                    </Col>       \r\n                \r\n                  </Row>{\" \"}                     \r\n                </div>  \r\n              </div>  \r\n              <div className=\"demo-right \">                \r\n                <div className=\"dlab-scroll demo-right-inner  navigation navbar\">    \r\n                    <h4 className=\"title\">Accordion</h4>\r\n                    <ul className=\"navbar-nav nav\" id=\"menu-bar\">\r\n                        {sidebarData.map((item, index)=>(\r\n                          <li key={index}                            \r\n                          >\r\n                            <Link to={item.to} smooth={true}\t                              \r\n                              className={`scroll ${index === activeLink ? 'active' :  ''} `}\r\n                              activeClass=\"active\"\r\n                              spy={true}\r\n                              onClick={()=>setActiveLink(index)}\r\n                            >{item.title}</Link>\r\n                          </li>\r\n                        ))} \r\n                    </ul>\t\r\n                </div>                  \r\n              </div>\r\n            </div>  \r\n          </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default UiAccordion;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst PageTitle = ({ motherMenu, activeMenu, pageContent }) => {\r\n  let path = window.location.pathname.split(\"/\");\r\n\r\n  return (\r\n\t\t<>\r\n\t\t\t<div className=\"row page-titles mx-0\">\r\n\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t<li className=\"breadcrumb-item\"><Link to={`/${path[path.length - 1]}`}>{motherMenu}</Link></li>\r\n\t\t\t\t\t<li className=\"breadcrumb-item active\"><Link to={`/${path[path.length - 1]}`}>{activeMenu}</Link></li>\r\n\t\t\t\t</ol>\r\n\t\t\t</div>\r\n\t\t</>\r\n    \t\r\n  );\r\n};\r\n\r\nexport default PageTitle;\r\n","import * as React from 'react';\nexport function isAccordionItemSelected(activeEventKey, eventKey) {\n  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;\n}\nconst context = /*#__PURE__*/React.createContext({});\ncontext.displayName = 'AccordionContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Collapse from './Collapse';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * This component accepts all of [`Collapse`'s props](/utilities/transitions/#collapse-props).\n */\nconst AccordionCollapse = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');\n  return /*#__PURE__*/_jsx(Collapse, {\n    ref: ref,\n    in: isAccordionItemSelected(activeEventKey, eventKey),\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(Component, {\n      children: React.Children.only(children)\n    })\n  });\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext({\n  eventKey: ''\n});\ncontext.displayName = 'AccordionItemContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionBody = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  return /*#__PURE__*/_jsx(AccordionCollapse, {\n    eventKey: eventKey,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionBody.displayName = 'AccordionBody';\nexport default AccordionBody;","import * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null ? void 0 : onSelect(eventKeyPassed, e);\n    onClick == null ? void 0 : onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionButton from './AccordionButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionHeader = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'h2',\n  bsPrefix,\n  className,\n  children,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(AccordionButton, {\n      onClick: onClick,\n      children: children\n    })\n  });\n});\nAccordionHeader.displayName = 'AccordionHeader';\nexport default AccordionHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionItem = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  eventKey,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');\n  const contextValue = useMemo(() => ({\n    eventKey\n  }), [eventKey]);\n  return /*#__PURE__*/_jsx(AccordionItemContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionItem.displayName = 'AccordionItem';\nexport default AccordionItem;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionBody from './AccordionBody';\nimport AccordionButton from './AccordionButton';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionItem from './AccordionItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Accordion = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    activeKey,\n    bsPrefix,\n    className,\n    onSelect,\n    flush,\n    alwaysOpen,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'accordion');\n  const contextValue = useMemo(() => ({\n    activeEventKey: activeKey,\n    onSelect,\n    alwaysOpen\n  }), [activeKey, onSelect, alwaysOpen]);\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...controlledProps,\n      className: classNames(className, prefix, flush && `${prefix}-flush`)\n    })\n  });\n});\nAccordion.displayName = 'Accordion';\nexport default Object.assign(Accordion, {\n  Button: AccordionButton,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Header: AccordionHeader,\n  Body: AccordionBody\n});","/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @param {function} functions to chain\n * @returns {function|null}\n */\nfunction createChainedFunction(...funcs) {\n  return funcs.filter(f => f != null).reduce((acc, f) => {\n    if (typeof f !== 'function') {\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\n    }\n    if (acc === null) return f;\n    return function chainedFunction(...args) {\n      // @ts-ignore\n      acc.apply(this, args);\n      // @ts-ignore\n      f.apply(this, args);\n    };\n  }, null);\n}\nexport default createChainedFunction;","import classNames from 'classnames';\nimport css from 'dom-helpers/css';\nimport React, { useMemo } from 'react';\nimport { ENTERED, ENTERING, EXITED, EXITING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport createChainedFunction from './createChainedFunction';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nimport TransitionWrapper from './TransitionWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MARGINS = {\n  height: ['marginTop', 'marginBottom'],\n  width: ['marginLeft', 'marginRight']\n};\nfunction getDefaultDimensionValue(dimension, elem) {\n  const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;\n  const value = elem[offset];\n  const margins = MARGINS[dimension];\n  return value +\n  // @ts-ignore\n  parseInt(css(elem, margins[0]), 10) +\n  // @ts-ignore\n  parseInt(css(elem, margins[1]), 10);\n}\nconst collapseStyles = {\n  [EXITED]: 'collapse',\n  [EXITING]: 'collapsing',\n  [ENTERING]: 'collapsing',\n  [ENTERED]: 'collapse show'\n};\nconst defaultProps = {\n  in: false,\n  timeout: 300,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  getDimensionValue: getDefaultDimensionValue\n};\nconst Collapse = /*#__PURE__*/React.forwardRef(({\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  className,\n  children,\n  dimension = 'height',\n  getDimensionValue = getDefaultDimensionValue,\n  ...props\n}, ref) => {\n  /* Compute dimension */\n  const computedDimension = typeof dimension === 'function' ? dimension() : dimension;\n\n  /* -- Expanding -- */\n  const handleEnter = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = '0';\n  }, onEnter), [computedDimension, onEnter]);\n  const handleEntering = useMemo(() => createChainedFunction(elem => {\n    const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;\n    elem.style[computedDimension] = `${elem[scroll]}px`;\n  }, onEntering), [computedDimension, onEntering]);\n  const handleEntered = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onEntered), [computedDimension, onEntered]);\n\n  /* -- Collapsing -- */\n  const handleExit = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;\n    triggerBrowserReflow(elem);\n  }, onExit), [onExit, getDimensionValue, computedDimension]);\n  const handleExiting = useMemo(() => createChainedFunction(elem => {\n    elem.style[computedDimension] = null;\n  }, onExiting), [computedDimension, onExiting]);\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    \"aria-expanded\": props.role ? props.in : null,\n    onEnter: handleEnter,\n    onEntering: handleEntering,\n    onEntered: handleEntered,\n    onExit: handleExit,\n    onExiting: handleExiting,\n    childRef: children.ref,\n    children: (state, innerProps) => /*#__PURE__*/React.cloneElement(children, {\n      ...innerProps,\n      className: classNames(className, children.props.className, collapseStyles[state], computedDimension === 'width' && 'collapse-horizontal')\n    })\n  });\n});\n\n// @ts-ignore\n\n// @ts-ignore\nCollapse.defaultProps = defaultProps;\nexport default Collapse;"],"names":["UiAccordion","defaultAccordion","title","text","bg","activeLink","setActiveLink","useState","_jsxs","Fragment","children","_jsx","PageTitle","activeMenu","motherMenu","pageContent","className","Row","Col","xl","Card","name","Tab","defaultActiveKey","Nav","as","id","role","type","eventKey","Accordion","map","d","i","concat","Highlight","data","to","select","item","index","Link","smooth","activeClass","spy","onClick","_ref","path","window","location","pathname","split","_Fragment","length","isAccordionItemSelected","activeEventKey","Array","isArray","includes","context","React","displayName","AccordionCollapse","ref","Component","bsPrefix","props","useContext","AccordionContext","useBootstrapPrefix","Collapse","in","classNames","AccordionBody","onEnter","onEntering","onEntered","onExit","onExiting","onExited","AccordionItemContext","AccordionButton","accordionOnClick","onSelect","alwaysOpen","e","eventKeyPassed","filter","k","useAccordionButton","AccordionHeader","AccordionItem","contextValue","useMemo","Provider","value","activeKey","flush","controlledProps","useUncontrolled","prefix","Object","assign","Button","Item","Header","Body","_len","arguments","funcs","_key","f","reduce","acc","Error","_len2","args","_key2","apply","this","MARGINS","height","width","getDefaultDimensionValue","dimension","elem","toUpperCase","slice","margins","parseInt","css","collapseStyles","EXITED","EXITING","ENTERING","ENTERED","defaultProps","timeout","mountOnEnter","unmountOnExit","appear","getDimensionValue","computedDimension","handleEnter","createChainedFunction","style","handleEntering","scroll","handleEntered","handleExit","triggerBrowserReflow","handleExiting","TransitionWrapper","addEndListener","transitionEndListener","childRef","state","innerProps"],"sourceRoot":""}