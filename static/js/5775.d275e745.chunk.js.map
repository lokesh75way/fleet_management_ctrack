{"version":3,"file":"static/js/5775.d275e745.chunk.js","mappings":"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","sources":["features/technician/components/TasksTable.jsx","features/technician/components/DropdownList.jsx","features/technician/components/Form/Task.jsx","features/technician/pages/Tasks.jsx"],"sourcesContent":["import React from \"react\";\nimport { MdDelete } from \"react-icons/md\";\nimport { FaEdit } from \"react-icons/fa\";\n\nimport DeleteModal from \"@/components/Modal/DeleteModal\";\nimport usePermissions from \"@/hooks/usePermissions\";\n\nconst TasksTable = ({\n  tableData,\n  onConfirmDelete,\n  editDrawerOpen,\n  currentPage,\n  itemsPerPage,\n}) => {\n  const { can } = usePermissions();\n  const editPermission = can(\"technician/tasks\", \"modify\");\n  const deletePermission = can(\"technician/tasks\", \"delete\");\n  const startIndex = (currentPage - 1) * itemsPerPage + 1;\n\n  return (\n    <>\n      {tableData.map((item, index) => (\n        <tr key={index}>\n          <td>\n            <span>{startIndex + index}</span>\n          </td>\n          <td>\n            <div className=\"products\">\n              <div>\n                <h6>{item.taskName}</h6>\n              </div>\n            </div>\n          </td>\n          <td>\n            <span>{item.taskCategory}</span>\n          </td>\n          <td>\n            <span>{`${item.technician?.firstName ?? \"\"} ${\n              item.technician?.lastName ?? \"\"\n            }`}</span>\n          </td>\n          <td>\n            <span>{item.serviceLocation}</span>\n          </td>\n          <td>\n            <span className=\"text-primary\">{item.reportingTime}</span>\n          </td>\n          {(editPermission || deletePermission) && (\n            <td>\n              <span className=\"d-flex justify-content-center\">\n                {editPermission && (\n                  <span\n                    className=\"cursor-pointer\"\n                    onClick={() => editDrawerOpen(item?._id)}\n                  >\n                    <FaEdit style={{ color: \"green\", fontSize: \"1.2rem\" }} />\n                  </span>\n                )}\n                {deletePermission && (\n                  <DeleteModal\n                    className=\"cursor-pointer \"\n                    onConfirmDelete={onConfirmDelete}\n                    id={item._id}\n                  >\n                    <MdDelete style={{ color: \"red\", fontSize: \"1.2rem\" }} />\n                  </DeleteModal>\n                )}\n              </span>\n            </td>\n          )}\n        </tr>\n      ))}\n    </>\n  );\n};\n// onClick={() => editDrawerOpen(item.id)}\nexport default TasksTable;\n","import usePagination from \"@/hooks/usePagination\";\nimport usePermissions from \"@/hooks/usePermissions\";\nimport { useInfiniteQuery, useQuery } from \"@tanstack/react-query\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport Select from \"react-select\";\n\nimport { getAllTechnicians, getTechnicianById } from \"../api\";\nimport Spinner from \"@/components/Loader/Spinner\";\n\nconst TechnicianDropdownList = ({\n  onChange,\n  value,\n  groupId,\n  branchId,\n  companyId,\n  customStyles,\n  name,\n  ref,\n  isDisabled,\n  defaultValue,\n}) => {\n  const [selectedOption, setSelectedOption] = useState(value);\n  const { page, setPage } = usePagination();\n  const { can } = usePermissions();\n\n  const { data, fetchNextPage, hasNextPage, isFetching, isFetchingNextPage } =\n    useInfiniteQuery({\n      queryKey: [\"technicians\", groupId, branchId, companyId],\n      queryFn: ({ pageParam }) => {\n        setPage(pageParam);\n        return getAllTechnicians(pageParam, 10, {\n          groupId,\n          branchId,\n          companyId,\n        });\n      },\n      initialPageParam: 1,\n      getNextPageParam: (lastPage, pages) =>\n        lastPage.data?.length ? page + 1 : null,\n      enabled: can(\"technician\", \"view\"),\n      staleTime: Infinity,\n    });\n\n  const { refetch } = useQuery({\n    queryKey: [\"technician\", defaultValue],\n    queryFn: () => getTechnicianById(defaultValue),\n    enabled: false,\n    staleTime: Infinity,\n  });\n\n  const options = useMemo(() => {\n    let flatData = [];\n    data?.pages.forEach((pageData) => {\n      pageData.data.forEach((item) => {\n        flatData.push({\n          label: `${item?.firstName ?? \"\"} ${item?.lastName ?? \"\"}`,\n          value: item?._id,\n        });\n      });\n    });\n    return flatData;\n  }, [data]);\n\n  useEffect(() => {\n    if (value?.value != selectedOption?.value) {\n      setSelectedOption(value);\n    }\n\n    return () => {};\n  }, [value]);\n\n  useEffect(() => {\n    const initializeValue = async () => {\n      if (!value && !defaultValue) {\n        return;\n      }\n\n      if (defaultValue) {\n        const selected = options.find(\n          (option) => option.value === defaultValue\n        );\n        if (selected) {\n          setSelectedOption(selected);\n          onChange(selected);\n          return;\n        }\n        try {\n          const { data: technician } = await refetch();\n          if (technician) {\n            const newOption = {\n              label: `${technician?.firstName ?? \"\"} ${technician?.lastName ?? \"\"}`,\n              value: technician._id,\n            };\n            setSelectedOption(newOption);\n            onChange(newOption);\n          }\n        } catch (error) {\n          console.error(\"Error fetching technician details:\", error);\n        }\n      } else {\n        setSelectedOption(value);\n      }\n    };\n    initializeValue();\n  }, [defaultValue, options, isFetching]);\n\n  const handleMenuScroll = async (event) => {\n    const bottom =\n      event.target.scrollHeight - event.target.scrollTop ===\n      event.target.clientHeight;\n    if (bottom && !isFetching && hasNextPage && !isFetchingNextPage) {\n      fetchNextPage();\n    }\n  };\n\n  //\n\n  //   useEffect(() => {\n  //     const selected = dropdownOptions.find((option) => option.value === value);\n  //     setSelectedOption(selected);\n  //   }, [value, dropdownOptions, groupId]);\n\n  return (\n    <Select\n      options={options}\n      value={selectedOption}\n      onChange={onChange}\n      styles={customStyles}\n      name={name}\n      ref={ref}\n      isDisabled={isDisabled || !can(\"technician\", \"view\")}\n      onMenuScrollToBottom={handleMenuScroll}\n      menuShouldScrollIntoView={false}\n      isLoading={isFetching}\n      components={{\n        LoadingIndicator: Spinner,\n      }}\n    />\n  );\n};\nexport default TechnicianDropdownList;\n","import React, {\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useEffect,\n} from \"react\";\nimport { Offcanvas } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-country-state-city/dist/react-country-state-city.css\";\nimport { Controller, FormProvider } from \"react-hook-form\";\nimport Select from \"react-select\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { taskCategoryOptions, severityOptions } from \"@/constants/options\";\nimport Error from \"@/components/Error/Error\";\nimport CustomInput from \"@/components/Input/CustomInput\";\nimport TechnicianDropdownList from \"../DropdownList\";\n\nconst customStyles = {\n  control: (base) => ({\n    ...base,\n    padding: \".25rem 0 \",\n  }),\n};\n\nconst TaskForm = forwardRef(\n  (\n    {\n      Title,\n      handleSubmit,\n      editData,\n      setEditData,\n      control,\n      setValue,\n      getValues,\n      register,\n      errors,\n      clearErrors,\n      onSubmit,\n      reset,\n      isLoading,\n    },\n    ref\n  ) => {\n    const [addEmploye, setAddEmploye] = useState(false);\n    const { t } = useTranslation();\n\n    useImperativeHandle(ref, () => ({\n      showModal() {\n        setAddEmploye(true);\n      },\n\n      closeModal() {\n        reset();\n        clearErrors();\n        setAddEmploye(false);\n      },\n    }));\n\n    useEffect(() => {\n      reset({});\n      clearErrors();\n      if (addEmploye && editData) {\n        reset({ ...editData, technician: editData.technician._id });\n        setValue(\"description\", editData.description);\n      } else setEditData();\n    }, [addEmploye]);\n\n    return (\n      <>\n        <Offcanvas\n          show={addEmploye}\n          onHide={setAddEmploye}\n          className=\"offcanvas-end customeoff\"\n          placement=\"end\"\n        >\n          <div className=\"offcanvas-header\">\n            <h5 className=\"modal-title\" id=\"#gridSystemModal\">\n              {Title}\n            </h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              onClick={() => setAddEmploye(false)}\n            >\n              <i className=\"fa-solid fa-xmark\"></i>\n            </button>\n          </div>\n          <div className=\"offcanvas-body\">\n            <div className=\"container-fluid\">\n              <FormProvider>\n                <form noValidate onSubmit={handleSubmit(onSubmit)}>\n                  <div className=\"row\">\n                    <div className=\"col-xl-6 mb-3\">\n                      <label className=\"form-label\">\n                        {t(\"technician\")} <span className=\"text-danger\">*</span>\n                      </label>\n                      <Controller\n                        name=\"technician\"\n                        control={control}\n                        rules={{ required: true }}\n                        render={({ field: { onChange, value, name, ref } }) => (\n                          <TechnicianDropdownList\n                            onChange={(newValue) => {\n                              setValue(\"technician\", newValue.value);\n                            }}\n                            defaultValue={value}\n                            value={value}\n                            customStyles={customStyles}\n                            ref={ref}\n                            name={name}\n                          />\n                        )}\n                      />\n\n                      <Error errorName={errors.technician} />\n                    </div>\n                    <div className=\"col-xl-6 mb-3\">\n                      <label className=\"form-label\">\n                        {t(\"taskCategory\")}\n                        <span className=\"text-danger\">*</span>\n                      </label>\n                      <Controller\n                        name=\"c\"\n                        control={control}\n                        rules={{ required: true }}\n                        render={({ field: { onChange, value, name, ref } }) => (\n                          <Select\n                            onChange={(newValue) => {\n                              setValue(\"taskCategory\", newValue.value);\n                            }}\n                            options={taskCategoryOptions}\n                            ref={ref}\n                            name={name}\n                            styles={customStyles}\n                            value={value}\n                            defaultValue={{\n                              value: getValues(\"taskCategory\")\n                                ? getValues(\"taskCategory\")\n                                : taskCategoryOptions[0].value,\n                              label: getValues(\"taskCategory\")\n                                ? getValues(\"taskCategory\")\n                                : taskCategoryOptions[0].label,\n                            }}\n                          />\n                        )}\n                      />\n                      <Error errorName={errors.taskCategory} />\n                    </div>\n                    <div className=\"col-xl-6 mb-3\">\n                      <label\n                        htmlFor=\"exampleFormControlInput2\"\n                        className=\"form-label\"\n                      >\n                        {t(\"taskName\")} <span className=\"text-danger\">*</span>\n                      </label>\n                      <CustomInput\n                        type=\"text\"\n                        register={register}\n                        name=\"taskName\"\n                        label=\"Task Name\"\n                        placeholder=\"\"\n                      />\n                      <Error errorName={errors.taskName} />\n                    </div>\n                    <div className=\"col-xl-6 mb-3\">\n                      <label className=\"form-label\">\n                        {t(\"taskPriority\")}{\" \"}\n                        <span className=\"text-danger\">*</span>\n                      </label>\n                      <Controller\n                        name=\"taskPriority\"\n                        control={control}\n                        rules={{ required: true }}\n                        render={({ field: { onChange, value, name, ref } }) => (\n                          <Select\n                            onChange={(newValue) => {\n                              setValue(\"taskPriority\", newValue.value);\n                            }}\n                            options={severityOptions}\n                            ref={ref}\n                            name={name}\n                            styles={customStyles}\n                            defaultValue={{\n                              value: getValues(\"taskPriority\")\n                                ? getValues(\"taskPriority\")\n                                : severityOptions[0].value,\n                              label: getValues(\"taskPriority\")\n                                ? getValues(\"taskPriority\")\n                                : severityOptions[0].label,\n                            }}\n                          />\n                        )}\n                      />\n                      <Error errorName={errors.taskPriority} />\n                    </div>\n                    <div className=\"col-xl-6 mb-3\">\n                      <label\n                        htmlFor=\"exampleFormControlInput3\"\n                        className=\"form-label\"\n                      >\n                        {t(\"contactPersonNumber\")}\n                      </label>\n                      <CustomInput\n                        type=\"number\"\n                        register={register}\n                        name=\"contactPersonNumber\"\n                        label=\"Contact Person Number\"\n                        placeholder=\"\"\n                      />\n                      <Error errorName={errors.contactPersonNumber} />\n                    </div>\n                    <div className=\"col-xl-6 mb-3\">\n                      <label className=\"form-label\">\n                        {t(\"serviceLocation\")}\n                        <span className=\"text-danger\">*</span>\n                      </label>\n                      <CustomInput\n                        type=\"text\"\n                        name=\"serviceLocation\"\n                        register={register}\n                        label=\"Service Location\"\n                        placeholder=\"\"\n                      />\n                      <Error errorName={errors.serviceLocation} />\n                    </div>\n                    <div className=\"col-xl-6 mb-3 d-flex flex-column\">\n                      <label className=\"form-label\">\n                        {t(\"plannedReportingDate\")}{\" \"}\n                        <span className=\"text-danger\">*</span>\n                      </label>\n                      <Controller\n                        name=\"plannedReportingDate\"\n                        control={control}\n                        render={({ value, name }) => (\n                          <DatePicker\n                            selected={\n                              getValues(\"plannedReportingDate\")\n                                ? new Date(getValues(\"plannedReportingDate\"))\n                                : new Date()\n                            }\n                            className=\"form-control customDateHeight\"\n                            onChange={(newValue) =>\n                              setValue(\"plannedReportingDate\", newValue)\n                            }\n                            minDate={new Date()}\n                          />\n                        )}\n                      />\n                      <Error errorName={errors.plannedReportingDate} />\n                    </div>\n                    <div className=\"col-xl-6 mb-3 \">\n                      <label className=\"form-label\">\n                        {t(\"reportingTime\")}\n                        <span className=\"text-danger\">*</span>\n                      </label>\n                      <CustomInput\n                        type=\"time\"\n                        register={register}\n                        name=\"reportingTime\"\n                        label=\"Reporting Time\"\n                        placeholder=\"\"\n                      />\n                      <Error errorName={errors.reportingTime} />\n                    </div>\n                    <div className=\"col-xl-6 mb-3\">\n                      <label className=\"form-label\">{t(\"description\")}</label>\n                      <div className=\"mb-3 \">\n                        <Controller\n                          name=\"description\"\n                          control={control}\n                          defaultValue=\"\"\n                          render={({ field }) => (\n                            <textarea\n                              className=\"form-txtarea form-control\"\n                              register={register(\"description\")}\n                              name=\"description\"\n                              label=\"Description\"\n                              rows=\"8\"\n                              id=\"comment\"\n                              {...field}\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                    <button\n                      type=\"submit\"\n                      onClick={() => {\n                        handleSubmit(onSubmit);\n                      }}\n                      className=\"btn btn-primary me-1 m-1\"\n                      disabled={isLoading}\n                    >\n                      {t(\"submit\")}\n                    </button>\n                    <button\n                      type=\"button\"\n                      disabled={isLoading}\n                      onClick={() => setAddEmploye(false)}\n                      className=\"btn btn-danger light ms-1 m-1\"\n                    >\n                      {t(\"cancel\")}\n                    </button>\n                  </div>\n                </form>\n              </FormProvider>\n            </div>\n          </div>\n        </Offcanvas>\n      </>\n    );\n  }\n);\n\nexport default TaskForm;\n","import React, { useState, useRef, useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useTranslation } from \"react-i18next\";\nimport dayjs from \"dayjs\";\nimport {\n  keepPreviousData,\n  useMutation,\n  useQuery,\n  useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport TableSkeleton from \"@/components/Skeleton/Table\";\nimport usePagination from \"@/hooks/usePagination\";\nimport { notifyError, notifySuccess } from \"@/utils/toast\";\nimport { technicianTaskSchema } from \"@/utils/yup\";\nimport MainPagetitle from \"@/components/MainPagetitle\";\nimport Paginate from \"@/components/Paginate\";\nimport { ThemeContext } from \"@/context/ThemeContext\";\nimport usePermissions from \"@/hooks/usePermissions\";\nimport { createTask, deleteTask, getTasks, updateTask } from \"../api\";\nimport { getApiErrorMessage } from \"@/utils/helper\";\nimport TasksTable from \"../components/TasksTable\";\nimport TaskForm from \"../components/Form/Task\";\n\nconst TechnicianTask = () => {\n  const { t } = useTranslation();\n  const { isRtl } = useContext(ThemeContext);\n  const [editData, setEditData] = useState();\n  const { can } = usePermissions();\n  const { page, goToPage, setCount, totalCount } = usePagination();\n  const itemsPerPage = 10;\n  const queryClient = useQueryClient();\n\n  const { data, isLoading, isFetching } = useQuery({\n    queryKey: [\"tasks\", page],\n    queryFn: () => getTasks(page),\n    placeholderData: keepPreviousData,\n    staleTime: Infinity,\n  });\n\n  const onError = (err) => notifyError(getApiErrorMessage(err));\n  const { mutate } = useMutation({\n    onError,\n    onSuccess: () => {\n      queryClient.invalidateQueries(\"tasks\");\n    },\n    mutationFn: deleteTask,\n  });\n\n  const { mutate: createTaskMutation, isPending: createPending } = useMutation({\n    mutationFn: createTask,\n    onSuccess: () => {\n      notifySuccess(\"New Task Created\");\n      queryClient.invalidateQueries([\"tasks\"]);\n      technicianTask.current?.closeModal();\n    },\n    onError,\n  });\n\n  const { mutate: editTaskMutation, isPending: editPending } = useMutation({\n    mutationFn: ({ data, id }) => updateTask(data, id),\n    onSuccess: () => {\n      notifySuccess(\"Task Updated Successfully\");\n      queryClient.invalidateQueries([\"tasks\"]);\n      technicianTask.current?.closeModal();\n    },\n    onError,\n  });\n\n  useEffect(() => {\n    if (data) setCount(data.totalCount);\n  }, [data]);\n\n  const handlePageClick = ({ selected }) => {\n    goToPage(selected + 1);\n  };\n\n  const headers = [\n    t(\"id\"),\n    t(\"taskName\"),\n    t(\"taskCategory\"),\n    t(\"technicianName\"),\n    t(\"serviceLocation\"),\n    t(\"reportingTime\"),\n  ];\n\n  if (can(\"technician/tasks\", \"modify\") || can(\"technician/tasks\", \"delete\")) {\n    headers.push(t(\"action\"));\n  }\n  const editDrawerOpen = (item) => {\n    const editData = data?.data?.find((task) => task._id === item);\n    setEditData(editData);\n    technicianTask.current?.showModal();\n  };\n\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    getValues,\n    control,\n    handleSubmit,\n    clearErrors,\n    reset,\n  } = useForm({\n    resolver: yupResolver(technicianTaskSchema),\n  });\n\n  const onSubmit = async (data) => {\n    if (data.plannedReportingDate) {\n      const formattedDate = dayjs(data.plannedReportingDate).format(\n        \"YYYY-MM-DD\"\n      );\n      data.plannedReportingDate = formattedDate;\n    }\n    if (data._id && data._id !== 0) {\n      editTaskMutation({ data, id: data._id });\n    } else {\n      createTaskMutation(data);\n    }\n  };\n\n  const technicianTask = useRef();\n\n  return (\n    <>\n      <MainPagetitle\n        mainTitle={t(\"technicianTask\")}\n        pageTitle={t(\"technicianTask\")}\n        parentTitle={t(\"technician\")}\n      />\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-xl-12\">\n            <div className=\"card\">\n              <div className=\"card-body p-0\">\n                <div className=\"table-responsive active-projects style-1 ItemsCheckboxSec shorting\">\n                  <div className=\"tbl-caption d-flex justify-content-between text-wrap align-items-center\">\n                    <h4 className=\"heading mb-0\">{t(\"technicianTask\")}</h4>\n                    <div>\n                      {can(\"technician/tasks\", \"add\") && (\n                        <Link\n                          to={\"#\"}\n                          className=\"btn btn-primary btn-sm ms-1\"\n                          data-bs-toggle=\"offcanvas\"\n                          onClick={() => {\n                            clearErrors();\n                            reset();\n                            technicianTask.current.showModal();\n                          }}\n                        >\n                          + {t(\"addTechnicianTask\")}\n                        </Link>\n                      )}\n                    </div>\n                  </div>\n                  <div\n                    id=\"employee-tbl_wrapper\"\n                    className=\"dataTables_wrapper no-footer\"\n                  >\n                    <div className=\"table-responsive\">\n                      {isLoading || isFetching ? (\n                        <TableSkeleton />\n                      ) : (\n                        <table\n                          id=\"empoloyees-tblwrapper\"\n                          className=\"table ItemsCheckboxSec dataTable no-footer mb-0\"\n                        >\n                          <thead>\n                            <tr>\n                              {headers.map((header) => (\n                                <th key={header}>{header}</th>\n                              ))}\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <TasksTable\n                              tableData={data.data || []}\n                              onConfirmDelete={mutate}\n                              editDrawerOpen={editDrawerOpen}\n                              currentPage={page}\n                              itemsPerPage={itemsPerPage}\n                            />\n                          </tbody>\n                        </table>\n                      )}\n                    </div>\n                    <div className=\"d-sm-flex text-center justify-content-between align-items-center\">\n                      <div className=\"dataTables_info\">\n                        {t(\"showing\")} {(page - 1) * 10 + 1} {t(\"to\")}{\" \"}\n                        {Math.min(page * 10, totalCount)} {t(\"of\")} {totalCount}{\" \"}\n                        {t(\"entries\")}\n                      </div>\n                      <div\n                        className=\"dataTables_paginate paging_simple_numbers\"\n                        id=\"example2_paginate\"\n                      >\n                        <Paginate\n                          totalCount={totalCount}\n                          itemsPerPage={itemsPerPage}\n                          handlePageClick={handlePageClick}\n                          isRtl={isRtl}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <TaskForm\n        ref={technicianTask}\n        editData={editData}\n        control={control}\n        setValue={setValue}\n        getValues={getValues}\n        onSubmit={onSubmit}\n        register={register}\n        errors={errors}\n        setEditData={setEditData}\n        handleSubmit={handleSubmit}\n        clearErrors={clearErrors}\n        reset={reset}\n        Title={editData && editData._id !== 0 ? t(\"editTask\") : t(\"addTask\")}\n        isLoading={createPending || editPending}\n      />\n    </>\n  );\n};\n\nexport default TechnicianTask;\n"],"names":["_ref","tableData","onConfirmDelete","editDrawerOpen","currentPage","itemsPerPage","can","usePermissions","editPermission","deletePermission","startIndex","_jsx","_Fragment","children","map","item","index","_item$technician$firs","_item$technician","_item$technician$last","_item$technician2","_jsxs","className","taskName","taskCategory","concat","technician","firstName","lastName","serviceLocation","reportingTime","onClick","_id","FaEdit","style","color","fontSize","DeleteModal","id","MdDelete","onChange","value","groupId","branchId","companyId","customStyles","name","ref","isDisabled","defaultValue","selectedOption","setSelectedOption","useState","page","setPage","usePagination","data","fetchNextPage","hasNextPage","isFetching","isFetchingNextPage","useInfiniteQuery","queryKey","queryFn","_ref2","pageParam","getAllTechnicians","initialPageParam","getNextPageParam","lastPage","pages","_lastPage$data","length","enabled","staleTime","Infinity","refetch","useQuery","getTechnicianById","options","useMemo","flatData","forEach","pageData","_item$firstName","_item$lastName","push","label","useEffect","async","selected","find","option","_technician$firstName","_technician$lastName","newOption","error","console","initializeValue","Select","styles","onMenuScrollToBottom","event","target","scrollHeight","scrollTop","clientHeight","menuShouldScrollIntoView","isLoading","components","LoadingIndicator","Spinner","control","base","padding","forwardRef","Title","handleSubmit","editData","setEditData","setValue","getValues","register","errors","clearErrors","onSubmit","reset","addEmploye","setAddEmploye","t","useTranslation","useImperativeHandle","showModal","closeModal","description","Offcanvas","show","onHide","placement","type","FormProvider","noValidate","Controller","rules","required","render","field","TechnicianDropdownList","newValue","Error","errorName","_ref3","taskCategoryOptions","htmlFor","CustomInput","placeholder","_ref4","severityOptions","taskPriority","contactPersonNumber","_ref5","DatePicker","Date","minDate","plannedReportingDate","_ref6","rows","disabled","TechnicianTask","isRtl","useContext","ThemeContext","goToPage","setCount","totalCount","queryClient","useQueryClient","getTasks","placeholderData","keepPreviousData","onError","err","notifyError","getApiErrorMessage","mutate","useMutation","onSuccess","invalidateQueries","mutationFn","deleteTask","createTaskMutation","isPending","createPending","createTask","_technicianTask$curre","notifySuccess","technicianTask","current","editTaskMutation","editPending","updateTask","_technicianTask$curre2","headers","formState","useForm","resolver","yupResolver","technicianTaskSchema","useRef","MainPagetitle","mainTitle","pageTitle","parentTitle","Link","to","TableSkeleton","header","TasksTable","_data$data","_technicianTask$curre3","task","Math","min","Paginate","handlePageClick","TaskForm","formattedDate","dayjs","format"],"sourceRoot":""}