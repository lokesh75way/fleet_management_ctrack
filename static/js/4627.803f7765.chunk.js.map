{"version":3,"file":"static/js/4627.803f7765.chunk.js","mappings":"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","sources":["jsx/components/Tracking/CompanyItem.jsx","jsx/components/Tracking/DriverTabComponent3.jsx","jsx/components/Tracking/DriverItem.jsx","services/api/VehicleService.js","jsx/components/maps/DriverTab.jsx","features/vehicle/pages/Tracking.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { Button } from \"react-bootstrap\";\nconst CompanyItem = (props) => {\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [nodes, setNodes] = useState([]);\n\n  useEffect(() => {\n    const data = props?.companyVehicle.map((data) => {\n      const childNode = data?.vehicles?.map((subItem) => {\n        return { label: subItem?.vehicleName, value: subItem?._id };\n      });\n\n      return {\n        value: data?._id,\n        label: data?.companyName,\n        children: childNode,\n      };\n    });\n    setNodes([...data]);\n  }, [props.companyVehicle]);\n\n  // useEffect(() => {\n  //   const data = Object.entries(props.vehicles).map((data) => {\n  //     const childNode = data[1].map((data) => {\n  //       return { label: data.vehicleName, value: data.id };\n  //     });\n\n  //     return { value: data[0], label: data[0], children: childNode };\n  //   });\n  //   setNodes([...data]);\n  // }, [props.vehicles]);\n\n  useEffect(() => {\n    let vehicleIds = [];\n    const data = nodes?.map((ele) =>\n      ele.children?.map((vehicle) => vehicleIds.push(vehicle.value))\n    );\n    handleCheck(vehicleIds);\n  }, [nodes]);\n\n  const handleCheck = (checked) => {\n    setChecked(checked);\n    props.setVehicleIds(checked);\n  };\n  const handleExpand = (expanded) => {\n    setExpanded(expanded);\n  };\n  const handleSubmit = () => {\n    // TODO Only set vehicleIds here\n    props.handleToggleCardPositionHandler();\n  };\n\n  return (\n    <>\n      <div className=\"checkboxTree\">\n        <CheckboxTree\n          nodes={nodes}\n          checked={checked}\n          expanded={expanded}\n          onCheck={handleCheck}\n          onExpand={handleExpand}\n          showNodeIcon={false}\n          icons={{\n            expandOpen: <i class=\"fa-solid fa-minus\"></i>,\n            expandClose: <i class=\"fa-solid fa-plus\"></i>,\n            uncheck: (\n              <i\n                class=\"fa-regular fa-square\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            check: (\n              <i\n                class=\"fa-solid fa-square-check\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            halfCheck: (\n              <i\n                class=\"fa-regular fa-square-minus\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n          }}\n        />\n      </div>\n      <div className=\"text-center  pt-2 \">\n        <Button\n          className=\" mb-5\"\n          variant=\"primary btn-md \"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Save Selection\n        </Button>\n      </div>\n    </>\n  );\n};\nexport default CompanyItem;\n","import React, { useState, useEffect } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { Button } from \"react-bootstrap\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\n\nconst GeoFenceItem = ({ geoFences, handleToggleCardPositionHandler }) => {\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [nodes, setNodes] = useState([]);\n\n  useEffect(() => {\n    const data = Object.entries(geoFences).map(([company, fences]) => {\n      const childNodes = fences.map((fence) => ({\n        label: fence.name,\n        value: fence.id,\n      }));\n      return { value: company, label: company, children: childNodes };\n    });\n    setNodes(data);\n  }, [geoFences]);\n\n  const handleCheck = (checked) => {\n    setChecked(checked);\n  };\n\n  const handleExpand = (expanded) => {\n    setExpanded(expanded);\n  };\n\n  const handleSubmit = () => {\n    const selectedObject = checked.map((data) => JSON.parse(data));\n    handleToggleCardPositionHandler();\n  };\n\n  return (\n    <>\n      <div className=\"checkboxTree\">\n        <CheckboxTree\n          nodes={nodes}\n          checked={checked}\n          expanded={expanded}\n          onCheck={handleCheck}\n          onExpand={handleExpand}\n          showNodeIcon={false}\n          icons={{\n            expandOpen: <i className=\"fa-solid fa-minus\"></i>,\n            expandClose: <i className=\"fa-solid fa-plus\"></i>,\n            uncheck: (\n              <i\n                className=\"fa-regular fa-square\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            check: (\n              <i\n                className=\"fa-solid fa-square-check\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            halfCheck: (\n              <i\n                className=\"fa-regular fa-square-minus\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n          }}\n        />\n      </div>\n      <div className=\"text-center  pt-2 \">\n        <Button\n          className=\" mb-5\"\n          variant=\"primary btn-md \"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Save Selection\n        </Button>\n      </div>\n    </>\n  );\n};\nexport default GeoFenceItem;\n","import React, { useEffect, useState } from \"react\";\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport CheckboxTree from \"react-checkbox-tree\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { Button } from \"react-bootstrap\";\n\nconst DriverItem = (props) => {\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [nodes, setNodes] = useState([]);\n  useEffect(() => {\n    const data = Object.entries(props.drivers).map((data) => {\n      const childNode = data[1].map((data) => {\n        return { label: data.firstName, value: data.id };\n      });\n\n      return { value: data[0], label: data[0], children: childNode };\n    });\n    setNodes([...data]);\n  }, [props.drivers]);\n  const handleCheck = (checked) => {\n    setChecked(checked);\n  };\n  const handleExpand = (expanded) => {\n    setExpanded(expanded);\n  };\n  const handleSubmit = () => {\n    const selectedObject = checked.map((data) => JSON.parse(data));\n    console.log(selectedObject, \"selctedObject\");\n    props.handleToggleCardPositionHandler();\n  };\n  return (\n    <>\n      <div className=\"checkboxTree\">\n        <CheckboxTree\n          nodes={nodes}\n          checked={checked}\n          expanded={expanded}\n          onCheck={handleCheck}\n          onExpand={handleExpand}\n          showNodeIcon={false}\n          icons={{\n            expandOpen: <i class=\"fa-solid fa-minus\"></i>,\n            expandClose: <i class=\"fa-solid fa-plus\"></i>,\n            uncheck: (\n              <i\n                class=\"fa-regular fa-square\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            check: (\n              <i\n                class=\"fa-solid fa-square-check\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n            halfCheck: (\n              <i\n                class=\"fa-regular fa-square-minus\"\n                style={{\n                  fontSize: \"16px\",\n                }}\n              ></i>\n            ),\n          }}\n        />\n      </div>\n      <div className=\"text-center  pt-2 \">\n        <Button\n          className=\" mb-5\"\n          variant=\"primary btn-md \"\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          Save Selection\n        </Button>\n      </div>\n    </>\n  );\n};\nexport default DriverItem;\n","import axios from \"axios\";\n\nconst createVehicles = async (body) => {\n  return axios.post(\"/vehicles\", body);\n};\nconst getVehicles = async (page, branchIds) => {\n  let url = `/vehicles?page=${page}&limit=10`;\n\n  if (branchIds) {\n    if (Array.isArray(branchIds)) {\n      // If branchIds is an array, append each branchId to the URL\n      branchIds.forEach((id) => {\n        url += `&branchIds=${id}`;\n      });\n    } else {\n      // If branchIds is a single value, append it directly to the URL\n      url += `&branchIds=${branchIds}`;\n    }\n  }\n\n  const { data } = await axios.get(url);\n  return { data: data.data.data, totalLength: data.data.totalCount };\n};\n\nconst getUnassignedVehicles = async (page) => {\n  const { data } = await axios.get(\n    `/vehicles/unassigned?page=${page}&limit=${10}`\n  );\n  return { data: data.data.data, totalLength: data.data.totalCount };\n};\n\nconst deleteVehicles = async (body) => {\n  console.log(body);\n  return axios.delete(`/vehicles/${body}`);\n};\nconst updateVehicles = async (body, id) => {\n  return axios.patch(`/vehicles/${id}`, body);\n};\n\nconst getVehiclesByCompany = async (search = \"\") => {\n  const { data } = await axios.get(`/vehicles/list?search=${search}`);\n  return { data: data.data };\n};\n\nconst getVehiclesTraking = async (id, status) => {\n  const { data } = await axios.get(`/vehicles/tracking?${id}&status=${status}`);\n  return { data: data.data };\n};\n\nconst getVehicleById = async (id) => {\n  const { data } = await axios.get(`/vehicles/${id}`);\n  return data?.data;\n};\n\nexport {\n  createVehicles,\n  getVehicles,\n  deleteVehicles,\n  updateVehicles,\n  getVehiclesByCompany,\n  getVehiclesTraking,\n  getUnassignedVehicles,\n  getVehicleById,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Nav, Tab } from \"react-bootstrap\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { IoIosArrowForward, IoIosArrowBack } from \"react-icons/io\";\n\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\nimport CompanyItem from \"../Tracking/CompanyItem\";\nimport { getVehicles, statusData } from \"../../../utils/helper\";\n\nimport GeoFenceItem from \"../Tracking/DriverTabComponent3\";\nimport DriverItem from \"../Tracking/DriverItem\";\nimport { notifyError } from \"../../../utils/toast\";\nimport { getVehiclesByCompany } from \"../../../services/api/VehicleService\";\n\nconst DriverTab = ({\n  tabData,\n  handleToggleCardPosition,\n  isOutside,\n  setVehicleIds,\n  setVehicleStatus,\n  vehicleCounts,\n}) => {\n  const componentData = {\n    name: \"Company1\",\n    drivers: [\n      { name: \"driver1\", timeStamp: \"22-02-2024 3:00 PM\", status: \"running\" },\n      { name: \"driver2\", timeStamp: \"22-02-2024 3:00 PM\", status: \"idle\" },\n      { name: \"driver3\", timeStamp: \"22-02-2024 3:00 PM\", status: \"inactive\" },\n      { name: \"driver4\", timeStamp: \"22-02-2024 3:00 PM\", status: \"running\" },\n      { name: \"driver5\", timeStamp: \"22-02-2024 3:00 PM\", status: \"stopped\" },\n      { name: \"driver6\", timeStamp: \"22-02-2024 3:00 PM\", status: \"stopped\" },\n      { name: \"driver7\", timeStamp: \"22-02-2024 3:00 PM\" },\n    ],\n    allocatedDriver: 4,\n    notAllocatedDriver: 3,\n    totalDriver: 7,\n  };\n\n  const components = [\n    DriverTabComponent1,\n    DriverTabComponent2,\n    DriverTabComponent3,\n  ];\n\n  return (\n    <>\n      <div\n        className={`default-tab outer-container ${\n          isOutside ? \"toggleBarInside\" : \"toggleBarOutside\"\n        }`}\n      >\n        <button\n          onClick={handleToggleCardPosition}\n          className=\"driver_tracking_button\"\n        >\n          {!isOutside ? <IoIosArrowForward /> : <IoIosArrowBack />}\n        </button>\n        <Tab.Container defaultActiveKey={tabData[0].name.toLowerCase()}>\n          <Nav as=\"ul\" className=\"nav-tabs tracking_navTabs\">\n            {tabData.map((data, i) => {\n              const Icon = data.icon;\n              return (\n                <Nav.Item as=\"li\" key={i}>\n                  <Nav.Link eventKey={data.name.toLowerCase()}>\n                    <Icon className=\"tab-icon\" />\n                    {data.name}\n                  </Nav.Link>\n                </Nav.Item>\n              );\n            })}\n          </Nav>\n          <Tab.Content\n            className=\"p-2 py-4\"\n            style={{\n              background: \"#f5f5f5\",\n              overflow: \"scroll\",\n              height: \"100vh\",\n            }}\n          >\n            {tabData.map((data, i) => {\n              const Component = components[i];\n              return (\n                <Tab.Pane eventKey={data.name.toLowerCase()} key={i}>\n                  <Component\n                    data={componentData}\n                    handleToggleCardPosition={handleToggleCardPosition}\n                    setVehicleIds={setVehicleIds}\n                    setVehicleStatus={setVehicleStatus}\n                    vehicleCounts={vehicleCounts}\n                  />\n                </Tab.Pane>\n              );\n            })}\n          </Tab.Content>\n        </Tab.Container>\n      </div>\n    </>\n  );\n};\n\nconst DriverTabComponent1 = (props) => {\n  const { setVehicleStatus, vehicleCounts } = props;\n\n  const { running, idle, stopped, inactive, nodata, total } = vehicleCounts;\n  const [selectValue, setSelectValue] = useState(\"All\");\n  const [vehicles, setVehicles] = useState([]);\n\n  const [companyVehicle, setCompanyVehicle] = useState([]);\n\n  const getVehiclesList = async (search) => {\n    try {\n      const data = await getVehiclesByCompany(search);\n      await setCompanyVehicle(data?.data ?? []);\n      return;\n    } catch (e) {\n      notifyError(\"Some Error occured\");\n    }\n  };\n\n  useEffect(() => {\n    getVehiclesList();\n    // const data = getVehicles(selectValue);\n    // setVehicles(data);\n  }, [selectValue]);\n\n  const items = JSON.parse(localStorage?.getItem(\"userJsonData\"))\n    ? JSON.parse(localStorage?.getItem(\"userJsonData\"))\n        .filter((item) => item.designation === \"vehicle\")\n        .map((data) => ({\n          id: data.id,\n          name: data.vehicleName,\n        }))\n    : [];\n\n  const handleSearch = (item) => {\n    const vehicleData = getVehicles(selectValue);\n\n    const filteredData = Object.entries(vehicleData).filter((vehicle) => {\n      const vec = vehicle[1].filter((data) => data.id == item.id);\n      return vec.length > 0;\n    });\n\n    const convertedData = filteredData.reduce((acc, [company, dataArray]) => {\n      dataArray.map((data) => {\n        if (data.vehicleName === item.name) {\n          acc[company] = [data];\n        }\n      });\n      return acc;\n    }, {});\n    setVehicles(convertedData);\n  };\n\n  return (\n    <>\n      <div className=\"vehicle_tracking-object\">\n        <span\n          className={`light fs-9 running ${\n            selectValue === \"Running\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"Running\");\n            setVehicleStatus(\"RUNNING\");\n          }}\n        >\n          <p>{running}</p>\n          <span>Running</span>\n        </span>\n        <span\n          pill\n          className={`light fs-9 idle ${\n            selectValue === \"Idle\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"Idle\");\n            setVehicleStatus(\"IDLE\");\n          }}\n        >\n          <p>{idle}</p>\n          <span>Idle</span>\n        </span>\n        <span\n          pill\n          className={`light stopped fs-9 ${\n            selectValue === \"Stopped\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"Stopped\");\n            setVehicleStatus(\"STOP\");\n          }}\n        >\n          <p>{stopped}</p>\n          <span>Stopped</span>\n        </span>\n        <span\n          pill\n          className={`light fs-9 inActive ${\n            selectValue === \"Inactive\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"Inactive\");\n            setVehicleStatus(\"INACTIVE\");\n          }}\n        >\n          <p>{inactive}</p>\n          <span>InActive</span>\n        </span>\n        <span\n          pill\n          className={`light fs-9 noData ${\n            selectValue === \"NoData\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"NoData\");\n            setVehicleStatus(\"NODATA\");\n          }}\n        >\n          <p>{nodata}</p>\n          <span>NoData</span>\n        </span>\n        <span\n          className={`light fs-9 total ${\n            selectValue === \"All\" && \"vehicle_tracking-active\"\n          }`}\n          onClick={() => {\n            setSelectValue(\"All\");\n            setVehicleStatus(\"\");\n          }}\n        >\n          <p>{total}</p>\n          <span>Total</span>\n        </span>\n      </div>\n      <div className=\"d-flex mt-4 mb-4\">\n        <ReactSearchAutocomplete\n          items={items}\n          className=\"w-100\"\n          styling={{\n            height: \"30px\",\n            marginRight: \"10px\",\n            fontSize: \"12px\",\n            color: \"#4A4646\",\n          }}\n          onSearch={(string) => {\n            if (string === \"\") {\n              const data = getVehicles(selectValue);\n              setVehicles(data);\n            }\n          }}\n          onSelect={handleSearch}\n        />\n      </div>\n      {\n        <CompanyItem\n          companyVehicle={companyVehicle ?? []}\n          setVehicleIds={props.setVehicleIds}\n          vehicles={vehicles}\n          handleToggleCardPositionHandler={props.handleToggleCardPosition}\n        />\n      }\n    </>\n  );\n};\n\nconst DriverTabComponent2 = (props) => {\n  const [selectValue, setSelectValue] = useState(\"All\");\n  const [selectAll, setSelectAll] = useState([]);\n  const [selectedDrivers, setSelectedDrivers] = useState([]);\n  const [selectDriver, setSelectDriver] = useState([]);\n  const [filterApplied, setFilterApplied] = useState(false);\n  const [isDisable, setIsDisable] = useState(false);\n  const jsonData = JSON.parse(localStorage.getItem(\"userJsonData\"))\n    ? JSON.parse(localStorage.getItem(\"userJsonData\"))\n    : [];\n  const [companyDrivers, setCompanyDrivers] = useState([]);\n  const [company, setCompany] = useState(\n    jsonData.filter((item) => item.role === \"company\")\n  );\n  const [drivers, setDrivers] = useState(\n    jsonData.filter((item) => item.designation === \"Driver\")\n  );\n  const allocated = drivers.filter(\n    (item) => item.activityStatus === \"Allocated\"\n  );\n  const notAllocated = drivers.filter(\n    (item) => item.activityStatus === \"Not Allocated\"\n  );\n\n  useEffect(() => {\n    const newCompanyDrivers = company.reduce((acc, company) => {\n      const companyDrivers = jsonData.filter(\n        (item) =>\n          item.designation === \"Driver\" &&\n          item.parentCompany === company.userName\n      );\n\n      if (companyDrivers.length > 0) {\n        acc[company.userName] = companyDrivers;\n      }\n      return acc;\n    }, {});\n    setCompanyDrivers(newCompanyDrivers);\n  }, [company]);\n\n  useEffect(() => {\n    const companyDrivers = company.reduce((acc, company) => {\n      const drivers = jsonData.filter(\n        (item) =>\n          item.designation === \"Driver\" &&\n          item.parentCompany === company.userName &&\n          (selectValue != \"All\" ? item.activityStatus === selectValue : true)\n      );\n\n      if (drivers.length > 0) {\n        acc[company.userName] = drivers;\n      }\n      return acc;\n    }, {});\n    setCompanyDrivers(companyDrivers);\n  }, [selectValue]);\n\n  const total = drivers.length;\n\n  const handleOnSelect = (item) => {\n    const selectedCompanyId = item.id;\n\n    const companyDriversData = company.reduce((acc, company) => {\n      const driversForCompany = jsonData.filter(\n        (driver) =>\n          driver.designation === \"Driver\" &&\n          driver.parentCompany === company.userName &&\n          driver.id === selectedCompanyId\n      );\n\n      if (driversForCompany.length > 0) {\n        acc[company.userName] = driversForCompany;\n      }\n      return acc;\n    }, {});\n\n    setCompanyDrivers(companyDriversData);\n  };\n\n  const handleOnSearch = (string, results) => {\n    if (string === \"\") {\n      const newCompanyDrivers = company.reduce((acc, company) => {\n        const companyDrivers = jsonData.filter(\n          (item) =>\n            item.designation === \"Driver\" &&\n            item.parentCompany === company.userName\n        );\n\n        if (companyDrivers.length > 0) {\n          acc[company.userName] = companyDrivers;\n        }\n        return acc;\n      }, {});\n      setCompanyDrivers(newCompanyDrivers);\n    }\n  };\n  const handleSelectAll = (id, company, drivers, index) => {\n    var checkboxArray = [...selectedDrivers];\n    if (!selectAll[index]) {\n      drivers.map((item) => checkboxArray[index].push(item.id));\n    } else {\n      checkboxArray[index] = [];\n      setSelectedDrivers(checkboxArray);\n    }\n  };\n  const handleSelect = (ind) => {\n    setSelectAll((prev) => {\n      const newArr = [...prev];\n      newArr[ind] = !newArr[ind];\n      return newArr;\n    });\n  };\n  const handleDriverSelect = (id, ind) => {\n    const updatedDrivers = [...selectedDrivers];\n    if (updatedDrivers[ind].includes(id)) {\n      const index = updatedDrivers[ind].indexOf(id);\n      updatedDrivers[ind].splice(index, 1);\n      if (updatedDrivers[ind].length === 2) {\n        handleSelect(ind);\n      }\n    } else {\n      updatedDrivers[ind].push(id);\n      if (updatedDrivers[ind].length === 3) {\n        handleSelect(ind);\n      }\n    }\n\n    setSelectedDrivers(updatedDrivers);\n  };\n\n  const items = jsonData\n    .filter((item) => item.designation === \"Driver\")\n    .map((item) => {\n      return { id: item.id, name: item.firstName + \" \" + item.lastName };\n    });\n  return (\n    <>\n      <div className=\"px-2 vehicle_tracking-object\">\n        <span\n          bg=\"\"\n          pill\n          className={`light fs-9  running ${\n            selectValue === \"Allocated\"\n              ? \"vehicle_tracking-active\"\n              : isDisable && \"pe-none\"\n          }`}\n          onClick={() => setSelectValue(\"Allocated\")}\n        >\n          <p>{allocated.length}</p>\n          <span>Allocated</span>\n        </span>\n        <span\n          bg=\"\"\n          pill\n          className={`light fs-9 idle ${\n            selectValue === \"Not Allocated\"\n              ? \"vehicle_tracking-active\"\n              : isDisable && \"pe-none\"\n          }`}\n          onClick={() => setSelectValue(\"Not Allocated\")}\n        >\n          <p>{notAllocated.length}</p>\n          <span>Not Allocated</span>\n        </span>\n        <span\n          bg=\"\"\n          pill\n          className={`light fs-9 total ${\n            selectValue === \"Total\"\n              ? \"vehicle_tracking-active\"\n              : isDisable && \"pe-none\"\n          }`}\n          onClick={() => setSelectValue(\"All\")}\n        >\n          <p>{total}</p>\n          <span>Total</span>\n        </span>\n      </div>\n      <div className=\"d-flex mt-4 mb-4\">\n        <ReactSearchAutocomplete\n          items={items}\n          className=\"w-100\"\n          styling={{\n            height: \"30px\",\n            marginRight: \"10px\",\n            fontSize: \"12px\",\n            color: \"#red\",\n          }}\n          onSearch={handleOnSearch}\n          onSelect={handleOnSelect}\n        />\n      </div>\n      {\n        <DriverItem\n          key={companyDrivers}\n          drivers={companyDrivers}\n          handleToggleCardPositionHandler={props.handleToggleCardPosition}\n        />\n      }\n    </>\n  );\n};\n\nconst DriverTabComponent3 = (props) => {\n  const geoData = JSON.parse(localStorage.getItem(\"geofenceData\"))\n    ? JSON.parse(localStorage.getItem(\"geofenceData\"))\n    : [];\n  const [tableData, setTableData] = useState(geoData);\n  const [selectedCompanies, setSelectedCompanies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Function to handle search\n  const handleSearch = (query) => {\n    const fenceData = geoData.filter((item) => item.id === query.id);\n    setTableData(fenceData);\n  };\n\n  // Function to reset search\n  const resetSearch = () => {\n    setSearchQuery(\"\");\n  };\n\n  // Filter tableData based on searchQuery\n  const filteredTableData = tableData.filter((item) =>\n    item.company.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  const onConfirmDelete = (id) => {\n    const updatedData = tableData.filter((item) => item.id !== id);\n    setTableData(updatedData);\n\n    // const updatedLocalStorageData = geoData.filter((item) => item.id !== id);\n    // localStorage.setItem(\n    //   \"geofenceData\",\n    //   JSON.stringify(updatedLocalStorageData)\n    // );\n  };\n\n  const editDrawerOpen = (d) => {\n    // navigate(`/geofence/map/edit/${d.id}`);\n  };\n\n  const toggleAllData = (company) => {\n    let newSelectedCompanies;\n    if (selectedCompanies.includes(company)) {\n      newSelectedCompanies = selectedCompanies.filter((c) => c !== company);\n    } else {\n      newSelectedCompanies = [...selectedCompanies, company];\n    }\n    setSelectedCompanies(newSelectedCompanies);\n\n    const updatedData = tableData.map((item) => {\n      if (item.company === company) {\n        return { ...item, selected: !selectedCompanies.includes(company) };\n      }\n      return item;\n    });\n    setTableData(updatedData);\n  };\n\n  const toggleSingleData = (id) => {\n    const updatedData = tableData.map((item) => {\n      if (item.id === id) {\n        return { ...item, selected: !item.selected };\n      }\n      return item;\n    });\n    setTableData(updatedData);\n  };\n\n  // Group tableData by company name\n  const groupedData = tableData.reduce((acc, cur) => {\n    if (!acc[cur.company]) {\n      acc[cur.company] = [];\n    }\n    acc[cur.company].push(cur);\n    return acc;\n  }, {});\n\n  const items = tableData.map((data) => ({\n    id: data.id,\n    name: data.name,\n  }));\n\n  return (\n    <>\n      <div className=\"d-flex mt-4 mb-4\">\n        <ReactSearchAutocomplete\n          items={items}\n          // onSearch={handleSearch}\n          className=\"w-100\"\n          styling={{\n            height: \"30px\",\n            marginRight: \"10px\",\n            fontSize: \"12px\",\n            color: \"#red\",\n          }}\n          onSelect={handleSearch}\n        />\n      </div>\n      <div\n        className=\"d-flex flex-column p-2\"\n        style={{\n          marginTop: \".5rem\",\n          overflowY: \"scroll\",\n        }}\n      >\n        <GeoFenceItem\n          geoFences={groupedData}\n          handleToggleCardPositionHandler={props.handleToggleCardPosition}\n        />\n      </div>\n    </>\n  );\n};\nexport default DriverTab;\n","import React, { useState } from \"react\";\nimport { FaUser } from \"react-icons/fa\";\nimport { MdFence } from \"react-icons/md\";\nimport { TbLocationFilled } from \"react-icons/tb\";\nimport { useTranslation } from \"react-i18next\";\nimport \"@/assets/scss/pages/_driver-tracking.scss\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport ShowMap from \"../../../jsx/components/maps/ShowMap\";\nimport DriverTab from \"../../../jsx/components/maps/DriverTab\";\n\nimport MainPagetitle from \"@/components/MainPagetitle\";\nimport { notifyError } from \"@/utils/toast\";\nimport { getVehiclesTraking } from \"../api\";\n\nconst DriverTracking = () => {\n  const { t } = useTranslation();\n  const data = [\n    { lat: 30.7099475, lng: 76.6900474 },\n    { lat: 30.7333, lng: 76.7794 },\n  ];\n  const [isOutside, setIsOutside] = useState(true);\n\n  const tabData = [\n    { name: \"Object\", icon: TbLocationFilled },\n    { name: \"Driver\", icon: FaUser },\n    { name: \"Geofence\", icon: MdFence },\n  ];\n\n  const handleToggleCardPosition = () => {\n    setIsOutside(!isOutside);\n  };\n\n  const [vehicleIds, setVehicleIds] = useState([]);\n  const [vehicleStatus, setVehicleStatus] = useState(\"\");\n  const { data: trackingData } = useQuery({\n    queryKey: [\"tracking\", vehicleIds.join(\",\"), vehicleStatus],\n    queryFn: () =>\n      getVehiclesTraking(\n        vehicleIds.map((id) => `id=${id}&`).join(\"\"),\n        vehicleStatus\n      ),\n    staleTime: 120000,\n    refetchInterval: 120000,\n    refetchOnWindowFocus: \"always\",\n  });\n\n  return (\n    <>\n      <MainPagetitle\n        mainTitle={t(\"vehicleTracking\")}\n        pageTitle={t(\"vehicleTracking\")}\n        parentTitle={t(\"tracking\")}\n      />\n      <div\n        className={`backdrop ${isOutside ? \"d-none\" : \"d-block\"}`}\n        onClick={() => setIsOutside(true)}\n      />\n      <div className=\"p-2\">\n        <ShowMap\n          data={data}\n          trackingData={trackingData?.data}\n          centerCoordinate={trackingData?.centerCoordinate}\n        />\n      </div>\n\n      <DriverTab\n        tabData={tabData}\n        setVehicleIds={setVehicleIds}\n        vehicleIds={vehicleIds}\n        setVehicleStatus={setVehicleStatus}\n        vehicleCounts={trackingData?.count ?? {}}\n        handleToggleCardPosition={handleToggleCardPosition}\n        isOutside={isOutside}\n      />\n      {/* </div> */}\n    </>\n  );\n};\nexport default DriverTracking;\n"],"names":["props","checked","setChecked","useState","expanded","setExpanded","nodes","setNodes","useEffect","data","companyVehicle","map","_data$vehicles","childNode","vehicles","subItem","label","vehicleName","value","_id","companyName","children","vehicleIds","ele","_ele$children","vehicle","push","handleCheck","setVehicleIds","_jsxs","_Fragment","_jsx","className","CheckboxTree","onCheck","onExpand","showNodeIcon","icons","expandOpen","class","expandClose","uncheck","style","fontSize","check","halfCheck","Button","variant","type","onClick","handleSubmit","handleToggleCardPositionHandler","_ref","geoFences","Object","entries","_ref2","company","fences","fence","name","id","JSON","parse","drivers","firstName","selectedObject","console","log","DriverTabComponent1","_localStorage","_localStorage2","setVehicleStatus","vehicleCounts","running","idle","stopped","inactive","nodata","total","selectValue","setSelectValue","setVehicles","setCompanyVehicle","getVehiclesList","async","_data$data","search","arguments","length","undefined","axios","get","concat","getVehiclesByCompany","e","notifyError","items","localStorage","getItem","filter","item","designation","pill","ReactSearchAutocomplete","styling","height","marginRight","color","onSearch","string","getVehicles","onSelect","vehicleData","convertedData","reduce","acc","dataArray","CompanyItem","handleToggleCardPosition","DriverTabComponent2","selectAll","setSelectAll","selectedDrivers","setSelectedDrivers","selectDriver","setSelectDriver","filterApplied","setFilterApplied","isDisable","setIsDisable","jsonData","companyDrivers","setCompanyDrivers","setCompany","role","setDrivers","allocated","activityStatus","notAllocated","newCompanyDrivers","parentCompany","userName","lastName","bg","handleOnSearch","results","selectedCompanyId","companyDriversData","driversForCompany","driver","DriverItem","DriverTabComponent3","geoData","tableData","setTableData","selectedCompanies","setSelectedCompanies","searchQuery","setSearchQuery","groupedData","toLowerCase","includes","cur","query","fenceData","marginTop","overflowY","GeoFenceItem","tabData","isOutside","componentData","timeStamp","status","allocatedDriver","notAllocatedDriver","totalDriver","components","IoIosArrowBack","IoIosArrowForward","Tab","Container","defaultActiveKey","Nav","as","i","Icon","icon","Item","Link","eventKey","Content","background","overflow","Component","Pane","DriverTracking","_trackingData$count","t","useTranslation","setIsOutside","TbLocationFilled","FaUser","MdFence","vehicleStatus","trackingData","useQuery","queryKey","join","queryFn","getVehiclesTraking","staleTime","refetchInterval","refetchOnWindowFocus","MainPagetitle","mainTitle","pageTitle","parentTitle","ShowMap","lat","lng","centerCoordinate","DriverTab","count"],"sourceRoot":""}