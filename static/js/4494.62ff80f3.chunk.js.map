{"version":3,"file":"static/js/4494.62ff80f3.chunk.js","mappings":"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","sources":["jsx/components/maps/EditControl.jsx","jsx/pages/Map.jsx","jsx/pages/GeofenceMap.jsx","services/api/GeoFenceService.js"],"sourcesContent":["import L from \"react-leaflet-draw\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { FeatureGroup, Circle, Polygon, Polyline, Marker } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function EditControlFC({ watch, setValues, getValues }) {\n  const ref = useRef(null);\n  const { id } = useParams();\n  const [circles, setCircles] = useState([]);\n  const [lineString, setLineString] = useState([]);\n  const [polygon, setPolygon] = useState([]);\n  const [points, setPoints] = useState([]);\n  const watchedValues = watch(\"location\");\n\n  // const [polygonVertices, setPolygonVertices] = useState([]);\n\n  // const poly = [\n  //   {\n  //     type: \"Feature\",\n  //     properties: {},\n  //     geometry: {\n  //       type: \"Polygon\",\n  //       coordinates: [\n  //         [25.233565349394524, 55.29474574096975],\n  //         [25.216560585142492, 55.298524208285514],\n  //         [25.220598463683125, 55.30848573965209],\n  //         [25.22859617357562, 55.30290384707602]\n  //       ]\n  //     },\n  //   },\n  //   {\n  //     type: \"Feature\",\n  //     properties: {},\n  //     geometry: {\n  //       type: \"Polygon\",\n  //       coordinates: [\n  //         [25.233565349394524, 55.29474574096975],\n  //         [25.216560585142492, 55.298524208285514],\n  //         [25.220598463683125, 55.30848573965209],\n  //         [25.22859617357562, 55.30290384707602]\n  //       ]\n  //     },\n  //   },\n  // ];\n\n  const setShapes = () => {\n    const values = getValues(\"location\");\n    setCircles([]);\n    setPoints([]);\n    setPolygon([]);\n    setLineString([]);\n    values?.map((loc) => {\n      if (loc.type === \"Circle\") {\n        setCircles((prev) => [...prev, loc]);\n      }\n      if (loc.type === \"Polygon\") {\n        setPolygon((prev) => [...prev, loc]);\n      }\n\n      if (loc.type === \"Point\") {\n        setPoints((prev) => [...prev, loc]);\n      }\n\n      if (loc.type === \"LineString\") {\n        setLineString((prev) => [...prev, loc]);\n      }\n    });\n  };\n\n  const editChange = (e) => {\n    let mapLayer = getValues(\"location\") ?? [];\n    e.layers.eachLayer(({ editing, options }) => {\n      mapLayer = mapLayer.map((l) => {\n        if (options.id !== l.id) {\n          return l;\n        }\n        if (l && l.type === \"Polygon\") {\n          const coordinates = editing?.latlngs[0][0].map((coords) => {\n            return [coords.lat, coords.lng];\n          });\n          return l.id === options.id ? { ...l, coordinates } : l;\n        }\n        if (l && l.type === \"Circle\") {\n          const coordinates = [\n            editing._shape._latlng.lat,\n            editing._shape._latlng.lng,\n          ];\n          const duration = editing._shape._mRadius;\n          return l.id === options.id ? { ...l, coordinates, duration } : l;\n        }\n        if (l && l.type === \"LineString\") {\n          const coordinates = editing?.latlngs[0].map((coords) => {\n            return [coords.lat, coords.lng];\n          });\n          return l.id === options.id ? { ...l, coordinates } : l;\n        }\n        if (l && l.type === \"Point\") {\n          const coordinates = [\n            editing._marker._latlng.lat,\n            editing._marker._latlng.lng,\n          ];\n          return l.id === options.id ? { ...l, coordinates } : l;\n        }\n      });\n      setValues(\"location\", mapLayer);\n    });\n  };\n\n  const deleteHandle = (e) => {\n    let mapLayer = getValues(\"location\") ?? [];\n    e.layers.eachLayer((ly) => {\n      mapLayer = mapLayer.filter((l) => l.id !== ly.options.id);\n    });\n    setValues(\"location\", mapLayer);\n  };\n\n  const onCreatedhandler = (e) => {\n    const { layerType, layer } = e;\n    const { _latlng } = layer;\n    let data = {};\n    if (layerType === \"circle\") {\n      data = {\n        id: layer._leaflet_id,\n        type: \"Circle\",\n        coordinates: [_latlng.lat, _latlng.lng],\n        duration: layer._mRadius,\n      };\n    } else if (layerType === \"polygon\") {\n      const coordinates = layer._latlngs[0].map((coords) => [\n        coords.lat,\n        coords.lng,\n      ]);\n      data = {\n        id: layer._leaflet_id,\n        type: \"Polygon\",\n        coordinates: coordinates,\n      };\n    } else if (layerType === \"marker\") {\n      data = {\n        type: \"Point\",\n        id: layer._leaflet_id,\n        coordinates: [layer._latlng.lat, layer._latlng.lng],\n      };\n    } else if (layerType === \"polyline\") {\n      const coordinates = layer._latlngs.map((coords) => [\n        coords.lat,\n        coords.lng,\n      ]);\n      data = {\n        id: layer._leaflet_id,\n        type: \"LineString\",\n        coordinates: coordinates,\n      };\n    }\n    const values = getValues(\"location\") ?? [];\n    setValues(\"location\", [...values, data]);\n  };\n\n  useEffect(() => {\n    setShapes();\n  }, [watchedValues]);\n\n  return (\n    <FeatureGroup ref={ref}>\n      {circles?.map((circle, index) => (\n        <Circle\n          key={circle.id}\n          center={circle.coordinates}\n          radius={circle?.duration}\n          id={circle.id}\n        ></Circle>\n      ))}\n      {points?.map((point, index) => {\n        return (\n          <Marker\n            id={point.id}\n            key={point.id}\n            position={point.coordinates}\n          ></Marker>\n        );\n      })}\n\n      {polygon?.map((poly, index) => (\n        <Polygon\n          id={poly.id}\n          key={poly.id}\n          pathOptions={{ color: \"red\" }}\n          positions={poly.coordinates}\n        ></Polygon>\n      ))}\n\n      {lineString?.map((line, index) => (\n        <Polyline\n          key={line.id}\n          positions={line.coordinates}\n          path={line.coordinates}\n          id={line.id}\n        ></Polyline>\n      ))}\n\n      {/* <Circle center={[25.2233, 55.2869]} radius={1000} /> */}\n      <EditControl\n        position=\"topright\"\n        onEdited={editChange}\n        onCreated={onCreatedhandler}\n        onDeleted={deleteHandle}\n        draw={{\n          rectangle: false,\n          circle: true,\n          polyline: true,\n          polygon: true,\n          marker: true,\n          circlemarker: false,\n        }}\n        edit={{ edit: true, remove: true }}\n      />\n\n      {/* {poly.map((coords, index) => (\n        <GeoJSON key={index} data={coords} />\n      ))} */}\n    </FeatureGroup>\n  );\n}\n","import React from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Tooltip } from \"react-leaflet\";\nimport EditControlFC from \"../components/maps/EditControl\";\n\nconst Map = ({ geofenceHanlder, setValue, watch, getValues, errors }) => {\n  const [geojson, setGeojson] = React.useState({\n    type: \"FeatureCollection\",\n    features: [],\n  });\n  const mapId = watch(\"location\")?.length ?? 0;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"85vh\",\n        border: errors.location ? \"3px solid #ff5e5e\" : null,\n      }}\n    >\n      <div style={{ width: \"100%\" }}>\n        <MapContainer center={[25.2233, 55.2869]} zoom={14} zoomControl={false}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n          />\n          <Marker styles={{ background: \"red\" }} position={[25.2233, 55.2869]}>\n            <Popup>Dubai Trade Center</Popup>\n            <Tooltip>Dubai Trade Center</Tooltip>\n          </Marker>\n\n          <EditControlFC\n            key={mapId}\n            setValues={setValue}\n            geofenceHanlder={geofenceHanlder}\n            watch={watch}\n            getValues={getValues}\n          />\n        </MapContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport Map from \"./Map\";\nimport CustomInput from \"../../components/Input/CustomInput\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { geofenceMapSchema } from \"../../utils/yup\";\nimport { categoryOptions, toleranceOptions } from \"@/constants/options\";\nimport { Button } from \"react-bootstrap\";\nimport Error from \"../../components/Error/Error\";\nimport { notifyError, notifySuccess } from \"../../utils/toast\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  createGeofenceData,\n  getGeofenceById,\n  updateGeofence,\n} from \"../../services/api/GeoFenceService\";\n\nimport { useTranslation } from \"react-i18next\";\nimport CompanyDropdown from \"../../features/company/components/DropDownList\";\nimport { useSelector } from \"react-redux\";\n\nconst GeofenceDetail = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [defaultData, setDefaultData] = useState();\n  const [tempValue, setTempValue] = useState();\n  const [groupId, setGroupId] = useState(null);\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [companyId, setCompanyId] = useState();\n  const [companyDisabled, setCompanyDisabled] = useState(false);\n  const userDetails = useSelector((state) => state.auth.user);\n\n  const customStyles = {\n    control: (base) => ({\n      ...base,\n      padding: \".25rem 0 \", // Adjust the height as needed\n    }),\n  };\n\n  const getGeofenceDataById = async () => {\n    if (id) {\n      const { data } = await getGeofenceById(id);\n      setDefaultData(data);\n      reset(data);\n      setSelectedOption(data.geofenceAccess);\n    }\n  };\n\n  useEffect(() => {\n    if (userDetails.role === \"COMPANY\") {\n      setValue(\"businessGroupId\", userDetails?.businessGroupId);\n      setGroupId(userDetails?.businessGroupId);\n\n      setValue(\"companyId\", userDetails?.companyId);\n      setCompanyId(userDetails?.companyId);\n      setCompanyDisabled(true);\n    }\n    if (userDetails.role === \"BUSINESS_GROUP\") {\n      setValue(\"businessGroupId\", userDetails?.businessGroupId);\n      setGroupId(userDetails?.businessGroupId);\n    }\n\n    if (id) {\n      getGeofenceDataById();\n    }\n  }, [id]);\n\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n    getValues,\n    control,\n    handleSubmit,\n    reset,\n  } = useForm({\n    resolver: yupResolver(geofenceMapSchema),\n    defaultValues: {\n      category: categoryOptions[0].value,\n      tolerance: toleranceOptions[0].value,\n    },\n  });\n  const handleChange = (e) => {\n    setSelectedOption(e.target.value);\n    setValue(\"geofenceAccess\", e.target.value);\n  };\n\n  const onSubmit = async (data) => {\n    try {\n      if (id) {\n        const { success } = await updateGeofence(id, data);\n        if (success) {\n          notifySuccess(\"Geofence updated successfully!\");\n          navigate(\"/settings/geofence\");\n        }\n        return;\n      } else {\n        const { success } = await createGeofenceData(data);\n        if (success) {\n          notifySuccess(\"New Geofence Created!\");\n          navigate(\"/settings/geofence\");\n        }\n        return;\n      }\n    } catch (error) {\n      console.log(error);\n      notifyError(\"Some error occured !!\");\n      return;\n    }\n  };\n\n  const Geofence = JSON.parse(localStorage.getItem(\"geofenceData\"));\n  const GeoData = Geofence?.filter((item) => item.id == id);\n  const [filteredGeoData, setFilteredGeoData] = useState(GeoData);\n  const { t } = useTranslation();\n  return (\n    <div>\n      <div style={{ padding: \"10px\", backgroundColor: \"#FFFDFD\" }}>\n        <h2 style={{ fontSize: \"20px\" }}>{t(\"geofenceDetail\")}l</h2>\n      </div>\n\n      <div className=\"\" style={{ display: \"flex\", height: \"88vh\" }}>\n        <div\n          className=\"col-md-3\"\n          style={{\n            padding: \"15px\",\n            boxShadow: \"9px 0 4px rgba(0, 0, 0, 0.1)\",\n            backgroundColor: \"#fff\",\n            overflow: \"auto\",\n          }}\n        >\n          <FormProvider>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  {t(\"company\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"company\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <CompanyDropdown\n                      key={groupId}\n                      groupId={groupId}\n                      onChange={(newValue) => {\n                        setValue(\"company\", newValue.value);\n                        setValue(\"companyName\", newValue.value);\n                        setCompanyId(newValue.value);\n                      }}\n                      value={value}\n                      customStyles={customStyles}\n                      ref={ref}\n                      isDisabled={companyDisabled}\n                      name={name}\n                    />\n                  )}\n                />\n                <Error errorName={errors.company} />\n              </div>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  {t(\"name\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  label=\"Name\"\n                  register={register}\n                  name=\"name\"\n                  // defaultValue={\n                  //   filteredGeoData[0] ? filteredGeoData[0].name : \"\"\n                  // }\n                />\n                <Error errorName={errors.name} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  {t(\"category\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"category\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"category\", newValue.value);\n                      }}\n                      options={categoryOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      value={{ value, label: value }}\n                    />\n                  )}\n                />\n                {!getValues(\"category\") && (\n                  <Error errorName={errors.category} />\n                )}\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  {t(\"geofenceAccess\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <div\n                  style={{ display: \"flex\", flexDirection: \"row\", gap: \"5rem\" }}\n                >\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"PUBLIC\"\n                      checked={selectedOption === \"PUBLIC\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">{t(\"public\")}</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"PRIVATE\"\n                      checked={selectedOption === \"PRIVATE\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">{t(\"private\")}</label>\n                  </div>\n                </div>\n                {!getValues(\"geofenceAccess\") && (\n                  <Error errorName={errors.geofenceAccess} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"contactNumber\" className=\"form-label\">\n                  {t(\"contactNumber\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"number\"\n                  register={register}\n                  label=\"Contact Number\"\n                  name=\"contactNumber\"\n                  min=\"0\"\n                  onInput={(e) => {\n                    const temp = Math.max(0, e.target.value);\n                    e.target.value = temp < 1 ? \"\" : temp;\n                  }}\n                  // defaultValue={\n                  //   filteredGeoData[0] ? filteredGeoData[0].contactNumber : \"\"\n                  // }\n                />\n                <Error errorName={errors.contactNumber} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"address\" className=\"form-label\">\n                  {t(\"address\")}:\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"address\")}\n                  label=\"Address\"\n                  name=\"address\"\n                  // defaultValue={\n                  //   filteredGeoData[0] ? filteredGeoData[0].address : \"\"\n                  // }\n                />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  {t(\"tolerance\")}:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"tolerance\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"tolerance\", newValue.value);\n                      }}\n                      options={toleranceOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      value={{ label: value, value: value }}\n                    />\n                  )}\n                />\n                {!getValues(\"tolerance\") && (\n                  <Error errorName={errors.tolerance} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">{t(\"description\")}:</label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"description\")}\n                  name=\"description\"\n                  label=\"Description\"\n                  // defaultValue={\n                  //   filteredGeoData[0] ? filteredGeoData[0].description : \"\"\n                  // }\n                />\n              </div>\n              {!getValues(\"location\") && <Error errorName={errors.location} />}\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  margin: \"2rem 0\",\n                }}\n              >\n                <Button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n                  {\" \"}\n                  {t(\"submit\")}\n                </Button>\n              </div>\n            </form>\n          </FormProvider>\n        </div>\n\n        {/* Right side */}\n        <div className=\"col-md-9\" style={{ paddingLeft: \"15px\" }}>\n          <Map\n            setValue={setValue}\n            watch={watch}\n            getValues={getValues}\n            defaultValues={defaultData}\n            errors={errors}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeofenceDetail;\n","import axios from \"axios\";\n\nexport const getGeofenceData = async (pageNo = 1, limit = 10) => {\n  const data = await axios.get(`/geofences?page=${pageNo}&limit=${limit}`);\n  return data.data.data;\n};\n\nexport const deleteGeofenceData = async (id) => {\n  const { data } = await axios.delete(`/geofences/${id}`);\n  return data;\n};\n\nexport const createGeofenceData = async (body) => {\n  const { data } = await axios.post(\"/geofences\", body);\n  return data;\n};\n\nexport const getGeofenceById = async (id) => {\n  const { data } = await axios.get(`/geofences/${id}`);\n  return data;\n};\n\nexport const updateGeofence = async (id, body) => {\n  const { data } = await axios.patch(`/geofences/${id}`, body);\n  return data;\n};\n"],"names":["EditControlFC","_ref","watch","setValues","getValues","ref","useRef","id","useParams","circles","setCircles","useState","lineString","setLineString","polygon","setPolygon","points","setPoints","watchedValues","useEffect","setShapes","values","map","loc","type","prev","_jsxs","FeatureGroup","children","circle","index","_jsx","Circle","center","coordinates","radius","duration","point","Marker","position","poly","Polygon","pathOptions","color","positions","line","Polyline","path","EditControl","onEdited","e","_getValues","mapLayer","layers","eachLayer","_ref2","editing","options","l","latlngs","coords","lat","lng","_shape","_latlng","_mRadius","_marker","onCreated","_getValues3","layerType","layer","data","_leaflet_id","_latlngs","onDeleted","_getValues2","ly","filter","draw","rectangle","polyline","marker","circlemarker","edit","remove","_watch$length","_watch","geofenceHanlder","setValue","errors","geojson","setGeojson","React","features","mapId","length","style","display","height","border","location","width","MapContainer","zoom","zoomControl","TileLayer","attribution","url","styles","background","Popup","Tooltip","GeofenceDetail","selectedOption","setSelectedOption","defaultData","setDefaultData","tempValue","setTempValue","groupId","setGroupId","navigate","useNavigate","companyId","setCompanyId","companyDisabled","setCompanyDisabled","userDetails","useSelector","state","auth","user","customStyles","control","base","padding","role","businessGroupId","async","getGeofenceById","reset","geofenceAccess","getGeofenceDataById","register","formState","handleSubmit","useForm","resolver","yupResolver","geofenceMapSchema","defaultValues","category","categoryOptions","value","tolerance","toleranceOptions","handleChange","target","onSubmit","success","updateGeofence","notifySuccess","createGeofenceData","error","console","log","notifyError","Geofence","JSON","parse","localStorage","getItem","GeoData","item","filteredGeoData","setFilteredGeoData","t","useTranslation","backgroundColor","fontSize","className","boxShadow","overflow","FormProvider","htmlFor","Controller","name","rules","required","render","field","onChange","CompanyDropdown","newValue","isDisabled","Error","errorName","company","CustomInput","label","Select","flexDirection","gap","checked","min","onInput","temp","Math","max","contactNumber","_ref3","justifyContent","margin","Button","onClick","paddingLeft","Map","getGeofenceData","pageNo","arguments","undefined","limit","axios","get","concat","deleteGeofenceData","delete","post","body","patch"],"sourceRoot":""}