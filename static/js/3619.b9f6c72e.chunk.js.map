{"version":3,"file":"static/js/3619.b9f6c72e.chunk.js","mappings":"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","sources":["jsx/components/maps/EditControl.jsx","jsx/pages/Map.jsx","jsx/pages/GeofenceMap.jsx"],"sourcesContent":["import React,{useEffect, useRef} from 'react';\nimport * as L from 'leaflet';\nimport { FeatureGroup } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\n\nexport default function EditControlFC({ geojson, setGeojson }) {\n  const ref =useRef(null);\n\n  useEffect(() => {\n    if (ref.current?.getLayers().length === 0 && geojson) {\n      L.geoJSON(geojson).eachLayer((layer) => {\n        if (\n          layer instanceof L.Polyline ||\n          layer instanceof L.Polygon ||\n          layer instanceof L.Marker\n        ) {\n          if (layer?.feature?.properties.radius && ref.current) {\n            new L.Circle(layer.feature.geometry.coordinates.slice().reverse(), {\n              radius: layer.feature?.properties.radius,\n            }).addTo(ref.current);\n          } else {\n            ref.current?.addLayer(layer);\n          }\n        }\n      });\n    }\n  }, [geojson]);\n\n  const handleChange = () => {\n    const geo = ref.current?.toGeoJSON();\n    console.log(geo);\n    if (geo?.type === 'FeatureCollection') {\n      setGeojson(geo);\n    }\n  };\n\n  return (\n    <FeatureGroup ref={ref}>\n      <EditControl\n        position=\"topright\"\n        onEdited={handleChange}\n        onCreated={handleChange}\n        onDeleted={handleChange}\n        draw={{\n          rectangle: false,\n          circle: true,\n          polyline: true,\n          polygon: true,\n          marker: true,\n          circlemarker: false,\n        }}\n      />\n    </FeatureGroup>\n  );\n}","import React, { useState, useEffect, useContext } from \"react\";\nimport { createRoot } from 'react-dom/client';\nimport { MapContainer, TileLayer, GeoJSON,Marker,Popup ,Tooltip} from 'react-leaflet';\nimport EditControlFC from '../components/maps/EditControl';\n\nconst Map = () => {\n  const [geojson, setGeojson] = React.useState({\n    type: 'FeatureCollection',\n    features: [],\n  });\n\n  return (\n    <div style={{ display: 'flex', height: '85vh' }}>\n    <div style={{ width: '100%' }}>\n      <MapContainer\n        center={[ 25.2233, 55.2869]}\n        zoom={14}\n        zoomControl={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n        />\n        <Marker styles={{background:'red'}} position={[ 25.2233, 55.2869]} ><Popup>Dubai Trade Center</Popup><Tooltip>Dubai Trade Center</Tooltip></Marker>\n        <EditControlFC geojson={geojson} setGeojson={setGeojson} />\n      </MapContainer>\n    </div>\n  </div>\n  );\n}\n\nexport default Map","import React, { useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\nimport { ChromePicker } from \"react-color\";\nimport Select from \"react-select\";\nimport Map from \"./Map\";\nimport { BiNoEntry } from \"react-icons/bi\";\nimport CustomInput from \"../components/Input/CustomInput\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { geofenceMapSchema } from \"../../yup\";\nimport {\n  categoryOptions,\n  toleranceOptions,\n} from \"../components/TabComponent/VehicleTabs/Options\";\nimport { Button } from \"react-bootstrap\";\nimport Error from \"../components/Error/Error\";\nimport { notifyError, notifySuccess } from \"../../utils/toast\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nconst GeofenceDetail = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [tempValue, setTempValue] = useState();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const mapContainerStyle = {\n    height: \"100%\",\n    width: \"100%\",\n  };\n  const customStyles = {\n    control: (base) => ({\n      ...base,\n      padding: \".25rem 0 \", // Adjust the height as needed\n    }),\n  };\n\n  const defaultCenter = {\n    lat: -3.745,\n    lng: -38.523,\n  };\n\n  const [map, setMap] = useState(null);\n\n  const onLoad = React.useCallback(\n    function callback(map) {\n      const bounds = new window.google.maps.LatLngBounds(defaultCenter);\n      map.fitBounds(bounds);\n      setMap(map);\n    },\n    [defaultCenter]\n  );\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  // const handleColorChange = (color) => {\n  //   setFormData((prevData) => ({ ...prevData, color: color.hex }));\n  // };\n\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    getValues,\n    control,\n    handleSubmit,\n  } = useForm({\n    resolver: yupResolver(geofenceMapSchema),\n  });\n  const handleChange = (e) => {\n    setSelectedOption(e.target.value);\n    setValue(\"geofenceAccess\", e.target.value);\n  };\n\n  const onSubmit = (data) => {\n    try {\n      if (id) {\n        const val = JSON.parse(localStorage.getItem(\"geofenceData\"));\n        const indexToUpdate = val.findIndex((item) => item.id == id);\n        if (indexToUpdate !== -1) {\n          val[indexToUpdate] = { ...data, id };\n          localStorage.setItem(\"geofenceData\", JSON.stringify(val));\n          notifySuccess(\"Geofence Updated!\");\n          navigate(\"/vehicle-tracking\");\n        }\n        return;\n      } else {\n        data = { ...data };\n        const existingData = JSON.parse(localStorage.getItem(\"geofenceData\"));\n        data.id = existingData.length + 1;\n        existingData.push(data);\n        localStorage.setItem(\"geofenceData\", JSON.stringify(existingData));\n\n        notifySuccess(\"New Geofence Created!\");\n        navigate(\"/vehicle-tracking\");\n        return;\n      }\n    } catch (error) {\n      notifyError(\"Some error occured !!\");\n    }\n  };\n\n  const Geofence = JSON.parse(localStorage.getItem(\"geofenceData\"));\n  const GeoData = Geofence.filter((item) => item.id == id);\n\n  const [filteredGeoData, setFilteredGeoData] = useState(GeoData);\n\n  return (\n    <div>\n      <div style={{ padding: \"10px\", backgroundColor: \"#FFFDFD\" }}>\n        <h2 style={{ fontSize: \"20px\" }}>Geofence Detail</h2>\n      </div>\n\n      <div className=\"\" style={{ display: \"flex\", height: \"88vh\" }}>\n        <div\n          className=\"col-md-3\"\n          style={{\n            padding: \"15px\",\n            boxShadow: \"9px 0 4px rgba(0, 0, 0, 0.1)\",\n            backgroundColor: \"#fff\",\n            overflow: \"auto\",\n          }}\n        >\n          <FormProvider>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  Company:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  name=\"company\"\n                  register={register}\n                  label=\"Company\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].company : \"\"\n                  }\n                />\n                <Error errorName={errors.company} />\n              </div>\n              <div className=\"mb-2\">\n                <label htmlFor=\"company\" className=\"form-label\">\n                  Name:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"text\"\n                  label=\"Name\"\n                  register={register}\n                  name=\"name\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].name : \"\"\n                  }\n                />\n                <Error errorName={errors.name} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  Category:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"category\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"category\", newValue.value);\n                      }}\n                      options={categoryOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      defaultValue={\n                        filteredGeoData[0]\n                          ? filteredGeoData[0].name\n                          : categoryOptions[0]\n                      }\n                    />\n                  )}\n                />\n                {!getValues(\"category\") && (\n                  <Error errorName={errors.category} />\n                )}\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  Geofence Access:<span className=\"text-danger\">*</span>\n                </label>\n                <div\n                  style={{ display: \"flex\", flexDirection: \"row\", gap: \"5rem\" }}\n                >\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"public\"\n                      checked={selectedOption === \"public\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">Public</label>\n                  </div>\n                  <div className=\"form-check\">\n                    <input\n                      type=\"radio\"\n                      className=\"form-check-input\"\n                      value=\"private\"\n                      checked={selectedOption === \"private\"}\n                      onChange={handleChange}\n                    />\n                    <label className=\"form-check-label\">Private</label>\n                  </div>\n                </div>\n                {!getValues(\"geofenceAccess\") && (\n                  <Error errorName={errors.geofenceAccess} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"contactNumber\" className=\"form-label\">\n                  Contact Number:<span className=\"text-danger\">*</span>\n                </label>\n                <CustomInput\n                  type=\"number\"\n                  register={register}\n                  label=\"Contact Number\"\n                  name=\"contactNumber\"\n                  min=\"0\"\n                  onInput={(e)=>{const temp = Math.max(0, e.target.value); e.target.value = temp < 1 ? '': temp}}\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].contactNumber : \"\"\n                  }\n                />\n                <Error errorName={errors.contactNumber} />\n              </div>\n\n              <div className=\"mb-3\">\n                <label htmlFor=\"address\" className=\"form-label\">\n                  Address:\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"address\")}\n                  label=\"Address\"\n                  name=\"address\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].address : \"\"\n                  }\n                />\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">\n                  Tolerance:<span className=\"text-danger\">*</span>\n                </label>\n                <Controller\n                  name=\"tolerance\"\n                  control={control}\n                  rules={{ required: true }}\n                  render={({ field: { onChange, value, name, ref } }) => (\n                    <Select\n                      onChange={(newValue) => {\n                        setTempValue(newValue.value);\n                        setValue(\"tolerance\", newValue.value);\n                      }}\n                      options={toleranceOptions}\n                      ref={ref}\n                      name={name}\n                      styles={customStyles}\n                      defaultValue={\n                        filteredGeoData[0]\n                          ? filteredGeoData[0].name\n                          : toleranceOptions[0]\n                      }\n                    />\n                  )}\n                />\n                {!getValues(\"tolerance\") && (\n                  <Error errorName={errors.tolerance} />\n                )}\n              </div>\n\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Description:</label>\n                <textarea\n                  className=\"form-control\"\n                  {...register(\"description\")}\n                  name=\"description\"\n                  label=\"Description\"\n                  defaultValue={\n                    filteredGeoData[0] ? filteredGeoData[0].description : \"\"\n                  }\n                />\n              </div>\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  margin: \"2rem 0\",\n                }}\n              >\n                <Button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n                  {\" \"}\n                  Next\n                </Button>\n              </div>\n            </form>\n          </FormProvider>\n        </div>\n\n        {/* Right side */}\n        <div className=\"col-md-9\" style={{ paddingLeft: \"15px\" }}>\n          <Map />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeofenceDetail;\n"],"names":["EditControlFC","_ref","geojson","setGeojson","ref","useRef","useEffect","_ref$current","current","getLayers","length","L","eachLayer","layer","_layer$feature","_layer$feature2","_ref$current2","feature","properties","radius","geometry","coordinates","slice","reverse","addTo","addLayer","handleChange","_ref$current3","geo","toGeoJSON","console","log","type","_jsx","FeatureGroup","children","EditControl","position","onEdited","onCreated","onDeleted","draw","rectangle","circle","polyline","polygon","marker","circlemarker","Map","React","features","style","display","height","width","_jsxs","MapContainer","center","zoom","zoomControl","TileLayer","attribution","url","Marker","styles","background","Popup","Tooltip","GeofenceDetail","selectedOption","setSelectedOption","useState","tempValue","setTempValue","navigate","useNavigate","id","useParams","customStyles","control","base","padding","defaultCenter","lat","lng","map","setMap","register","formState","errors","setValue","getValues","handleSubmit","bounds","window","google","maps","LatLngBounds","fitBounds","useForm","resolver","yupResolver","geofenceMapSchema","e","target","value","onSubmit","data","val","JSON","parse","localStorage","getItem","indexToUpdate","findIndex","item","setItem","stringify","notifySuccess","existingData","push","error","notifyError","GeoData","filter","filteredGeoData","setFilteredGeoData","backgroundColor","fontSize","className","boxShadow","overflow","FormProvider","htmlFor","CustomInput","name","label","defaultValue","company","Error","errorName","Controller","rules","required","render","field","onChange","Select","newValue","options","categoryOptions","category","flexDirection","gap","checked","geofenceAccess","min","onInput","temp","Math","max","contactNumber","address","_ref2","toleranceOptions","tolerance","description","justifyContent","margin","Button","onClick","paddingLeft"],"sourceRoot":""}